[
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/",
	"title": "1. Thiết lập &amp; Triển khai Hạ tầng",
	"tags": [],
	"description": "",
	"content": "Thiết lập \u0026amp; Triển khai Hạ tầng 🚀 Hướng dẫn hoàn chỉnh thiết lập hạ tầng AWS cho workshop DynamoDB Advanced Patterns\nModule này cung cấp thiết lập nền tảng cần thiết cho workshop DynamoDB Advanced Patterns, đảm bảo tất cả học viên có môi trường hoạt động sử dụng AWS Free Tier.\n📋 Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Xác minh tài khoản AWS và tính đủ điều kiện Free Tier ✅ Điều hướng AWS Console hiệu quả ✅ Triển khai hạ tầng qua CloudFormation ✅ Xác minh tất cả tài nguyên được tạo thành công ✅ Thiết lập giám sát và cảnh báo billing  🏗️ Tổng quan Kiến trúc Chúng ta sẽ triển khai hạ tầng trên hai vùng AWS: 🎯 Những gì chúng ta sẽ xây dựng Chúng ta đang xây dựng một nền tảng thương mại điện tử đơn giản với:  Users: Hồ sơ khách hàng và xác thực Products: Danh mục với các danh mục và giá cả Orders: Giỏ hàng và quản lý đơn hàng Real-time processing: Cập nhật dựa trên stream Global availability: Triển khai đa vùng  📦 Tài nguyên được tạo Template CloudFormation này sẽ tạo:  DynamoDB Table: Global table với streams được kích hoạt Lambda Function: Stream processor cho cập nhật thời gian thực IAM Roles: Chính sách truy cập bảo mật CloudWatch Dashboard: Giám sát và metrics Billing Alerts: Cơ chế bảo vệ chi phí  🚀 Điều kiện tiên quyết Trước khi bắt đầu, đảm bảo bạn có:  Tài khoản AWS với tính đủ điều kiện Free Tier Quyền truy cập quản trị vào AWS Console Hiểu biết cơ bản về các dịch vụ AWS Trình duyệt web hiện đại (Chrome, Firefox, Safari)  Hãy bắt đầu với thiết lập hạ tầng sẽ hỗ trợ triển khai DynamoDB đa vùng của chúng ta.  Bạn có thể chọn tài khoản Personal hoặc Business  Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  Lưu ý: Bạn có thể chọn địa chỉ khác cho tài khoản của mình bằng cách chọn Use a new address trước Verify and Add.    Xác minh số điện thoại của bạn  Nhập số điện thoại. Nhập mã kiểm tra bảo mật sau đó chọn Call me now. AWS sẽ liên hệ và xác minh việc mở tài khoản.  Chọn Support Plan  Trong trang Select a support plan, chọn một plan hiệu quả, để so sánh các plan, xem Compare AWS Support Plans.  Đợi tài khoản của bạn được kích hoạt  Sau khi chọn Support plan, tài khoản thường được kích hoạt sau vài phút, nhưng quá trình có thể mất đến 24 giờ. Bạn vẫn có thể đăng nhập vào tài khoản AWS lúc này, trang chủ AWS có thể hiển thị nút \u0026ldquo;Complete Sign Up\u0026rdquo; trong thời gian này, ngay cả khi bạn đã hoàn thành tất cả các bước trong phần đăng ký. Sau khi nhận được email xác nhận tài khoản của bạn đã được kích hoạt, bạn có thể truy cập tất cả dịch vụ AWS.  Quan trọng  Các hành động AWS Identity and Access Management (IAM) sau đây sẽ đạt đến cuối hỗ trợ tiêu chuẩn vào tháng 7 năm 2023: aws-portal:ModifyAccount và aws-portal:ViewAccount. Xem Using fine-grained AWS Billing actions để thay thế các hành động này bằng các hành động chi tiết để bạn có quyền truy cập vào AWS Billing, AWS Cost Management và bảng điều khiển tài khoản AWS. Nếu bạn tạo tài khoản AWS hoặc tài khoản AWS Organizations Management trước ngày 6 tháng 3 năm 2023, các hành động chi tiết sẽ có hiệu lực từ tháng 7 năm 2023. Chúng tôi khuyên bạn thêm các hành động chi tiết, nhưng không loại bỏ quyền hiện có với tiền tố aws-portal hoặc purchase-orders. Nếu bạn tạo tài khoản AWS hoặc tài khoản AWS Organizations Management vào hoặc sau ngày 6 tháng 3 năm 2023, các hành động chi tiết có hiệu lực ngay lập tức. AWS gán các định danh duy nhất sau cho mỗi tài khoản AWS: AWS account ID: Một số 12 chữ số, chẳng hạn như 012345678901, định danh duy nhất cho tài khoản AWS. Nhiều tài nguyên AWS bao gồm ID tài khoản trong Amazon Resource Names (ARNs) của chúng. Phần ID tài khoản phân biệt tài nguyên trong một tài khoản với tài nguyên trong tài khoản khác. Nếu bạn là người dùng AWS Identity and Access Management (IAM), bạn có thể đăng nhập vào AWS Management Console bằng ID tài khoản hoặc bí danh tài khoản. Mặc dù ID tài khoản, như bất kỳ thông tin nhận dạng nào, nên được sử dụng và chia sẻ cẩn thận, chúng không được coi là thông tin bí mật, nhạy cảm hoặc bảo mật. Canonical user ID: Một định danh chữ và số, chẳng hạn như 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, là dạng che giấu của ID tài khoản AWS. Bạn có thể sử dụng ID này để xác định tài khoản AWS khi cấp quyền truy cập chéo tài khoản vào buckets và objects bằng Amazon Simple Storage Service (Amazon S3). Bạn có thể lấy canonical user ID cho tài khoản AWS của mình với tư cách là người dùng root hoặc người dùng IAM. Bạn phải được xác thực với AWS để xem các định danh này.  Cảnh báo Không cung cấp thông tin xác thực AWS của bạn (bao gồm mật khẩu và access keys) cho bên thứ ba cần định danh tài khoản AWS của bạn để chia sẻ tài nguyên AWS với bạn. Làm như vậy sẽ cấp cho họ quyền truy cập tương tự vào tài khoản AWS như bạn có.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/5.1-cloudwatch-dashboards/",
	"title": "5.1 CloudWatch Dashboards",
	"tags": [],
	"description": "",
	"content": "5.1 CloudWatch Dashboards ðŸš€ Ná»™i dung tiáº¿ng Viá»‡t cho module nÃ y\nTá»•ng quan Module nÃ y sáº½ Ä‘Æ°á»£c cáº­p nháº­t vá»›i ná»™i dung tiáº¿ng Viá»‡t chi tiáº¿t.\nMá»¥c tiÃªu  âœ… Há»c cÃ¡c concepts chÃ­nh âœ… Thá»±c hÃ nh hands-on âœ… Náº¯m vá»¯ng best practices  Ná»™i dung Ná»™i dung chi tiáº¿t sáº½ Ä‘Æ°á»£c bá»• sung.\n ðŸ“ Ná»™i dung sáº½ Ä‘Æ°á»£c cáº­p nháº­t sá»›m!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/5.2-cost-analysis-optimization/",
	"title": "5.2 Cost Analysis &amp; Optimization",
	"tags": [],
	"description": "",
	"content": "5.3 Cost Analysis \u0026amp; Optimization ðŸš€ Ná»™i dung tiáº¿ng Viá»‡t cho module nÃ y\nTá»•ng quan Module nÃ y sáº½ Ä‘Æ°á»£c cáº­p nháº­t vá»›i ná»™i dung tiáº¿ng Viá»‡t chi tiáº¿t.\nMá»¥c tiÃªu  âœ… Há»c cÃ¡c concepts chÃ­nh âœ… Thá»±c hÃ nh hands-on âœ… Náº¯m vá»¯ng best practices  Ná»™i dung Ná»™i dung chi tiáº¿t sáº½ Ä‘Æ°á»£c bá»• sung.\n ðŸ“ Ná»™i dung sáº½ Ä‘Æ°á»£c cáº­p nháº­t sá»›m!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/6.1-batch-operations/",
	"title": "6.1 Batch Operations",
	"tags": [],
	"description": "",
	"content": "6.1 Batch Operations ðŸš€ Ná»™i dung tiáº¿ng Viá»‡t cho module nÃ y\nTá»•ng quan Module nÃ y sáº½ Ä‘Æ°á»£c cáº­p nháº­t vá»›i ná»™i dung tiáº¿ng Viá»‡t chi tiáº¿t.\nMá»¥c tiÃªu  âœ… Há»c cÃ¡c concepts chÃ­nh âœ… Thá»±c hÃ nh hands-on âœ… Náº¯m vá»¯ng best practices  Ná»™i dung Ná»™i dung chi tiáº¿t sáº½ Ä‘Æ°á»£c bá»• sung.\n ðŸ“ Ná»™i dung sáº½ Ä‘Æ°á»£c cáº­p nháº­t sá»›m!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/6.2-conditional-updates/",
	"title": "6.2 Conditional Updates",
	"tags": [],
	"description": "",
	"content": "6.2 Conditional Updates ðŸš€ Ná»™i dung tiáº¿ng Viá»‡t cho module nÃ y\nTá»•ng quan Module nÃ y sáº½ Ä‘Æ°á»£c cáº­p nháº­t vá»›i ná»™i dung tiáº¿ng Viá»‡t chi tiáº¿t.\nMá»¥c tiÃªu  âœ… Há»c cÃ¡c concepts chÃ­nh âœ… Thá»±c hÃ nh hands-on âœ… Náº¯m vá»¯ng best practices  Ná»™i dung Ná»™i dung chi tiáº¿t sáº½ Ä‘Æ°á»£c bá»• sung.\n ðŸ“ Ná»™i dung sáº½ Ä‘Æ°á»£c cáº­p nháº­t sá»›m!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/",
	"title": "Workshop DynamoDB Advanced Patterns",
	"tags": [],
	"description": "",
	"content": "DynamoDB Advanced Patterns Xây dựng Kiến trúc Đa Vùng với Global Tables và Streams Tổng quan Trong workshop toàn diện này, bạn sẽ xây dựng một Nền tảng E-commerce Đa Vùng sử dụng DynamoDB Advanced Patterns và AWS Free Tier. Bạn sẽ học Single Table Design, triển khai Global Tables cho replication đa vùng, và xây dựng real-time stream processing với Lambda. Cuối cùng, chúng ta sẽ triển khai các chiến lược monitoring và optimization toàn diện trong khi duy trì kiểm soát chi phí nghiêm ngặt trong giới hạn Free Tier.\nSingle Table Design Single Table Design là một phương pháp modeling DynamoDB nơi bạn lưu trữ nhiều loại entity trong một bảng sử dụng composite keys. Pattern này tối ưu cho hiệu suất và chi phí bằng cách giảm số lượng requests và tận dụng kiến trúc partition-based của DynamoDB. Khi triển khai đúng cách, nó cung cấp hiệu suất truy vấn sub-millisecond trong khi giảm thiểu tiêu thụ capacity.\nNhư một best practice, hãy thiết kế access patterns của bạn trước khi tạo table structure. Single Table Design yêu cầu lập kế hoạch cẩn thận cho partition keys (PK) và sort keys (SK) để hỗ trợ tất cả query patterns của bạn một cách hiệu quả. Workshop này sử dụng một mô hình dữ liệu e-commerce đã được chứng minh hỗ trợ 6 access patterns được tối ưu trong khi ở trong giới hạn Free Tier.\n\rGlobal Tables Đa Vùng Global Tables cung cấp replication database đa vùng, multi-active được quản lý hoàn toàn. Dữ liệu được ghi vào bất kỳ vùng nào sẽ được tự động replicate đến tất cả các vùng khác trong vài giây. Điều này cho phép bạn xây dựng các ứng dụng phân tán toàn cầu với truy cập read và write local, cải thiện hiệu suất và cung cấp khả năng disaster recovery.\nDynamoDB Streams \u0026amp; Lambda DynamoDB Streams capture các events modification dữ liệu trong table của bạn trong thời gian gần thực. Khi kết hợp với AWS Lambda, bạn có thể xây dựng kiến trúc event-driven tự động xử lý thay đổi, update derived data, gửi notifications, hoặc trigger business workflows. Pattern này rất quan trọng để xây dựng các ứng dụng reactive, scalable.\nGlobal Secondary Indexes (GSI) Global Secondary Indexes cho phép bạn query dữ liệu của mình sử dụng các access patterns khác với main table. GSIs có partition và sort keys riêng, cho phép các truy vấn hiệu quả qua các dimensions khác nhau của dữ liệu bạn. Thiết kế GSI đúng cách là crucial cho optimization hiệu suất và kiểm soát chi phí.\nMonitoring \u0026amp; Cost Optimization CloudWatch monitoring cung cấp visibility thời gian thực vào hiệu suất DynamoDB, capacity utilization, và costs. Kết hợp với billing alerts và Free Tier tracking, bạn có thể đảm bảo hiệu suất tối ưu trong khi duy trì kiểm soát chi phí nghiêm ngặt. Workshop này triển khai comprehensive monitoring dashboards và automated alerting.\nTuân thủ Free Tier AWS Free Tier cung cấp giới hạn hào phóng cho học tập và thử nghiệm. Workshop này được thiết kế để chỉ sử dụng 60% tài nguyên Free Tier có sẵn, đảm bảo zero cost trong khi cung cấp trải nghiệm học tập enterprise-grade. Tất cả participants sẽ triển khai các patterns production-ready mà không phát sinh bất kỳ khoản phí nào.\nNội dung Chính  Thiết lập \u0026amp; Triển khai Hạ tầng Triển khai Single Table Design Thiết lập Global Tables Đa Vùng DynamoDB Streams \u0026amp; Lambda Processing Monitoring \u0026amp; Performance Optimization Advanced Patterns \u0026amp; Best Practices Dọn dẹp \u0026amp; Quản lý Tài nguyên  "
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/",
	"title": "2. Triển khai Single Table Design",
	"tags": [],
	"description": "",
	"content": "Triển khai Single Table Design 📊 Học cách triển khai các mẫu Single Table Design của DynamoDB để tối ưu hiệu suất và hiệu quả chi phí\nTổng quan  Single Table Design là một phương pháp cách mạng trong việc mô hình hóa dữ liệu trong DynamoDB. Thay vì sử dụng nhiều bảng như trong cơ sở dữ liệu quan hệ, chúng ta lưu trữ tất cả các loại entity (Users, Products, Orders) trong một bảng sử dụng composite keys cho các mối quan hệ.  Tại sao Single Table Design? Vấn đề của Phương pháp Quan hệ Truyền thống:  Nhiều bảng = Nhiều truy vấn = Độ trễ cao hơn JOINs rất tốn kém và không có sẵn trong DynamoDB Hiệu suất không nhất quán qua các mẫu truy vấn khác nhau Chi phí cao hơn từ việc quản lý nhiều bảng  Lợi ích DynamoDB Single Table:  Truy vấn đơn lấy dữ liệu liên quan Hiệu suất nhất quán qua tất cả các mẫu truy cập Chi phí thấp hơn với ít bảng và operations hơn Giao dịch atomic qua các loại entity  Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Hiểu các nguyên tắc và lợi ích của Single Table Design ✅ Thiết kế composite keys (PK + SK) cho nhiều loại entity ✅ Tạo và truy vấn dữ liệu sử dụng DynamoDB Console ✅ Triển khai Global Secondary Indexes (GSI) cho các mẫu truy cập linh hoạt ✅ Phân tích metrics hiệu suất và chi phí  Thời lượng Module: 90 phút  Lý thuyết: 20 phút - Khái niệm và nguyên tắc cốt lõi Demo: 25 phút - Điều hướng Console và tạo dữ liệu Thực hành: 35 phút - Tạo dữ liệu e-commerce của riêng bạn Ôn tập: 10 phút - Phân tích hiệu suất và Q\u0026amp;A  Tổng quan Mô hình Dữ liệu E-commerce Chúng ta sẽ xây dựng một nền tảng e-commerce đơn giản với các entity này:    PK SK Entity Data     USER#user1 PROFILE User name, email, phone   USER#user1 ORDER#ord1 Order status, total, date   PRODUCT#p1 DETAILS Product name, price, category   ORDER#ord1 ITEM#p1 OrderItem quantity, price, product    Các Mẫu Truy cập Chúng ta sẽ Triển khai    Mẫu Mô tả Phương pháp Truy vấn     1 Lấy user profile PK = USER#id, SK = PROFILE   2 Lấy orders của user PK = USER#id, SK begins_with ORDER#   3 Lấy chi tiết order với items PK = ORDER#id   4 Lấy products theo category GSI1: CATEGORY# queries   5 Lấy products theo price range GSI2: PRICE# queries   6 Lấy orders theo status GSI2: STATUS# queries    Khái niệm Chính Chiến lược Composite Keys  Partition Key (PK): Nhóm các items liên quan với nhau Sort Key (SK): Cho phép range queries và relationships GSI Keys: Cho phép các mẫu truy vấn bổ sung  Entity Namespacing  USER#: Tất cả dữ liệu liên quan đến user PRODUCT#: Tất cả dữ liệu liên quan đến product ORDER#: Tất cả dữ liệu liên quan đến order CATEGORY#: Nhóm products STATUS#: Nhóm trạng thái orders  Triết lý Thiết kế: Trong Single Table Design, chúng ta mô hình hóa cấu trúc bảng dựa trên CÁCH chúng ta sẽ truy vấn dữ liệu, không phải cách chúng ta sẽ lưu trữ nó. Điều này ngược lại với thiết kế cơ sở dữ liệu quan hệ!\n\rNhững gì Bạn sẽ Xây dựng Đến cuối module này, bạn sẽ đã tạo:  User profiles với cấu trúc key phù hợp Product catalog với category và price indexing Order management với item relationships Truy vấn hiệu quả sử dụng table và GSI patterns Performance insights từ CloudWatch metrics  An toàn Chi phí: Tất cả bài tập sử dụng dữ liệu tối thiểu và nằm trong giới hạn AWS Free Tier. Giám sát CloudWatch dashboard để theo dõi usage.\n\rĐiều kiện Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:  Đã hoàn thành Module 1: Infrastructure Setup DynamoDB table demo-ecommerce-freetier đang Active Quyền truy cập AWS Console với DynamoDB permissions Hiểu biết cơ bản về các khái niệm NoSQL  Sẵn sàng cách mạng hóa phương pháp data modeling của bạn? Hãy khám phá Single Table Design!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/",
	"title": "3. Global Tables Multi-Region Setup",
	"tags": [],
	"description": "",
	"content": "Global Tables Multi-Region Setup 🌍 Thiết lập DynamoDB đa vùng cho truy cập toàn cầu\nTổng quan Global Tables biến đổi DynamoDB table đơn vùng của bạn thành cơ sở dữ liệu phân tán toàn cầu phục vụ người dùng trên toàn thế giới với độ trễ thấp.\nTại sao Global Tables? Vấn đề  Độ trễ cao: Người dùng xa database phải chờ lâu Không có Disaster Recovery: Điểm lỗi đơn Khả năng mở rộng hạn chế: Tất cả traffic qua một vùng  Giải pháp Trước: Chỉ US-EAST-1 → Độ trễ cao cho người dùng EU Sau: US-EAST-1 + EU-WEST-1 → Độ trễ thấp toàn cầu Bạn sẽ học gì  Xác minh Global Setup: Kiểm tra cấu hình đa vùng Test Replication: Ghi ở vùng này, đọc ở vùng khác Multi-Region Operations: Xử lý dữ liệu toàn cầu  Lợi ích chính  Độ trễ dưới 10ms cho người dùng toàn cầu Sao chép tự động giữa các vùng (0.5-2 giây) Free Tier friendly: Áp dụng cho mỗi vùng Disaster recovery tích hợp  Cơ bản về Global Tables Luồng sao chép 1. Ghi vào US-EAST-1 → ORDER#12345 được tạo 2. DynamoDB Streams ghi nhận thay đổi 3. Tự động sao chép sang EU-WEST-1 4. ORDER#12345 có sẵn ở Europe (1-2 giây) Tính năng chính  Hai chiều: Đọc/ghi từ bất kỳ vùng nào Eventually Consistent: Thay đổi đồng bộ trong vài giây Conflict Resolution: Last Writer Wins Zero downtime: Chuyển đổi vùng tự động  Nội dung Module  Global Tables Overview - Hiểu kiến trúc Verify Global Setup - Kiểm tra cấu hình Multi-Region Operations - Test chức năng đa vùng  Thiết lập: CloudFormation deployment của bạn đã cấu hình Global Tables giữa US-East-1 và EU-West-1.\n\r\r3.1 Tổng quan Global Tables\r\r\r3.2 Xác minh Global Setup\r\r\r3.3 Multi-Region Operations\r\r\rHãy làm cho DynamoDB table của bạn có thể truy cập toàn cầu!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/",
	"title": "4. Streams &amp; Lambda Processing",
	"tags": [],
	"description": "",
	"content": "DynamoDB Streams \u0026amp; Lambda Processing ⚡ Real-time event processing với DynamoDB Streams và AWS Lambda\nModule Overview Transform static database của bạn thành reactive, event-driven system automatically responds to every data change trong real-time.\nWhat You\u0026rsquo;ll Learn  Stream Architecture: Understand làm thế nào DynamoDB captures và processes data changes Lambda Integration: Configure serverless functions để respond to database events Event Processing: Handle INSERT, MODIFY, và REMOVE events effectively Real-time Patterns: Implement common event-driven architecture patterns Monitoring \u0026amp; Debugging: Track performance và troubleshoot stream processing  Architecture Overview ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ Application │ │ DynamoDB │ │ DynamoDB Streams│\r│ │ │ Table │ │ │\r│ ┌───────────┐ │ │ ┌───────────┐ │ │ ┌───────────┐ │\r│ │ Write │──┼───►│ │ Item │──┼───►│ │ Stream │ │\r│ │ Item │ │ │ │ Created │ │ │ │ Record │ │\r│ └───────────┘ │ │ └───────────┘ │ │ └───────────┘ │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\r│\r▼\r┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ Lambda │ │ Event Source │ │ Stream │\r│ Function │ │ Mapping │ │ Shards │\r│ │ │ │ │ │\r│ ┌───────────┐ │ │ ┌───────────┐ │ │ ┌───────────┐ │\r│ │ Process │◄─┼────│ │ Poll │◄─┼────│ │ Records │ │\r│ │ Records │ │ │ │ Stream │ │ │ │ Queue │ │\r│ └───────────┘ │ │ └───────────┘ │ │ └───────────┘ │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\rKey Benefits Real-time Processing\n Process data changes within 100-500 milliseconds Không polling required - events pushed automatically Scale to millions của events per second  Event-Driven Architecture\n Decouple data storage từ business logic Trigger multiple downstream systems Build reactive, responsive applications  Cost Effective\n Pay only cho actual processing time AWS Free Tier includes 1M Lambda invocations Không infrastructure to manage  Common Use Cases    Pattern Trigger Action     Audit Trail Any change Log to S3/CloudWatch   Cache Invalidation Item update Clear Redis/ElastiCache   Notifications Order created Send email/SMS   Analytics User activity Update metrics dashboard   Search Index Product change Update Elasticsearch   Workflow Status change Trigger Step Functions    Stream Processing Patterns Fan-out Pattern: One change triggers multiple Lambda functions\nDynamoDB Change → Stream → Lambda 1 (Email)\r→ Lambda 2 (Analytics) → Lambda 3 (Cache Update)\rPipeline Pattern: Sequential processing through multiple stages\nOrder Created → Validate → Process Payment → Update Inventory → Ship\rAggregation Pattern: Combine multiple changes thành summaries\nSales Records → Real-time Revenue Dashboard\rUser Actions → Activity Analytics\rPerformance Characteristics  Latency: Typically 100-500ms từ change to processing Throughput: Scales automatically với data volume của bạn Reliability: Automatic retries và error handling Ordering: Changes processed in order per item Retention: Stream records available cho 24 hours  Module Structure Module này được organized thành hands-on sections build upon each other:\n Stream Configuration - Enable và configure DynamoDB Streams Lambda Function Setup - Create và deploy stream processing functions Event Processing Practice - Test với real data changes Monitoring \u0026amp; Debugging - Track performance và troubleshoot issues  Mỗi section includes:\n ✅ Step-by-step AWS Console instructions ✅ Code examples và templates ✅ Screenshot placeholders cho documentation ✅ Troubleshooting guides ✅ Real-world scenarios  Prerequisites Trước khi starting module này, ensure bạn có:\n ✅ Completed Module 1 (DynamoDB table setup) ✅ Basic understanding của AWS Lambda ✅ Familiarity với JSON và event-driven concepts ✅ AWS Console access với appropriate permissions  Free Tier Optimization: Tất cả exercises được designed để stay within AWS Free Tier limits, including Lambda invocations và DynamoDB streams.\n\rLearning Objectives Sau khi hoàn thành module này, bạn sẽ:\n Understand DynamoDB Streams architecture và event flow Configure Lambda functions để process stream events Implement common event-driven patterns Monitor stream processing performance Debug stream processing issues Design scalable event-driven applications  Ready to Build: Transform static database của bạn thành reactive, event-driven system automatically responds to every change!\n\r\r4.1 Stream Configuration\r\r\r4.2 Lambda Function Setup\r\r\r DynamoDB Streams configuration Lambda stream processor functions Real-time order processing pipeline Error handling và dead letter queues  Hãy implement real-time stream processing cho e-commerce platform của bạn.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/",
	"title": "5. Monitoring &amp; Optimization",
	"tags": [],
	"description": "",
	"content": "Monitoring \u0026amp; Optimization 📊 Tối ưu hiệu suất DynamoDB và thiết lập monitoring toàn diện cho production workloads\nTổng quan Monitoring và optimization là crucial cho việc vận hành DynamoDB thành công trong production. Module này sẽ dạy bạn cách thiết lập comprehensive monitoring, phân tích performance metrics, và optimize costs cho maximum efficiency.\nTại sao Monitoring quan trọng? Production Challenges:  Performance Issues: Throttling, high latency, timeouts Cost Overruns: Unexpected charges, over-provisioning Operational Blind Spots: Lack of visibility into system health Scaling Decisions: When và how to scale capacity  Monitoring Benefits:  Proactive Problem Detection: Catch issues trước khi affect users Cost Optimization: Right-size resources cho optimal spending Performance Insights: Data-driven optimization decisions Operational Excellence: Reliable, observable systems  Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Thiết lập CloudWatch dashboards cho DynamoDB monitoring ✅ Cấu hình alerting và notifications cho key metrics ✅ Thực hiện cost analysis và optimization strategies ✅ Implement performance tuning techniques ✅ Troubleshoot common performance issues  Thời lượng Module: 90 phút  Lý thuyết: 15 phút - Monitoring principles và best practices Dashboard Setup: 25 phút - CloudWatch configuration Alerting: 20 phút - Notification setup và testing Optimization: 25 phút - Performance tuning hands-on Analysis: 5 phút - Review và planning  Key Metrics to Monitor Performance Metrics: Latency Metrics:\r• SuccessfulRequestLatency\r• UserErrors\r• SystemErrors\r• ThrottledRequests\rCapacity Metrics:\r• ConsumedReadCapacityUnits • ConsumedWriteCapacityUnits\r• ProvisionedReadCapacityUnits\r• ProvisionedWriteCapacityUnits\rThroughput Metrics:\r• ItemCount\r• TableSizeBytes\r• ReplicationMetrics (cho Global Tables)\rCost Optimization Areas:  Right-sizing Capacity: Match provisioned với actual usage On-Demand vs Provisioned: Choose optimal billing mode Storage Optimization: Efficient data modeling GSI Optimization: Minimize unnecessary indexes  Dashboard Architecture ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ DynamoDB │───►│ CloudWatch │───►│ Dashboard │\r│ Metrics │ │ Metrics │ │ Visualization │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\r│ │ │\r▼ ▼ ▼\r┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ Auto Scaling │ │ SNS Alerts │ │ Operational │\r│ Triggers │ │ Notifications │ │ Insights │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\rModule này bao gồm:\n 5.1 CloudWatch Dashboards: Thiết lập comprehensive monitoring 5.2 Alerting \u0026amp; Notifications: Configure proactive alerts 5.3 Cost Analysis \u0026amp; Optimization: Optimize spending 5.4 Performance Tuning: Advanced optimization techniques   📊 Hãy bắt đầu master monitoring và optimization!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/",
	"title": "6. Advanced Patterns",
	"tags": [],
	"description": "",
	"content": "Advanced Patterns 🚀 Nắm vững các enterprise-grade DynamoDB patterns cho production applications phức tạp\nTổng quan Module này tập trung vào các advanced patterns và techniques được sử dụng bởi các enterprise-grade applications. Bạn sẽ học các strategies cho batch operations, conditional updates, advanced querying, và production-ready patterns.\nTại sao Advanced Patterns? Enterprise Requirements:  Complex Business Logic: Multi-step operations, conditional processing High Performance: Batch operations, optimized query patterns Data Integrity: Atomic operations, consistency guarantees Scalability: Patterns that work at massive scale  Advanced Capabilities:  Batch Operations: Process nhiều items efficiently Conditional Updates: Ensure data integrity Advanced Queries: Complex filtering và sorting Production Patterns: Enterprise-grade best practices  Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Implement efficient batch operations cho bulk data processing ✅ Use conditional updates để maintain data integrity ✅ Apply advanced query techniques cho optimal performance ✅ Deploy production-ready patterns cho enterprise applications ✅ Troubleshoot complex scenarios và performance issues  Thời lượng Module: 90 phút  Lý thuyết: 15 phút - Advanced concepts overview Batch Operations: 20 phút - Bulk processing techniques Conditional Logic: 20 phút - Data integrity patterns Query Optimization: 20 phút - Advanced querying Production Patterns: 15 phút - Enterprise best practices  Patterns Overview 1. Batch Operations BatchWriteItem: Up to 25 items per request\rBatchGetItem: Up to 100 items per request\rParallel Processing: Multiple batches concurrently\rError Handling: Retry logic for failed items\r2. Conditional Updates Check Values Before Modification:\r• ConditionExpression\r• UpdateExpression • ReturnValues\rVersion Checking:\r• Optimistic locking\r• Implement version numbers\r• Prevent race conditions\r3. Advanced Query Techniques Query Optimization:\r• Projection Expressions: Select specific attributes\r• Filter Expressions: Post-query filtering\r• Pagination: Handle large result sets\r• Parallel Operations: Process segments concurrently\r4. Production Patterns E-commerce Platform Applications:\r• Inventory Management với conditional updates\r• Order Processing với batch operations\r• User Analytics với advanced queries\r• Real-time Recommendations\rArchitecture Patterns ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ Application │───►│ DynamoDB │───►│ Advanced │\r│ Layer │ │ Table │ │ Patterns │\r│ │ │ │ │ │\r│ • Business │ │ • Batch Ops │ │ • Conditional │\r│ Logic │ │ • Transactions │ │ Updates │\r│ • Validation │ │ • Query Opts │ │ • Query Tuning │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\rModule này bao gồm:\n 6.1 Batch Operations: Efficient multi-item processing 6.2 Conditional Updates: Data integrity patterns 6.3 Advanced Query Techniques: Performance optimization 6.4 Production Patterns: Enterprise best practices   🚀 Hãy master các advanced patterns cho production success!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/7-cleanup-resources/",
	"title": "7. Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp Tài nguyên Trong phần này, bạn sẽ học cách dọn dẹp tài nguyên trên AWS Cloud để tránh phát sinh chi phí không cần thiết.\nTại sao Dọn dẹp quan trọng  Kiểm soát Chi phí: Ngăn chặn các khoản phí AWS không mong muốn Quản lý Tài nguyên: Loại bỏ hạ tầng không sử dụng Best Practices: Học quản lý lifecycle tài nguyên đúng cách  1. Xóa DynamoDB Table được tạo trong Lab  Truy cập DynamoDB Management Console Trên thanh điều hướng bên trái, chọn Tables Chọn DynamoDB table demo-ecommerce-freetier liên quan đến lab Nhấp vào Actions Chọn Delete table Nhập tên table để xác nhận Xác nhận bằng cách nhấp Delete  2. Xóa CloudWatch Resources được tạo trong Lab  Truy cập CloudWatch Management Console Trên thanh điều hướng bên trái, đi đến Dashboards Chọn tất cả dashboards liên quan đến lab Nhấp vào Actions Chọn Delete dashboards Xác nhận xóa bằng cách nhấp Delete Trên thanh điều hướng bên trái, đi đến Alarms Chọn tất cả alarms liên quan đến lab Nhấp vào Actions Chọn Delete Xác nhận xóa bằng cách nhấp Delete  3. Xóa Lambda Functions (nếu đã tạo)  Truy cập Lambda Management Console Trên thanh điều hướng bên trái, điều hướng đến Functions Chọn các Lambda functions liên quan đến lab Nhấp vào Actions Chọn Delete function Xác nhận bằng cách nhấp Delete  4. Xóa SNS Topics (nếu đã tạo)  Truy cập SNS Management Console Trên thanh điều hướng bên trái, chọn Topics Chọn tất cả SNS topics liên quan đến lab Nhấp vào Actions Chọn Delete Nhập \u0026ldquo;delete me\u0026rdquo; để xác nhận Xác nhận xóa bằng cách nhấp Delete  5. Xác minh Billing và Chi phí  Truy cập Billing and Cost Management Console Kiểm tra các khoản phí tháng hiện tại Xác minh rằng tất cả các khoản phí hiển thị $0.00 Xác nhận không có dịch vụ nào đang chạy không mong muốn  Xác minh Cuối cùng ✅ Checklist Dọn dẹp:\n DynamoDB table đã xóa CloudWatch dashboards và alarms đã loại bỏ Lambda functions đã xóa (nếu có) SNS topics đã xóa (nếu có) Billing hiển thị $0.00 charges   Chúc mừng! Bạn đã hoàn thành thành công workshop DynamoDB Advanced Patterns và dọn dẹp tất cả tài nguyên.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.1-aws-freetier-overview/",
	"title": "1.1 Tổng quan AWS Free Tier",
	"tags": [],
	"description": "",
	"content": "Tổng quan AWS Free Tier 🆓 Hiểu giới hạn AWS Free Tier và đảm bảo trải nghiệm workshop không mất phí\nAWS Free Tier là gì? AWS Free Tier cung cấp cho khách hàng mới quyền truy cập vào các dịch vụ AWS miễn phí trong thời gian giới hạn. Nó bao gồm ba loại gói:\n1. Miễn phí 12 Tháng Có sẵn trong 12 tháng sau ngày đăng ký AWS của bạn:\n Amazon DynamoDB: 25 GB storage, 25 WCU, 25 RCU AWS Lambda: 1 triệu requests mỗi tháng Amazon CloudWatch: 10 metrics, 10 alarms, 1 triệu API requests  2. Luôn Miễn phí Có sẵn cho tất cả khách hàng AWS vô thời hạn:\n DynamoDB: 25 GB storage (luôn miễn phí) Lambda: 1 triệu requests, 400,000 GB-seconds compute time CloudWatch: 10 custom metrics và 10 alarms  3. Trials Truy cập miễn phí ngắn hạn vào một số dịch vụ nhất định\nGiới hạn Free Tier cho Workshop này Phân tích Sử dụng Dịch vụ: ┌─────────────────┬──────────────┬──────────────┬─────────────┐ │ Dịch vụ │ Free Tier │ Sử dụng │ An toàn % │ ├─────────────────┼──────────────┼──────────────┼─────────────┤ │ DynamoDB RCU │ 25 units │ 15 units │ 60% │ │ DynamoDB WCU │ 25 units │ 15 units │ 60% │ │ DynamoDB Storage│ 25 GB │ \u0026lt;1 GB │ 4% │ │ Lambda Requests │ 1M/tháng │ ~100/ngày │ 0.3% │ │ Lambda Duration │ 400K GB-sec │ \u0026lt;1K GB-sec │ 0.25% │ │ CloudWatch │ 10 metrics │ 6 metrics │ 60% │ │ Data Transfer │ 1 GB │ \u0026lt;100 MB │ 10% │ └─────────────────┴──────────────┴──────────────┴─────────────┘ Tổng Sử dụng Free Tier: ~50% = 100% AN TOÀN! 🛡️ \rBảo vệ Chi phí: Chúng ta chỉ sử dụng 50% giới hạn Free Tier có sẵn, đảm bảo không có phí phát sinh trong suốt workshop.\n\rCân nhắc về Vùng Vùng Chính: US East (N. Virginia)  Tại sao được chọn: Giới hạn Free Tier cao nhất DynamoDB: Đầy đủ 25 RCU/WCU có sẵn Lambda: Đầy đủ 1M requests có sẵn Tốt nhất cho: Workloads chính và testing  Vùng Phụ: EU West (Ireland)  Mục đích: Sao chép Global Tables Free Tier: Giới hạn giống vùng chính Sử dụng: Tối thiểu (chỉ replica table) Tác động chi phí: Gần như bằng không  Giám sát Sử dụng Free Tier AWS Billing Dashboard  Điều hướng đến: AWS Console → Billing \u0026amp; Cost Management Free Tier usage: Theo dõi tiêu thụ hiện tại Alerts: Thiết lập khi tiến gần 80% giới hạn Forecasting: Dự đoán sử dụng hàng tháng  CloudWatch Billing Alarms Cảnh báo tự động khi:\n DynamoDB consumed units \u0026gt; 20 (80% giới hạn) Lambda invocations \u0026gt; 800K/tháng (80% giới hạn) Tổng ước tính phí \u0026gt; $1.00  Thực hành Tốt nhất Free Tier 1. Giám sát Thường xuyên  Kiểm tra Free Tier dashboard hàng ngày trong workshop Thiết lập cảnh báo billing trước khi triển khai Giám sát sử dụng tài nguyên trong CloudWatch  2. Sử dụng Capacity Thích hợp DynamoDB Provisioned Capacity: - Read Capacity Units (RCU): 5 (dưới giới hạn 25) - Write Capacity Units (WCU): 5 (dưới giới hạn 25) - On-Demand: KHÔNG khuyến nghị (có thể vượt Free Tier) 3. Dọn dẹp Tài nguyên  Xóa test data thường xuyên Loại bỏ Lambda functions không sử dụng Dọn dẹp CloudWatch logs cũ hơn 7 ngày  Những Bẫy Free Tier Thường gặp cần Tránh Tránh Những Lỗi Này:\n On-Demand DynamoDB: Có thể nhanh chóng vượt Free Tier Nhiều Vùng: Triển khai cùng tài nguyên trong \u0026gt;2 vùng Tập Dữ liệu Lớn: Upload \u0026gt;25GB vào DynamoDB Quên Dọn dẹp: Để tài nguyên chạy quá workshop  \rLỗi #1: Provisioned vs On-Demand ❌ SAI: DynamoDB On-Demand - Trả tiền theo request (có thể đắt) - Chi phí không dự đoán được - Không có bảo vệ Free Tier ✅ ĐÚNG: DynamoDB Provisioned - Capacity units cố định - Chi phí dự đoán được - Được bảo vệ bởi giới hạn Free Tier Lỗi #2: Nhân Tài nguyên ❌ SAI: Triển khai đến 5 vùng - 5x tiêu thụ tài nguyên - 5x sử dụng Free Tier - Có khả năng vượt giới hạn ✅ ĐÚNG: Triển khai tối đa 2 vùng - Sử dụng tài nguyên tối thiểu - Trong giới hạn Free Tier - Duy trì tính khả dụng toàn cầu Quy trình Khẩn cấp Nếu Bạn Thấy Phí Xuất hiện  DỪNG NGAY LẬP TỨC: Tạm dừng tất cả hoạt động workshop Kiểm tra Billing Dashboard: Xác định nguồn phí Xem lại Tài nguyên: Liệt kê tất cả tài nguyên đang hoạt động Liên hệ Support: Sử dụng hỗ trợ AWS Free Tier nếu cần Xóa Tài nguyên: Loại bỏ bất cứ thứ gì ngoài phạm vi workshop  Lệnh Audit Tài nguyên Nhanh # Liệt kê tất cả DynamoDB tables aws dynamodb list-tables --region us-east-1 # Liệt kê tất cả Lambda functions  aws lambda list-functions --region us-east-1 # Kiểm tra CloudFormation stacks aws cloudformation list-stacks --region us-east-1 Checklist Trước Workshop Trước khi bắt đầu triển khai hạ tầng:\n Tài khoản AWS được tạo và xác minh Tính đủ điều kiện Free Tier được xác nhận (tài khoản \u0026lt;12 tháng tuổi) Cảnh báo billing được cấu hình Free Tier dashboard được bookmark Thông tin liên hệ khẩn cấp sẵn sàng Hiểu biết về giới hạn tài nguyên được xác nhận  Sẵn sàng Tiếp tục: Sau khi bạn đã xem xét giới hạn Free Tier và hiểu các biện pháp an toàn, hãy tiến hành Tổng quan Kiến trúc để hiểu những gì chúng ta sẽ xây dựng.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.2-architecture-overview/",
	"title": "1.2 Tổng quan Kiến trúc",
	"tags": [],
	"description": "",
	"content": "Tổng quan Kiến trúc 🏗️ Hiểu về hạ tầng hoàn chỉnh chúng ta sẽ triển khai cho workshop DynamoDB\nKiến trúc Cấp cao Hạ tầng workshop của chúng ta trải rộng hai vùng AWS để minh họa chức năng Global Tables trong khi duy trì tuân thủ Free Tier.\nCác Thành phần Cốt lõi 1. DynamoDB Global Table Bảng Chính (US-East-1):\n Tên Bảng: demo-ecommerce-freetier Partition Key: PK (String) Sort Key: SK (String) Capacity: 5 RCU / 5 WCU (Provisioned) Streams: Enabled (NEW_AND_OLD_IMAGES) Point-in-time Recovery: Enabled  Bảng Replica (EU-West-1):\n Synchronized: Sao chép tự động Read Capacity: 5 RCU Eventual Consistency: Chéo vùng Local Reads: Độ trễ thấp cho người dùng EU  2. Lambda Stream Processor Cấu hình Function:\nRuntime: Python 3.9 Memory: 128 MB (Tối ưu Free Tier) Timeout: 30 seconds Environment: Demo Trigger: DynamoDB Streams Logic Xử lý:\n Stream Records: Xử lý các sự kiện INSERT, MODIFY, REMOVE Data Validation: Đảm bảo tính toàn vẹn dữ liệu Audit Logging: Theo dõi tất cả thay đổi Error Handling: Dead letter queue cho records thất bại  3. CloudWatch Monitoring Thành phần Dashboard:\n DynamoDB Metrics: Sử dụng Read/Write capacity Lambda Metrics: Số lần gọi, thời lượng, lỗi Cost Tracking: Sử dụng Free Tier thời gian thực Performance: Metrics độ trễ và throughput  Billing Alarms:\n Cảnh báo ở $1.00: Hệ thống cảnh báo sớm Cảnh báo ở 80% Free Tier: Giám sát sử dụng Email Notifications: Nhận thức ngay lập tức  Kiến trúc Data Model Mẫu Single Table Design Nền tảng thương mại điện tử của chúng ta sử dụng một bảng DynamoDB duy nhất với nhiều loại entity:\nLoại Entity và Access Patterns: ┌─────────────────┬─────────────────┬─────────────────┬─────────────────┐ │ Loại Entity │ Partition Key │ Sort Key │ Mục đích │ ├─────────────────┼─────────────────┼─────────────────┼─────────────────┤ │ User Profile │ USER#id │ PROFILE │ User metadata │ │ User Addresses │ USER#id │ ADDRESS#id │ Thông tin ship │ │ Product │ PRODUCT#id │ DETAILS │ Danh mục sản phẩm│ │ Product Reviews │ PRODUCT#id │ REVIEW#user_id │ Đánh giá khách │ │ Order Header │ ORDER#id │ DETAILS │ Order metadata │ │ Order Items │ ORDER#id │ ITEM#product_id │ Nội dung order │ │ Category │ CATEGORY#id │ DETAILS │ Nhóm sản phẩm │ └─────────────────┴─────────────────┴─────────────────┴─────────────────┘ Access Patterns  Get User Profile: PK=USER#123, SK=PROFILE Get User\u0026rsquo;s Orders: PK=USER#123, SK begins_with ORDER# Get Product Details: PK=PRODUCT#456, SK=DETAILS Get Order with Items: PK=ORDER#789, SK begins_with ITEM# Get Product Reviews: PK=PRODUCT#456, SK begins_with REVIEW#  Kiến trúc Bảo mật IAM Roles và Policies Lambda Execution Role:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:DescribeStream\u0026#34;, \u0026#34;dynamodb:GetRecords\u0026#34;, \u0026#34;dynamodb:GetShardIterator\u0026#34;, \u0026#34;dynamodb:ListStreams\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:*:*:table/demo-ecommerce-freetier/stream/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; } ] } Nguyên tắc Least Privilege:\n Lambda: Chỉ quyền đọc stream CloudWatch: Chỉ quyền ghi metrics và logs DynamoDB: Truy cập chỉ định bảng  Kiến trúc Network Chiến lược Triển khai Vùng Vùng Chính (US-East-1):\n Availability: 99.99% SLA Latency: \u0026lt;10ms cho người dùng US Capacity: Hoạt động đọc/ghi đầy đủ Backup: Point-in-time recovery  Vùng Phụ (EU-West-1):\n Availability: 99.99% SLA (độc lập) Latency: \u0026lt;10ms cho người dùng EU Capacity: Tối ưu đọc Sync: Sao chép eventually consistent  Data Flow  Write Operations: Luôn đến vùng chính Read Operations: Có thể từ bất kỳ vùng nào Replication: Đồng bộ cross-region tự động Conflict Resolution: Last-writer-wins Failover: Promotion thủ công nếu cần  Kiến trúc Chi phí Tối ưu Free Tier Chi phí DynamoDB:\nBảng Chính (US-East-1): - Provisioned RCU: 5 units (Free: 25) = $0.00 - Provisioned WCU: 5 units (Free: 25) = $0.00 - Storage: \u0026lt;1 GB (Free: 25 GB) = $0.00 Bảng Replica (EU-West-1): - Provisioned RCU: 5 units (Free: 25) = $0.00 - Cross-region replication: \u0026lt;1 GB/month = $0.00 Chi phí Lambda:\nStream Processor: - Invocations: ~100/ngày (Free: 1M/tháng) = $0.00 - Duration: 128MB × 1s × 100 = \u0026lt;1 GB-second = $0.00 Tổng Chi phí Workshop: $0.00 ✅\nCân nhắc Scalability Horizontal Scaling DynamoDB:\n Auto Scaling: Có thể bật nếu cần On-Demand: Chuyển từ provisioned Global Secondary Indexes: Thêm cho access patterns mới  Lambda:\n Concurrent Executions: Lên đến 1000 mặc định Dead Letter Queue: Xử lý failures Reserved Concurrency: Kiểm soát scaling  Tối ưu Performance Read Performance:\n Consistent Reads: Khi cần tính nhất quán dữ liệu Eventually Consistent: Cho performance tốt hơn DAX: DynamoDB Accelerator cho caching  Write Performance:\n Batch Operations: Giảm API calls Parallel Writes: Nhiều partition keys Write Sharding: Phân phối hot partitions  Monitoring và Observability Key Metrics để Monitor DynamoDB:\n Consumed Read Capacity: Target \u0026lt;80% of provisioned Consumed Write Capacity: Target \u0026lt;80% of provisioned Throttled Requests: Nên là 0 Error Rate: Target \u0026lt;1%  Lambda:\n Invocation Count: Theo dõi volume xử lý Duration: Monitor xu hướng performance Error Rate: Target \u0026lt;1% Dead Letter Queue: Monitor failed records  Chiến lược Alerting Critical Alerts:\n DynamoDB throttling events Lambda function errors Billing threshold exceeded Free Tier limit approaching  Warning Alerts:\n High capacity utilization (\u0026gt;70%) Increased error rates Performance degradation  Kiến trúc Sẵn sàng: Kiến trúc này cung cấp nền tảng production-ready để học các mẫu DynamoDB nâng cao trong khi vẫn ở trong giới hạn AWS Free Tier.\n\rCác Bước Tiếp theo Với việc hiểu kiến trúc hoàn tất, chúng ta sẽ tiến hành triển khai hạ tầng này bằng CloudFormation templates trong phần tiếp theo.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.3-cloudformation-deployment/",
	"title": "1.3 Triển khai CloudFormation",
	"tags": [],
	"description": "",
	"content": "Triển khai CloudFormation 🚀 Hướng dẫn từng bước triển khai hạ tầng AWS sử dụng Infrastructure as Code\nTổng quan Trong phần này, bạn sẽ triển khai hạ tầng workshop DynamoDB hoàn chỉnh sử dụng AWS CloudFormation. Phương pháp này đảm bảo triển khai nhất quán, có thể tái tạo và tuân theo AWS best practices.\nPrerequisites Trước khi bắt đầu triển khai, đảm bảo:\n Quyền truy cập AWS Console với administrative permissions Region đã xác minh: US East (N. Virginia) us-east-1 Trạng thái billing hiện tại: $0.00 CloudFormation template đã tải về  Tổng quan CloudFormation Template Template của chúng ta tạo các tài nguyên sau:\nHạ tầng Cốt lõi  DynamoDB Table: Single table với Global Tables enabled Lambda Function: Stream processor cho real-time events IAM Roles: Chính sách truy cập least privilege DynamoDB Streams: Cấu hình change data capture  Monitoring \u0026amp; Alerting  CloudWatch Dashboard: Hiển thị metrics thời gian thực CloudWatch Alarms: Cảnh báo dựa trên threshold Billing Alerts: Cơ chế bảo vệ chi phí  Cấu hình Bảo mật  IAM Policies: Quyền fine-grained Resource Encryption: Bảo vệ dữ liệu at rest VPC Integration: Cách ly network (tùy chọn)  Triển khai Từng bước Bước 1: Truy cập CloudFormation Service   Điều hướng đến CloudFormation\n Mở AWS Management Console Tìm kiếm \u0026ldquo;CloudFormation\u0026rdquo; hoặc tìm trong services menu Đảm bảo bạn ở region US East (N. Virginia)    Tạo New Stack\n Nhấp nút \u0026ldquo;Create stack\u0026rdquo; Chọn \u0026ldquo;With new resources (standard)\u0026rdquo;    Bước 2: Upload Template   Chọn Template Source\n Chọn \u0026ldquo;Upload a template file\u0026rdquo; Nhấp nút \u0026ldquo;Choose file\u0026rdquo; Chọn file infrastructure.yaml    Validate Template\n CloudFormation sẽ tự động validate syntax Xem lại template details nếu cần Nhấp \u0026ldquo;Next\u0026rdquo; để tiếp tục    Bước 3: Cấu hình Stack Parameters Stack Details:\nStack name: demo-dynamodb-freetier\rDescription: DynamoDB Advanced Patterns Workshop Infrastructure\rParameters:\nResource Configuration:\nReadCapacityUnits: 5\rWriteCapacityUnits: 5\rStreamViewType: NEW_AND_OLD_IMAGES\rBước 4: Cấu hình Stack Options Tags (Tùy chọn):\nWorkshop: DynamoDB-Advanced-Patterns\rEnvironment: Demo\rCostCenter: Learning\rPermissions:\n Sử dụng existing service role (nếu có) Hoặc cho phép CloudFormation tạo new role  Advanced Options:\n Giữ tất cả defaults Rollback on failure: Enabled Stack creation timeout: 10 phút  Bước 5: Review và Deploy   Review Configuration\n Xác minh tất cả parameters đúng Kiểm tra resource list khớp với expectations Xác nhận estimated costs ($0.00 cho Free Tier)    Acknowledge Capabilities\n ✅ Check: \u0026ldquo;I acknowledge that AWS CloudFormation might create IAM resources\u0026rdquo; ✅ Check: \u0026ldquo;I acknowledge that AWS CloudFormation might create IAM resources with custom names\u0026rdquo;    Create Stack\n Nhấp nút \u0026ldquo;Create stack\u0026rdquo; Deployment bắt đầu ngay lập tức    Giám sát Deployment Stack Events Tab Giám sát tiến trình deployment thời gian thực:\nTimeline Dự kiến  Tổng Thời lượng: 5-7 phút IAM Resources: 1-2 phút DynamoDB Table: 2-3 phút Lambda Function: 1-2 phút CloudWatch Components: 1-2 phút  Troubleshooting Các Vấn đề Thường gặp Vấn đề: Insufficient Permissions Triệu chứng: CREATE_FAILED cho IAM resources Giải pháp:\n Xác minh account có administrator access Kiểm tra IAM permissions cho CloudFormation Sử dụng root account nếu cần (chỉ cho workshop)  Vấn đề: Resource Limits Exceeded Triệu chứng: CREATE_FAILED cho DynamoDB hoặc Lambda Giải pháp:\n Kiểm tra Free Tier usage trong billing console Xác minh không có existing resources tiêu thụ limits Liên hệ AWS support nếu cần  Vấn đề: Region Mismatch Triệu chứng: Template validation errors Giải pháp:\n Xác minh region là us-east-1 Kiểm tra tất cả parameters phù hợp với region Khởi động lại deployment ở region đúng  Các Bước Xác minh Sau khi deployment thành công:\n Stack Status: CREATE_COMPLETE ✅ Điều hướng đến Outputs tab Ghi lại các giá trị quan trọng:  Table Name Lambda Function ARN Dashboard URL Stream ARN    Deployment Hoàn tất! Hạ tầng DynamoDB Advanced Patterns của bạn hiện đang chạy. Trong phần tiếp theo, chúng ta sẽ xác minh tất cả components hoạt động đúng.\n\rCác Bước Tiếp theo  Xác minh DynamoDB table đang active Test Lambda function deployment Kiểm tra CloudWatch dashboard Xác nhận zero billing charges Bắt đầu data modeling exercises  "
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.4-infrastructure-verification/",
	"title": "1.4 Xác minh Hạ tầng",
	"tags": [],
	"description": "",
	"content": "Xác minh Hạ tầng ✅ Kiểm tra toàn diện để đảm bảo tất cả tài nguyên AWS được triển khai và hoạt động đúng cách\nTổng quan Sau khi triển khai CloudFormation, việc xác minh tất cả tài nguyên hoạt động đúng là rất quan trọng. Phần này cung cấp quy trình xác minh từng bước để đảm bảo hạ tầng của bạn sẵn sàng cho workshop.\nChecklist Xác minh Sử dụng checklist này để xác minh từng thành phần một cách có hệ thống:\n Trạng thái CloudFormation stack: CREATE_COMPLETE DynamoDB table: Active và có thể truy cập DynamoDB Global Tables: Replication được cấu hình Lambda function: Đã triển khai và kết nối với stream CloudWatch dashboard: Metrics hiển thị IAM roles: Permissions được cấu hình đúng Trạng thái billing: $0.00 phí Sử dụng Free Tier: Trong giới hạn  Bước 1: Xác minh CloudFormation Stack 1.1 Kiểm tra Stack Status Điều hướng đến CloudFormation:\n AWS Console → CloudFormation → Stacks Tìm stack: demo-dynamodb-freetier Status nên là: CREATE_COMPLETE ✅  Nếu status hiển thị khác:\n CREATE_IN_PROGRESS: Đợi hoàn thành CREATE_FAILED: Kiểm tra Events tab để tìm lỗi ROLLBACK_COMPLETE: Xóa và triển khai lại  1.2 Xem lại Stack Outputs Nhấp vào stack của bạn → Outputs tab:\nGhi lại các giá trị này - bạn sẽ sử dụng chúng để xác minh thêm.\nBước 2: Xác minh DynamoDB Table 2.1 Truy cập DynamoDB Console Điều hướng đến DynamoDB:\n AWS Console → Services → DynamoDB Nhấp Tables trong sidebar trái Tìm table: demo-ecommerce-freetier  2.2 Kiểm tra Table Status Table Overview:\nChi tiết Table: ┌─────────────────────┬─────────────────────────────────────────┐ │ Property │ Expected Value │ ├─────────────────────┼─────────────────────────────────────────┤ │ Table Status │ Active ✅ │ │ Partition Key │ PK (String) │ │ Sort Key │ SK (String) │ │ Read Capacity │ 5 (Provisioned) │ │ Write Capacity │ 5 (Provisioned) │ │ Point-in-time Rec. │ Enabled │ │ Streams │ Enabled (NEW_AND_OLD_IMAGES) │ └─────────────────────┴─────────────────────────────────────────┘ 2.3 Xác minh Cấu hình Table Nhấp vào tên table để xem chi tiết:\nGeneral Tab:\n Table name: demo-ecommerce-freetier Primary key: PK (String), SK (String) Table status: Active Creation date: Ngày hôm nay  Capacity Tab:\n Read capacity: 5 units (Provisioned) Write capacity: 5 units (Provisioned) Auto scaling: Disabled (để an toàn Free Tier)  2.4 Kiểm tra DynamoDB Streams Exports and streams Tab:\n DynamoDB stream: Enabled ✅ Stream view type: New and old images Stream ARN: Nên khớp với CloudFormation output  Bước 3: Xác minh Global Tables Setup 3.1 Kiểm tra Cấu hình Global Tables Global Tables Tab:\n Primary region: us-east-1 (US East N. Virginia) Replica regions: eu-west-1 (Europe Ireland) Replication status: Active  3.2 Xác minh Secondary Region Chuyển đến EU-West-1:\n Đổi region trong AWS Console thành \u0026ldquo;Europe (Ireland)\u0026rdquo; Điều hướng đến DynamoDB → Tables Tìm replica table: demo-ecommerce-freetier Status nên là: Active  Replica Table Properties:\n Table status: Active Read capacity: 5 units Global table: Yes (replica) Primary region: us-east-1  Bước 4: Xác minh Lambda Function 4.1 Truy cập Lambda Console Điều hướng đến Lambda:\n Chuyển lại về US-East-1 region AWS Console → Services → Lambda Nhấp Functions trong sidebar trái Tìm function: demo-dynamodb-stream-processor  4.2 Kiểm tra Cấu hình Function Function Overview:\nChi tiết Lambda Function: ┌─────────────────────┬─────────────────────────────────────────┐ │ Property │ Expected Value │ ├─────────────────────┼─────────────────────────────────────────┤ │ Function Name │ demo-dynamodb-stream-processor │ │ Runtime │ Python 3.9 │ │ Memory │ 128 MB │ │ Timeout │ 30 seconds │ │ Handler │ lambda_function.lambda_handler │ │ Last Modified │ Ngày hôm nay │ └─────────────────────┴─────────────────────────────────────────┘ 4.3 Xác minh Stream Trigger Configuration Tab:\n Triggers: DynamoDB stream nên được liệt kê Source: demo-ecommerce-freetier table State: Enabled Batch size: 100 (default)  4.4 Test Function Permissions Permissions Tab:\n Execution role: Nên có quyền đọc DynamoDB stream Resource-based policy: Nên được cấu hình tự động  Bước 5: Xác minh CloudWatch Dashboard 5.1 Truy cập CloudWatch Console Điều hướng đến CloudWatch:\n AWS Console → Services → CloudWatch Nhấp Dashboards trong sidebar trái Tìm dashboard: demo-dynamodb-freetier-monitoring  5.2 Kiểm tra Dashboard Widgets Widgets Dự kiến:\nLayout Dashboard: ┌─────────────────────┬─────────────────────────────────────────┐ │ Widget │ Description │ ├─────────────────────┼─────────────────────────────────────────┤ │ DynamoDB RCU │ Read Capacity Utilization │ │ DynamoDB WCU │ Write Capacity Utilization │ │ DynamoDB Throttles │ Throttled Read/Write Requests │ │ Lambda Invocations │ Function invocation count │ │ Lambda Errors │ Function error rate │ │ Lambda Duration │ Function execution duration │ └─────────────────────┴─────────────────────────────────────────┘ 5.3 Xác minh Metrics Data Trạng thái Ban đầu (chưa có hoạt động):\n DynamoDB metrics: Nên hiển thị 0 consumed capacity Lambda metrics: Nên hiển thị 0 invocations Tất cả metrics: Nên hiển thị nhưng chưa có data points  Bước 6: Test Data Operations 6.1 Tạo Test Item Thêm sample data để xác minh chức năng table:\n Đi đến DynamoDB Console → Tables → demo-ecommerce-freetier Nhấp \u0026ldquo;Explore table items\u0026rdquo; Nhấp \u0026ldquo;Create item\u0026rdquo;  Test Item:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#test123\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Test User\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34; } 6.2 Xác minh Item Creation Xác nhận item xuất hiện:\n Item nên hiển thị trong table Item count nên tăng lên 1 Không nên có lỗi xuất hiện  6.3 Kiểm tra Lambda Trigger Xác minh stream processing:\n Đi đến Lambda Console Nhấp vào stream processor function Kiểm tra \u0026ldquo;Monitor\u0026rdquo; tab Nên thấy 1 invocation (từ việc tạo item)  Bước 7: Xác minh Chi phí và Free Tier 7.1 Kiểm tra Current Billing Điều hướng đến Billing:\n AWS Console → Services → Billing \u0026amp; Cost Management Current charges: Nên hiển thị $0.00 ✅ Month-to-date: Nên hiển thị $0.00 ✅  7.2 Xác minh Free Tier Usage Free Tier Dashboard:\n DynamoDB: Nên hiển thị sử dụng tối thiểu Lambda: Nên hiển thị \u0026lt;10 invocations CloudWatch: Nên hiển thị active metrics  Usage Breakdown:\nSử dụng Free Tier Hiện tại: ┌─────────────────┬──────────────┬──────────────┬─────────────┐ │ Service │ Used │ Available │ % Used │ ├─────────────────┼──────────────┼──────────────┼─────────────┤ │ DynamoDB RCU │ \u0026lt;1 unit │ 25 units │ \u0026lt;4% │ │ DynamoDB WCU │ \u0026lt;1 unit │ 25 units │ \u0026lt;4% │ │ DynamoDB Storage│ \u0026lt;0.01 GB │ 25 GB │ \u0026lt;0.1% │ │ Lambda Requests │ 1 request │ 1M requests │ \u0026lt;0.001% │ │ Lambda Duration │ \u0026lt;1 GB-sec │ 400K GB-sec │ \u0026lt;0.001% │ └─────────────────┴──────────────┴──────────────┴─────────────┘ Tổng Sử dụng: \u0026lt;1% giới hạn Free Tier ✅ Bước 8: Tóm tắt Xác minh Cuối cùng 8.1 Hoàn thành Verification Checklist Trạng thái Hạ tầng:\n CloudFormation: CREATE_COMPLETE DynamoDB: Active table với streams Global Tables: Replication hoạt động Lambda: Function đã triển khai và triggered CloudWatch: Dashboard có thể truy cập IAM: Permissions được cấu hình đúng Billing: $0.00 phí Test data: Được tạo và xử lý thành công  8.2 Sẵn sàng cho Module Tiếp theo Infrastructure Health Check:\n🟢 Tất cả Hệ thống Hoạt động ┌─────────────────────┬─────────────────────┬─────────────────────┐ │ Component │ Status │ Health │ ├─────────────────────┼─────────────────────┼─────────────────────┤ │ DynamoDB Table │ Active │ 🟢 Healthy │ │ Global Tables │ Replicating │ 🟢 Healthy │ │ Lambda Function │ Active │ 🟢 Healthy │ │ CloudWatch │ Monitoring │ 🟢 Healthy │ │ Cost Management │ $0.00 │ 🟢 On Track │ └─────────────────────┴─────────────────────┴─────────────────────┘ \rXác minh Hạ tầng Hoàn tất: Tất cả tài nguyên đã được triển khai đúng cách và hoạt động. Bạn sẵn sàng tiến hành Module 2: Single Table Design.\n\rCác Bước Tiếp theo Với hạ tầng đã được xác minh thành công, bây giờ bạn có:\n DynamoDB table production-ready với Global Tables Lambda stream processor hoạt động đầy đủ Thiết lập monitoring và alerting hoàn chỉnh Triển khai Free Tier không mất phí  Sẵn sàng cho: Module 2: Single Table Design\nGiữ Môi trường Này: Đừng xóa các tài nguyên này - chúng ta sẽ sử dụng chúng trong suốt workshop cho các bài tập thực hành.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.1-design-principles/",
	"title": "2.1 Nguyên tắc Thiết kế",
	"tags": [],
	"description": "",
	"content": "Nguyên tắc Single Table Design 🎯 Hiểu các khái niệm cốt lõi làm cho Single Table Design mạnh mẽ\nSự Chuyển đổi Mô hình Từ Tư duy Quan hệ sang NoSQL Cơ sở dữ liệu quan hệ truyền thống tổ chức dữ liệu theo entities (các bảng riêng biệt cho Users, Products, Orders). DynamoDB tổ chức dữ liệu theo access patterns (cách bạn sẽ truy vấn dữ liệu).\nPhương pháp Quan hệ:\n   Bảng Trường     Users user_id, name, email   Products product_id, name, category   Orders order_id, user_id, status    Phương pháp Single Table:\n   PK SK Entity Additional Data     USER#user1 PROFILE User name, email, phone   USER#user1 ORDER#ord1 Order status, total, date   PRODUCT#p1 DETAILS Product name, price, stock   ORDER#ord1 ITEM#p1 OrderItem quantity, price    Nguyên tắc Cốt lõi 1. Chiến lược Composite Primary Key Partition Key (PK) + Sort Key (SK) tạo identification duy nhất cho item và cho phép relationships:\n PK: Nhóm các items liên quan với nhau (như một namespace) SK: Sắp xếp items trong một partition và tạo hierarchies Cùng nhau: Cho phép relationships 1-to-1, 1-to-many, và many-to-many  2. Entity Namespacing Sử dụng prefixes để tạo separation logic:\n   Loại Entity PK Pattern SK Pattern Mục đích     User Profile USER#user123 PROFILE Lưu trữ thông tin user   User Orders USER#user123 ORDER#order456 Liên kết orders với users   Product Details PRODUCT#prod789 DETAILS Lưu trữ thông tin product   Order Items ORDER#order456 ITEM#prod789 Liên kết products với orders    3. Thiết kế Access Pattern First Bắt đầu với các câu hỏi, sau đó thiết kế cấu trúc key:\n \u0026ldquo;Làm sao tôi lấy user profile?\u0026rdquo; → PK=USER#id, SK=PROFILE \u0026ldquo;Làm sao tôi lấy orders của user?\u0026rdquo; → PK=USER#id, SK begins_with ORDER# \u0026ldquo;Làm sao tôi lấy chi tiết order?\u0026rdquo; → PK=ORDER#id, SK begins_with ITEM# \u0026ldquo;Làm sao tôi lấy products theo category?\u0026rdquo; → Sử dụng GSI với CATEGORY# keys  Chiến lược Global Secondary Index (GSI) Khi nào Sử dụng GSIs Sử dụng GSIs khi bạn cần truy vấn dữ liệu theo attributes khác với primary key:\n Nhóm khác: Products theo category thay vì theo product ID Sắp xếp khác: Orders theo status thay vì theo user Cross-entity queries: Tất cả pending orders qua tất cả users  Thiết kế GSI Key GSI1 - Category-based queries:\n   GSI1PK GSI1SK     CATEGORY#electronics PRODUCT#prod1   CATEGORY#electronics PRODUCT#prod2   CATEGORY#books PRODUCT#prod3    GSI2 - Status/Price-based queries:\n   GSI2PK GSI2SK     STATUS#pending ORDER#order1   STATUS#shipped ORDER#order2   PRICE#100-500 PRODUCT#prod1    Lợi ích trong Thực tế Lợi ích Performance  Single Query: Lấy user profile + tất cả orders trong một query Độ trễ Dự đoán được: Thời gian phản hồi single-digit millisecond Không JOINs: Tất cả dữ liệu liên quan được retrieved cùng nhau Scaling Hiệu quả: Performance nhất quán ở bất kỳ scale nào  Lợi ích Chi phí  Ít Bảng hơn: Chi phí DynamoDB table thấp hơn Ít Operations hơn: Batch queries thay vì multiple calls Capacity Tối ưu: Utilization tốt hơn của provisioned capacity Giảm Data Transfer: Ít network overhead hơn  Lợi ích Operational  Atomic Transactions: Cập nhật các items liên quan cùng nhau Backup Đơn giản: Một bảng để backup/restore Monitoring Dễ hơn: Single table metrics để track Bảo mật Nhất quán: Một set IAM policies  Mẫu Thiết kế Chính 1. Adjacency List Pattern Lưu trữ các items liên quan cạnh nhau:\nPK=USER#user1, SK=PROFILE (Chi tiết User) PK=USER#user1, SK=ORDER#order1 (Order 1) PK=USER#user1, SK=ORDER#order2 (Order 2) 2. Hierarchical Data Pattern Sử dụng sort key để biểu diễn hierarchy:\nPK=ORDER#order1, SK=DETAILS (Order header) PK=ORDER#order1, SK=ITEM#prod1 (Order item 1) PK=ORDER#order1, SK=ITEM#prod2 (Order item 2) 3. GSI Overloading Pattern Sử dụng cùng GSI cho nhiều query patterns:\nGSI1PK=CATEGORY#electronics, GSI1SK=PRODUCT#prod1 GSI1PK=USER#user1@email.com, GSI1SK=PROFILE \rQuy tắc Thiết kế: Luôn bắt đầu với access patterns của bạn, sau đó thiết kế cấu trúc key. Đừng bắt đầu với entities!\n\rAnti-Patterns Thường gặp cần Tránh ❌ Đừng Sử dụng Scan Operations  Sai: Scan toàn bộ table để tìm items Đúng: Sử dụng Query với cấu trúc key phù hợp  ❌ Đừng Tạo Quá nhiều GSIs  Sai: Một GSI cho mỗi query pattern Đúng: Overload GSIs cho nhiều patterns  ❌ Đừng Bỏ qua Hot Partitions  Sai: Tất cả items có cùng partition key Đúng: Phân phối items qua nhiều partitions  ❌ Đừng Sử dụng Relational Patterns  Sai: Normalize dữ liệu qua nhiều items Đúng: Denormalize dữ liệu liên quan cùng nhau  Nhớ rằng: Single Table Design yêu cầu mindset shift. Hãy suy nghĩ theo access patterns, không phải entity relationships!\n\rSẵn sàng cho Implementation Bây giờ bạn đã hiểu các nguyên tắc, hãy chuyển đến AWS Console để xem những khái niệm này trong thực tế. Trong phần tiếp theo, chúng ta sẽ điều hướng DynamoDB Console và bắt đầu tạo e-commerce data model của chúng ta.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.2-console-navigation/",
	"title": "2.2 Điều hướng Console",
	"tags": [],
	"description": "",
	"content": "Điều hướng DynamoDB Console 🖥️ Hướng dẫn nhanh để điều hướng DynamoDB Console cho Single Table Design\nTruy cập Table của bạn Bước 1: Điều hướng đến DynamoDB Service  Mở AWS Console: https://console.aws.amazon.com Xác minh Region: Đảm bảo bạn đang ở US East (N. Virginia) Truy cập DynamoDB: Services → Database → DynamoDB  Bước 2: Tìm Workshop Table của bạn  Click \u0026ldquo;Tables\u0026rdquo; trong sidebar bên trái Tìm table: demo-ecommerce-freetier Xác minh Status: Phải hiển thị \u0026ldquo;Active\u0026rdquo; Click tên table để vào chi tiết table  Table Overview Dashboard Hiểu về Table Layout Khi bạn click vào table của mình, bạn sẽ thấy một số tab:\n   Tab Mục đích Bạn sẽ sử dụng để     Overview Cấu hình table Kiểm tra status, keys, capacity   Items Quản lý dữ liệu Tạo, xem, chỉnh sửa items   Metrics Dữ liệu hiệu suất Giám sát usage và costs   Indexes Quản lý GSI Xem Global Secondary Indexes   Global tables Thiết lập multi-region Kiểm tra replication status    Thông tin chính cần lưu ý Cấu hình Table:\n Tên table: demo-ecommerce-freetier Partition key: PK (String) Sort key: SK (String) Table status: Active Item count: Hiện tại là 0 (table trống)  Items Tab - Workspace dữ liệu của bạn Truy cập Items View  Click tab \u0026ldquo;Items\u0026rdquo; Xem cấu trúc table: Hiện tại trống Lưu ý các cột: PK, SK, và các attributes bổ sung  Đây là nơi bạn sẽ:\n ✅ Tạo items mới (users, products, orders) ✅ Xem dữ liệu hiện có ✅ Chỉnh sửa attributes của item ✅ Xóa items nếu cần  Giao diện tạo Items Để tạo item mới:\n Click nút \u0026ldquo;Create item\u0026rdquo; Chọn phương thức input:  Form view: Giao diện point-and-click JSON view: Chỉnh sửa JSON trực tiếp (được khuyến nghị)   Chuyển sang JSON view để nhập dữ liệu dễ dàng hơn  JSON View để nhập dữ liệu Hiểu về định dạng JSON Khi tạo items, bạn sẽ sử dụng cấu trúc JSON này:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user123\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34; } Điểm chính:\n PK và SK: Luôn luôn bắt buộc (composite primary key của bạn) Attributes bổ sung: Thêm theo nhu cầu cho từng loại entity Kiểu dữ liệu: Hỗ trợ strings, numbers, booleans, lists, maps  Giao diện Query Truy cập chức năng Query Để query table của bạn:\n Đi đến tab Items Click nút \u0026ldquo;Query\u0026rdquo; (bên cạnh Create item) Chọn loại query:  Table query: Query table chính Index query: Query GSI    Tham số Query Đối với table queries, bạn sẽ chỉ định:\n Partition key (PK): Giá trị chính xác (ví dụ: USER#user123) Sort key (SK): Điều kiện tùy chọn:  Khớp chính xác: PROFILE Bắt đầu với: ORDER# Giữa: Range queries    Điều hướng Global Secondary Index (GSI) Xem cấu hình GSI  Click tab \u0026ldquo;Indexes\u0026rdquo; Xem GSI1: Được sử dụng cho category-based queries Xem GSI2: Được sử dụng cho status/price-based queries  Cấu trúc GSI:\n GSI1: GSI1PK (Partition) + GSI1SK (Sort) GSI2: GSI2PK (Partition) + GSI2SK (Sort)  Metrics và Monitoring Kiểm tra Usage và Performance  Click tab \u0026ldquo;Metrics\u0026rdquo; Giám sát các metrics chính:  Consumed read/write capacity Throttled requests (phải là 0) Item count (tăng khi bạn thêm dữ liệu)    Tại sao điều này quan trọng:\n ✅ Duy trì trong giới hạn Free Tier ✅ Giám sát hiệu suất ✅ Phát hiện sớm các vấn đề  Tham chiếu Quick Actions Các hành động Console thường dùng    Hành động Vị trí Mục đích     Create Item Items tab → Create item Thêm dữ liệu mới   Query Table Items tab → Query Tìm kiếm theo PK/SK   View Metrics Metrics tab Giám sát hiệu suất   Check Capacity Overview tab Xác minh provisioned capacity    Console Tips Tips hiệu quả  Sử dụng JSON view để tạo item nhanh hơn Copy/paste cấu trúc item để đảm bảo tính nhất quán Sử dụng Query, không phải Scan để có hiệu suất tốt hơn Kiểm tra metrics thường xuyên để giám sát usage  Phím tắt điều hướng  Danh sách Tables: DynamoDB home → Tables Truy cập table nhanh: Bookmark URL table của bạn Chuyển region: Sử dụng region selector ở góc trên-phải Tìm kiếm service: Sử dụng Ctrl+K để truy cập service nhanh  Pro Tip: Giữ DynamoDB console mở trong tab trình duyệt riêng biệt trong suốt workshop để truy cập nhanh giữa các bài tập.\n\rSẵn sàng cho việc tạo dữ liệu Bây giờ bạn đã quen thuộc với giao diện console, bạn đã sẵn sàng bắt đầu tạo mô hình dữ liệu e-commerce của mình. Trong phần tiếp theo, chúng ta sẽ tạo users, products, và orders sử dụng các patterns bạn đã học.\nTrước khi bắt đầu: Đảm bảo bạn đang ở table đúng (demo-ecommerce-freetier) và hiểu sự khác biệt giữa các thao tác Query và Scan.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.3-create-data-items/",
	"title": "2.3 Tạo Data Items",
	"tags": [],
	"description": "",
	"content": "Tạo Data Items 📝 Hướng dẫn từng bước để tạo dữ liệu e-commerce sử dụng Single Table Design patterns\nTổng quan Trong phần này, bạn sẽ tạo các entity cốt lõi cho nền tảng e-commerce của chúng ta: Users, Products, Orders, và Order Items. Mỗi loại entity tuân theo các key patterns cụ thể để cho phép querying hiệu quả.\nCác loại Entity chúng ta sẽ tạo    Entity PK Pattern SK Pattern Mục đích     User Profile USER#userID PROFILE Lưu trữ thông tin khách hàng   Product PRODUCT#productID DETAILS Lưu trữ catalog sản phẩm   Order USER#userID ORDER#orderID Liên kết orders với customers   Order Item ORDER#orderID ITEM#productID Liên kết products với orders    Bước 1: Tạo User Profile Truy cập Item Creation  Navigate to: DynamoDB → Tables → demo-ecommerce-freetier Click: \u0026ldquo;Items\u0026rdquo; tab Click: \u0026ldquo;Create item\u0026rdquo; button Switch to: JSON view  User Profile JSON Template Copy và paste template này, sau đó chỉnh sửa với thông tin của bạn:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#john.doe@email.com\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;user001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john.doe@email.com\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;+1-555-0123\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Seattle\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;WA\u0026#34;, \u0026#34;zip\u0026#34;: \u0026#34;98101\u0026#34; }, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Giải thích Key Patterns:\n PK: USER#user001 - Nhóm tất cả dữ liệu user lại với nhau SK: PROFILE - Xác định đây là record profile của user GSI1PK: USER#john.doe@email.com - Cho phép lookups dựa trên email GSI1SK: PROFILE - Duy trì tính nhất quán trong GSI  Lưu User của bạn  Review JSON để kiểm tra lỗi syntax Click \u0026ldquo;Create item\u0026rdquo; Verify creation: Item sẽ xuất hiện trong table view  Bước 2: Tạo Products Ví dụ Electronics Product Tạo product đầu tiên của bạn - tùy chỉnh các giá trị:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#electronics\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#500-1000\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;laptop001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Professional Laptop\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;High-performance laptop for professionals\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;electronics\u0026#34;, \u0026#34;price\u0026#34;: 799, \u0026#34;stock\u0026#34;: 25, \u0026#34;brand\u0026#34;: \u0026#34;TechCorp\u0026#34;, \u0026#34;specifications\u0026#34;: { \u0026#34;processor\u0026#34;: \u0026#34;Intel i7\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;16GB RAM\u0026#34;, \u0026#34;storage\u0026#34;: \u0026#34;512GB SSD\u0026#34; }, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Giải thích Key Patterns:\n GSI1PK: CATEGORY#electronics - Cho phép category-based queries GSI2PK: PRICE#500-1000 - Cho phép price range queries Nested attributes: Lưu trữ chi tiết sản phẩm phức tạp  Ví dụ Books Product Tạo product thứ hai trong category khác:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#books\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#10-50\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;book001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;DynamoDB Patterns Guide\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Complete guide to DynamoDB design patterns\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;books\u0026#34;, \u0026#34;price\u0026#34;: 29, \u0026#34;stock\u0026#34;: 100, \u0026#34;author\u0026#34;: \u0026#34;Database Expert\u0026#34;, \u0026#34;isbn\u0026#34;: \u0026#34;978-1234567890\u0026#34;, \u0026#34;pages\u0026#34;: 350, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Lưu ý các điểm khác biệt:\n Category khác: CATEGORY#books Price range khác: PRICE#10-50 Attributes đặc biệt cho sách: author, isbn, pages  Bước 3: Tạo Order Order Header Tạo một order liên kết với user của bạn:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;STATUS#pending\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;user001\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;total_amount\u0026#34;: 828, \u0026#34;tax_amount\u0026#34;: 66.24, \u0026#34;shipping_cost\u0026#34;: 0, \u0026#34;shipping_address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Seattle\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;WA\u0026#34;, \u0026#34;zip\u0026#34;: \u0026#34;98101\u0026#34; }, \u0026#34;payment_method\u0026#34;: \u0026#34;credit_card\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Giải thích Key Patterns:\n PK: USER#user001 - Liên kết order với user (cho phép \u0026ldquo;get user\u0026rsquo;s orders\u0026rdquo;) SK: ORDER#order001 - Xác định đây là order record GSI1PK: ORDER#order001 - Cho phép direct order lookup GSI2PK: STATUS#pending - Cho phép status-based queries  Bước 4: Tạo Order Items Order Item đầu tiên Thêm laptop vào order:\n{ \u0026#34;PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ITEM#laptop001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;laptop001\u0026#34;, \u0026#34;product_name\u0026#34;: \u0026#34;Professional Laptop\u0026#34;, \u0026#34;quantity\u0026#34;: 1, \u0026#34;unit_price\u0026#34;: 799, \u0026#34;total_price\u0026#34;: 799, \u0026#34;added_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Order Item thứ hai Thêm sách vào cùng order:\n{ \u0026#34;PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ITEM#book001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;book001\u0026#34;, \u0026#34;product_name\u0026#34;: \u0026#34;DynamoDB Patterns Guide\u0026#34;, \u0026#34;quantity\u0026#34;: 1, \u0026#34;unit_price\u0026#34;: 29, \u0026#34;total_price\u0026#34;: 29, \u0026#34;added_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Giải thích Key Patterns:\n PK: ORDER#order001 - Nhóm items với order của chúng SK: ITEM#productID - Xác định specific items GSI1: Tạo product-to-order relationship  Xác minh cấu trúc dữ liệu của bạn Kiểm tra nội dung Table Sau khi tạo tất cả items, table của bạn sẽ chứa:\n   PK SK Entity Type     USER#user001 PROFILE User Profile   USER#user001 ORDER#order001 Order (linked to user)   PRODUCT#laptop001 DETAILS Product (Electronics)   PRODUCT#book001 DETAILS Product (Books)   ORDER#order001 ITEM#laptop001 Order Item (Laptop)   ORDER#order001 ITEM#book001 Order Item (Book)    Validate Relationships Xác minh các relationships này hoạt động:\n User → Orders: PK=USER#user001 trả về profile + orders Order → Items: PK=ORDER#order001 trả về order details + items Category grouping: GSI1 với CATEGORY#electronics trả về products Status grouping: GSI2 với STATUS#pending trả về orders  Tips tạo dữ liệu JSON Best Practices  Sử dụng naming nhất quán: Tuân theo các patterns đã thiết lập Validate JSON syntax: Kiểm tra missing commas, brackets Include required attributes: PK, SK, và GSI keys Sử dụng meaningful IDs: Làm cho chúng readable và unique  Các lỗi thường gặp cần tránh  ❌ Missing GSI keys: Luôn populate GSI1PK/GSI1SK và GSI2PK/GSI2SK ❌ Inconsistent patterns: Tuân thủ định dạng ENTITY#ID ❌ Wrong data types: Sử dụng strings cho keys, appropriate types cho values ❌ JSON syntax errors: Missing quotes, commas, hoặc brackets  Quan trọng: Nếu bạn gặp JSON syntax errors, hãy kiểm tra quotation marks, commas, và brackets của bạn. Console sẽ highlight các syntax issues.\n\rTùy chỉnh dữ liệu của bạn Làm cho nó cá nhân hóa Tùy chỉnh các giá trị này để workshop trở thành của bạn:\n Tên user và emails: Sử dụng thông tin của riêng bạn Tên products: Tạo products bạn thấy thú vị Addresses: Sử dụng city/state của bạn Prices: Giá trị thực tế cho products của bạn  Thêm nhiều Items Xem xét tạo thêm:\n Nhiều users (tên bạn bè, gia đình) Nhiều products (các categories khác) Additional orders Multiple items per order  Sẵn sàng cho Querying Bây giờ bạn đã có một dataset e-commerce hoàn chỉnh với Single Table Design patterns phù hợp, bạn đã sẵn sàng khám phá các query patterns khác nhau. Trong phần tiếp theo, chúng ta sẽ học cách retrieve dữ liệu này một cách hiệu quả sử dụng các query techniques khác nhau.\nData Creation Complete: Bạn đã thành công implement Single Table Design với proper entity relationships, composite keys, và GSI patterns!\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.4-query-patterns/",
	"title": "2.4 Query Patterns",
	"tags": [],
	"description": "",
	"content": "Query Patterns 🔍 Học các kỹ thuật query hiệu quả cho Single Table Design sử dụng DynamoDB Console\nTổng quan Bây giờ bạn đã tạo dữ liệu e-commerce của mình, hãy khám phá các query patterns mạnh mẽ làm cho Single Table Design trở nên hiệu quả. Bạn sẽ học cách retrieve dữ liệu hiệu quả sử dụng cả table queries và Global Secondary Index (GSI) queries.\nQuery vs Scan - Sự khác biệt quan trọng Luôn sử dụng Query (Không phải Scan)  Query: Nhanh, hiệu quả, cost-effective (sử dụng primary keys) Scan: Chậm, đắt đỏ, đọc toàn bộ table (tránh trong production)  Quan trọng: Luôn sử dụng Query operations trong workshop này. Scan operations không hiệu quả và có thể nhanh chóng vượt quá giới hạn Free Tier.\n\rPattern 1: Get User Profile Single Item Lookup Mục tiêu: Retrieve thông tin profile của một user cụ thể\nTruy cập Query Interface:\n Go to: Items tab trong DynamoDB table của bạn Click: nút \u0026ldquo;Query\u0026rdquo; (không phải Scan) Ensure: Table query được chọn (không phải index)  Configure User Profile Query Query Parameters:\n Partition key (PK): USER#user001 Sort key (SK): PROFILE Query condition: Sử dụng \u0026ldquo;equals\u0026rdquo; (default)  Expected Result: Single item chứa user profile data\nExecute và Verify  Click \u0026ldquo;Run\u0026rdquo; Check results: Sẽ return 1 item Verify data: Profile information sẽ được hiển thị  Performance: ~1-2ms latency, 1 RCU consumed\nPattern 2: Get User\u0026rsquo;s Orders One-to-Many Relationship Query Mục tiêu: Retrieve tất cả orders cho một user cụ thể\nQuery Configuration:\n Partition key (PK): USER#user001 Sort key condition: \u0026ldquo;begins_with\u0026rdquo; Sort key value: ORDER#  Pattern này retrieves cả user profile VÀ tất cả orders của họ trong một query duy nhất.\nAdvanced Sort Key Options Available sort key conditions:\n = (equals): Exact match begins_with: Prefix matching between: Range queries \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;=: Comparison operators  Cho pattern này: Sử dụng \u0026ldquo;begins_with\u0026rdquo; để get tất cả items có SK bắt đầu với \u0026ldquo;ORDER#\u0026rdquo;\nExecute User Orders Query Expected Results:\n User profile (SK = PROFILE) Tất cả user orders (SK = ORDER#order001, etc.)  Tại sao điều này hoạt động: Tất cả items với PK = USER#user001 được lưu trữ cùng nhau và có thể được retrieved trong một query hiệu quả.\nPattern 3: Get Order Details with Items Hierarchical Data Query Mục tiêu: Get thông tin order hoàn chỉnh bao gồm tất cả items\nQuery Configuration:\n Partition key (PK): ORDER#order001 Sort key: Để trống (gets tất cả items trong partition)  Expected Results:\n Order details (SK = DETAILS) Tất cả order items (SK = ITEM#laptop001, SK = ITEM#book001)  Pattern 4: Products by Category (GSI Query) Sử dụng Global Secondary Index Mục tiêu: Tìm tất cả products trong một category cụ thể\nSwitch to GSI Query:\n Click Query dropdown: Chọn \u0026ldquo;Query (index)\u0026rdquo; Choose Index: GSI1 Query the GSI: Sử dụng GSI key structure  Configure Category Query GSI1 Query Parameters:\n GSI1 Partition key: CATEGORY#electronics GSI1 Sort key: Để trống (gets tất cả products trong category)  Tại sao điều này hoạt động: Tất cả electronics products có GSI1PK = CATEGORY#electronics\nExecute Category Query Expected Results: Tất cả products có category = \u0026ldquo;electronics\u0026rdquo;\nThử additional categories:\n CATEGORY#books CATEGORY#clothing (nếu bạn đã tạo)  Pattern 5: Orders by Status (GSI Query) Status-based Filtering Mục tiêu: Tìm tất cả orders với status cụ thể\nGSI2 Query Configuration:\n Choose Index: GSI2 GSI2 Partition key: STATUS#pending GSI2 Sort key: Để trống  Expected Results: Tất cả orders với status = \u0026ldquo;pending\u0026rdquo;\nThử Different Status Values Query other statuses:\n STATUS#shipped STATUS#delivered STATUS#cancelled  Pattern 6: Price Range Queries (GSI Query) Range-based Product Search Mục tiêu: Tìm products trong một price range\nGSI2 Query Configuration:\n Choose Index: GSI2 GSI2 Partition key: PRICE#500-1000 GSI2 Sort key: Để trống  Price Ranges được sử dụng trong Data của chúng ta:\n PRICE#10-50 (books, accessories) PRICE#50-200 (mid-range items) PRICE#200-500 (premium items) PRICE#500-1000 (high-end items)  Query Performance Analysis Monitor Query Efficiency Check Performance Metrics:\n Go to: Metrics tab Monitor: Consumed read capacity Verify: Không có throttled requests  Expected Performance:\n Single item queries: ~1-2ms, 1 RCU Multi-item queries: ~3-5ms, 2-5 RCU GSI queries: ~2-4ms, 1-3 RCU  Advanced Query Techniques Combining Conditions Sort Key with Multiple Conditions:\n Between dates: SK between 2025-01-01 and 2025-12-31 Greater than: SK \u0026gt; ORDER#order001 Prefix + range: Complex filtering patterns  Query Result Options Additional Query Settings:\n Limit: Maximum number of items to return Scan index forward: Sort order (ascending/descending) Projection expression: Specific attributes to return Filter expression: Additional filtering after query  Query Pattern Summary Patterns bạn đã Mastered    Pattern Query Type Key Structure Use Case     User Profile Table PK + SK exact Get specific user   User Orders Table PK + SK prefix Get user\u0026rsquo;s orders   Order Items Table PK all items Get order details   Category Products GSI1 Category grouping Product catalog   Status Orders GSI2 Status grouping Order management   Price Range GSI2 Price grouping Product search    Query Best Practices  Luôn sử dụng Query: Không bao giờ sử dụng Scan cho production workloads Design keys cho queries: Nghĩ về access patterns trước Sử dụng GSIs strategically: Enable multiple query patterns Monitor performance: Track consumed capacity và latency Test query patterns: Verify chúng return expected results  Key Insight: Single Table Design enables tất cả các query patterns này với consistent performance và minimal cost. Traditional relational approaches sẽ require multiple queries và JOINs.\n\rQuery Troubleshooting Common Issues No Results Returned:\n ✅ Check partition key spelling ✅ Verify sort key conditions ✅ Ensure data exists với những keys đó  Unexpected Results:\n ✅ Review sort key conditions (exact vs begins_with) ✅ Check index selection (table vs GSI) ✅ Verify data được tạo correctly  Performance Issues:\n ✅ Avoid Scan operations ✅ Sử dụng specific partition keys ✅ Monitor consumed capacity  Sẵn sàng cho Global Scale Bây giờ bạn đã mastered Single Table Design query patterns! Trong module tiếp theo, chúng ta sẽ đưa dữ liệu này lên global bằng cách configuring Global Tables cho multi-region deployment, enabling users worldwide to access your e-commerce platform với low latency.\nQuery Mastery Achieved: Bây giờ bạn có thể efficiently retrieve data sử dụng tất cả major Single Table Design patterns với consistent performance và cost optimization!\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.1-global-tables-overview/",
	"title": "3.1 Tổng quan Global Tables",
	"tags": [],
	"description": "",
	"content": "Tổng quan Global Tables 🌐 Hiểu về kiến trúc DynamoDB Global Tables và cơ chế replication\nGlobal Tables là gì? Global Tables cho phép bạn tạo một database multi-region, multi-master cung cấp hiệu suất read và write local cho các ứng dụng phân tán toàn cầu. CloudFormation deployment của bạn đã cấu hình sẵn điều này.\nCác thành phần Kiến trúc Workshop Setup hiện tại Infrastructure của bạn đã bao gồm:\n   Component US-East-1 EU-West-1 Status     DynamoDB Table Primary Replica ✅ Active   Table Name demo-ecommerce-freetier demo-ecommerce-freetier ✅ Synced   DynamoDB Streams Enabled Enabled ✅ Replicating   Replication Bi-directional Bi-directional ✅ Healthy    Quá trình Replication Cách dữ liệu Flow giữa các Regions    Step Action Details     Bước 1 User writes to US-EAST-1     Item USER#john, SK: PROFILE    Local write Immediate success    Stream record Created   Bước 2 DynamoDB Streams captures change     Stream record NEW_AND_OLD_IMAGES    Timestamp 2025-08-11T15:30:00.123Z    Event INSERT   Bước 3 Cross-region replication     Source us-east-1 stream    Target eu-west-1 table    Latency 500ms - 2 seconds   Bước 4 EU-WEST-1 receives update     Item appears USER#john, SK: PROFILE    Available for reads Immediately    Status Replicated ✅    Consistency Model Eventually Consistent Global Tables cung cấp eventual consistency across regions:\n Immediate: Write thành công ngay lập tức ở source region Propagation: Changes replicate đến các regions khác trong 0.5-2 giây Convergence: Tất cả regions cuối cùng có dữ liệu identical Durability: Dữ liệu không bao giờ bị mất trong quá trình replication  Conflict Resolution Khi cùng một item được modified ở nhiều regions đồng thời:\nLast Writer Wins strategy:\n Compare timestamps của các conflicting updates Keep the later timestamp (thay đổi gần đây hơn) Overwrite earlier changes trong tất cả regions Notify through CloudWatch metrics  Ví dụ conflict scenario:\nTime: 15:30:00 - US user updates: name = \u0026#34;John Smith\u0026#34; Time: 15:30:01 - EU user updates: name = \u0026#34;John Doe\u0026#34; Result: Tất cả regions sẽ có name = \u0026#34;John Doe\u0026#34; (EU update wins do later timestamp) Global Tables Benefits Performance Benefits  Local Latency: Sub-10ms response times trong mỗi region Global Scale: Serve users worldwide không có performance penalty Load Distribution: Traffic được distributed across regions  Availability Benefits  Regional Failover: Automatic failover nếu một region becomes unavailable Disaster Recovery: Built-in DR across geographic regions 99.999% Availability: Higher availability hơn single-region deployments  Operational Benefits  No Code Changes: Applications work với bất kỳ region nào Automatic Scaling: Mỗi region scales independently Unified Management: Single table view across tất cả regions  Key Concepts cần nhớ Multi-Master Replication  Bất kỳ region nào có thể accept writes Tất cả regions có thể serve reads Không có single point of failure  Stream-Based Replication  DynamoDB Streams power the replication Ordered delivery ensures consistency Retry logic handles temporary failures  Region Independence  Mỗi region operates independently Network partitions không affect local operations Cross-region connectivity chỉ cần cho replication  Workshop Advantage: CloudFormation template của bạn đã configured tất cả Global Tables components. Bạn có thể focus vào understanding và testing functionality!\n\rLimitations cần hiểu Eventual Consistency Challenges  Temporary inconsistencies có thể xảy ra trong 0.5-2 giây Application design phải handle eventual consistency Strong consistency chỉ available trong single region  Conflict Resolution Limitations  Last Writer Wins có thể overwrite changes Không có custom conflict resolution logic Application-level conflict handling có thể cần thiết  Cross-Region Dependencies  Network connectivity required cho replication Regional outages có thể delay replication Cross-region latency affects replication speed  Real-World Use Cases Ideal cho Global Tables    Use Case Tại sao It Works Considerations     User Profiles Infrequent updates, read-heavy Handle profile conflicts   Product Catalogs Content distribution, global access Inventory sync challenges   Gaming Leaderboards Global competition, eventual consistency OK Score conflicts possible   IoT Sensor Data Time-series data, append-only High write volume    Challenging Scenarios  Financial transactions (require strong consistency) Inventory management (stock levels need accuracy) Real-time collaboration (immediate consistency needed)  Next Steps Bây giờ bạn đã hiểu Global Tables architecture, hãy verify multi-region setup của bạn và xem replication in action thông qua AWS Console.\nReady to Explore: Global Tables của bạn đã được configured và running. Time to see them in action!\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.2-verify-global-setup/",
	"title": "3.2 Xác minh Global Setup",
	"tags": [],
	"description": "",
	"content": "Xác minh Global Setup ✅ Xác minh từng bước cấu hình Global Tables của bạn thông qua AWS Console\nTổng quan CloudFormation template của bạn đã tự động cấu hình Global Tables giữa US-East-1 và EU-West-1. Hãy xác minh mọi thứ hoạt động correctly trước khi chúng ta bắt đầu testing replication.\nBước 1: Truy cập Primary Region Navigate đến US-East-1  Open AWS Console: Đảm bảo bạn đã logged in Check Region: Góc trên-phải sẽ hiển thị \u0026ldquo;N. Virginia\u0026rdquo; Switch if needed: Click region dropdown → \u0026ldquo;US East (N. Virginia)\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của AWS Console với region selector hiển thị US East (N. Virginia)\n\rTìm DynamoDB Table của bạn  Services: Navigate đến DynamoDB service Tables: Click \u0026ldquo;Tables\u0026rdquo; trong left sidebar Locate: Tìm demo-ecommerce-freetier Status: Verify table hiển thị \u0026ldquo;Active\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của DynamoDB Tables list hiển thị demo-ecommerce-freetier với Active status\n\rBước 2: Check Global Tables Configuration Access Global Tables Tab  Click: Table name demo-ecommerce-freetier Navigate: Click \u0026ldquo;Global tables\u0026rdquo; tab Review: Global Tables configuration  Vị trí Screenshot: Thêm screenshot của table overview với Global tables tab được highlighted\n\rVerify Global Tables Status Expected Configuration:\n   Region Status Role Health     us-east-1 Active Primary ✅ Healthy   eu-west-1 Active Replica ✅ Healthy    Key indicators cần verify:\n Replication Status: \u0026ldquo;Healthy\u0026rdquo; hoặc \u0026ldquo;Active\u0026rdquo; Last Replication: Recent timestamp Pending Updates: Sẽ là 0  Vị trí Screenshot: Thêm screenshot của Global tables configuration hiển thị cả hai regions với healthy status\n\rBước 3: Verify Secondary Region Switch đến EU-West-1  Region Selector: Click region dropdown (top-right) Select: \u0026ldquo;Europe (Ireland)\u0026rdquo; - eu-west-1 Wait: Cho phép console switch regions  Vị trí Screenshot: Thêm screenshot của region selector dropdown với Europe (Ireland) được highlighted\n\rCheck Replica Table  Navigate: DynamoDB → Tables Find: Cùng table name demo-ecommerce-freetier Verify: Table exists và hiển thị \u0026ldquo;Active\u0026rdquo; Check: Global tables tab hiển thị replica status  Expected trong EU-West-1:\n Table Name: demo-ecommerce-freetier (identical) Status: Active Role: Replica table Primary Region: us-east-1  Vị trí Screenshot: Thêm screenshot của EU region hiển thị replica table với same name\n\rBước 4: Compare Table Schemas Verify Schema Consistency Cả hai regions sẽ có identical table schema:\nPrimary Keys:\n Partition Key: PK (String) Sort Key: SK (String)  Global Secondary Indexes:\n GSI1: GSI1PK (String), GSI1SK (String) GSI2: GSI2PK (String), GSI2SK (String)  Settings:\n Read Capacity: 5 units (provisioned) Write Capacity: 5 units (provisioned) Point-in-time Recovery: Enabled DynamoDB Streams: Enabled  Vị trí Screenshot: Thêm screenshot so sánh table schema giữa US và EU regions\n\rBước 5: Check Current Data Verify Existing Data Replication Nếu bạn đã hoàn thành Module 2, check rằng existing data của bạn xuất hiện trong cả hai regions:\nSwitch đến US-East-1:\n Go to: Items tab Count items: Note số lượng items  Switch đến EU-West-1:\n Go to: Items tab Compare count: Sẽ match US region exactly  Nếu item counts không match:\n Wait 1-2 phút cho replication Refresh browser page Check Global Tables health status  Vị trí Screenshot: Thêm screenshot hiển thị identical item counts trong cả hai regions\n\rBước 6: Verify Stream Configuration Check DynamoDB Streams Trong US-East-1:\n Table Overview: Go to table details Exports and streams: Click tab Stream details: Verify settings  Expected Stream Configuration:\n Stream Status: Enabled Stream view type: New and old images Stream ARN: Sẽ present Shard count: 1 hoặc nhiều active shards  Vị trí Screenshot: Thêm screenshot của DynamoDB Streams configuration hiển thị enabled status\n\rBước 7: Health Check Dashboard Monitor Replication Health Access Monitoring:\n Metrics Tab: Click trong table view Global Tables metrics: Look for replication metrics Key metrics:  Replication latency Pending replication count Failed replication events    Healthy Indicators:\n Replication Latency: \u0026lt; 2 seconds average Pending Count: 0 hoặc very low Error Rate: 0%  Vị trí Screenshot: Thêm screenshot của metrics dashboard hiển thị healthy replication metrics\n\rBước 8: Network Connectivity Test Test Cross-Region Communication Simple connectivity verification:\n Create test item trong US-East-1 Wait 30 seconds Check EU-West-1 cho item đó Delete test item từ either region  Test Item Example:\n{ \u0026#34;PK\u0026#34;: \u0026#34;TEST#connectivity\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;VERIFICATION\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;2025-08-11T15:00:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;global_tables_verification\u0026#34; } \rVị trí Screenshot: Thêm screenshot của test item xuất hiện trong cả hai regions\n\rTroubleshooting Common Issues Issue: Table Not Found trong EU-West-1 Possible Causes:\n Wrong region selected CloudFormation deployment incomplete Global Tables setup failed  Solutions:\n Double-check region trong top-right corner Verify CloudFormation stack completed successfully Check IAM permissions cho cross-region access  Issue: Replication Status Unhealthy Check These Items:\n Network connectivity giữa regions DynamoDB Streams enabled trên source table IAM permissions cho Global Tables service Table capacity không throttling  Issue: Item Counts Don\u0026rsquo;t Match Troubleshooting Steps:\n Wait longer (up to 2 minutes) Refresh browser page Check for errors trong CloudWatch logs Verify no throttling trong metrics  Verification Checklist Trước khi proceeding đến multi-region operations:\n Both regions accessible thông qua AWS Console Table exists trong cả us-east-1 và eu-west-1 Global Tables status hiển thị \u0026ldquo;Healthy\u0026rdquo; hoặc \u0026ldquo;Active\u0026rdquo; Schema identical giữa regions DynamoDB Streams enabled Existing data replicated (nếu có) Test connectivity working Monitoring metrics available  Verification Complete: Global Tables setup của bạn healthy và ready cho multi-region operations!\n\rNext Steps Với Global Tables đã verified và healthy, bạn ready để experience multi-region operations. Trong section tiếp theo, chúng ta sẽ create data trong một region và watch nó automatically appear trong region khác!\nPro Tip: Giữ cả hai region tabs mở trong browser của bạn (US-East-1 và EU-West-1) để easily switch giữa chúng trong các exercises.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.3-multi-region-operations/",
	"title": "3.3 Multi-Region Operations",
	"tags": [],
	"description": "",
	"content": "Multi-Region Operations 🌍 Thực hành hands-on với cross-region read/write operations và replication testing\nTổng quan Bây giờ Global Tables của bạn đã được verified, hãy experience multi-region operations firsthand. Bạn sẽ create data trong một region, verify nó replicates đến region khác, và test conflict resolution scenarios.\nExercise 1: Write to Primary, Read from Replica Bước 1: Create Global User trong US-East-1 Ensure bạn đang ở US-East-1:\n Check region: Top-right sẽ hiển thị \u0026ldquo;N. Virginia\u0026rdquo; Navigate: DynamoDB → Tables → demo-ecommerce-freetier Go to: Items tab Click: \u0026ldquo;Create item\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của US-East-1 region với Create item dialog mở\n\rUser Creation Template Switch to JSON view và create:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#global-user-[your-name]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#[your-name]@global.com\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;global-user-[your-name]\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;[Your Name] Global\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;[your-name]@global.com\u0026#34;, \u0026#34;region_created\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;created_timestamp\u0026#34;: \u0026#34;2025-08-11T15:30:00Z\u0026#34;, \u0026#34;test_type\u0026#34;: \u0026#34;global_replication\u0026#34;, \u0026#34;workshop_session\u0026#34;: \u0026#34;module3\u0026#34; } Important: Replace [your-name] với tên thực của bạn để make items unique.\nVị trí Screenshot: Thêm screenshot của JSON editor với global user data được nhập\n\rBước 2: Note Creation Time Record the details:\n Click \u0026ldquo;Create item\u0026rdquo; Note the time: Record khi bạn clicked create Take screenshot: Của created item  Vị trí Screenshot: Thêm screenshot hiển thị successfully created item trong US region\n\rBước 3: Switch đến EU-West-1 Change regions:\n Region selector: Click dropdown (top-right) Select: \u0026ldquo;Europe (Ireland)\u0026rdquo; Wait: Cho region switch to complete Navigate: DynamoDB → Tables → demo-ecommerce-freetier  Bước 4: Query for Replicated Data Search cho user của bạn:\n Items tab: Navigate đến items view Click: \u0026ldquo;Query\u0026rdquo; button Configure query:  Partition key (PK): USER#global-user-[your-name] Sort key (SK): PROFILE   Click: \u0026ldquo;Run\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của query setup trong EU region looking for the US-created user\n\rBước 5: Verify Replication Expected results:\n If immediate: Item appears ngay lập tức If delayed: Wait 30-60 seconds và try again Replication time: Note how long it took  Verify the data:\n All attributes: Sẽ match exactly region_created: Vẫn sẽ show \u0026ldquo;us-east-1\u0026rdquo; Timestamps: Sẽ identical  Vị trí Screenshot: Thêm screenshot hiển thị replicated item trong EU region với identical data\n\rExercise 2: Write from Replica, Read from Primary Bước 1: Create Product trong EU-West-1 Stay trong EU-West-1 và create một product:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#eu-product-[unique-id]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#eu-electronics\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#eu-product-[unique-id]\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#200-500\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#eu-product-[unique-id]\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;eu-product-[unique-id]\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;European Smartphone\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Created in EU region\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;eu-electronics\u0026#34;, \u0026#34;price\u0026#34;: 299, \u0026#34;stock\u0026#34;: 50, \u0026#34;region_created\u0026#34;: \u0026#34;eu-west-1\u0026#34;, \u0026#34;created_timestamp\u0026#34;: \u0026#34;2025-08-11T15:35:00Z\u0026#34;, \u0026#34;test_type\u0026#34;: \u0026#34;reverse_replication\u0026#34; } \rVị trí Screenshot: Thêm screenshot của product creation trong EU region\n\rBước 2: Switch Back đến US-East-1 Return to primary region:\n Region selector: \u0026ldquo;US East (N. Virginia)\u0026rdquo; Navigate: DynamoDB → Tables → Items Query for product:  PK: PRODUCT#eu-product-[unique-id] SK: DETAILS    Vị trí Screenshot: Thêm screenshot của US region query looking for EU-created product\n\rBước 3: Verify Reverse Replication Check the results:\n Product appears: Trong US region region_created: Vẫn shows \u0026ldquo;eu-west-1\u0026rdquo; All data intact: Exact copy từ EU  Điều này demonstrates bi-directional replication - bạn có thể write to any region!\nVị trí Screenshot: Thêm screenshot hiển thị EU-created product bây giờ visible trong US region\n\rExercise 3: Conflict Resolution Testing Bước 1: Create Base Order Trong US-East-1, create một order:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#global-user-[your-name]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;STATUS#pending\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;conflict-test\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;global-user-[your-name]\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;total_amount\u0026#34;: 100, \u0026#34;last_updated_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;conflict_test\u0026#34;: true } Wait 2 minutes cho replication to complete.\nVị trí Screenshot: Thêm screenshot của conflict test order creation trong US region\n\rBước 2: Simultaneous Updates (Advanced) Nếu working với một partner:\n Partner A: Update order trong US-East-1 Partner B: Update same order trong EU-West-1 Both execute: Within 10 seconds của nhau  US Update (Partner A):\n{ \u0026#34;total_amount\u0026#34;: 150, \u0026#34;last_updated_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;update_timestamp\u0026#34;: \u0026#34;2025-08-11T15:40:00Z\u0026#34; } EU Update (Partner B):\n{ \u0026#34;total_amount\u0026#34;: 200, \u0026#34;last_updated_region\u0026#34;: \u0026#34;eu-west-1\u0026#34;, \u0026#34;update_timestamp\u0026#34;: \u0026#34;2025-08-11T15:40:05Z\u0026#34; } \rVị trí Screenshot: Thêm screenshot hiển thị edit dialog cho conflict testing\n\rBước 3: Observe Conflict Resolution After 2-3 minutes:\n Check both regions: Query the same order Compare results: Which update won? Understand why: Later timestamp wins  Expected outcome: EU update wins vì timestamp 15:40:05 \u0026gt; 15:40:00\nVị trí Screenshot: Thêm screenshot hiển thị final conflict resolution result trong both regions\n\rExercise 4: Query Patterns Across Regions Bước 1: Category Query trong EU Test GSI queries work across regions:\n Stay trong EU-West-1 Query Index: GSI1 GSI1PK: CATEGORY#eu-electronics Run query  Expected: Shows products created trong EU region\nVị trí Screenshot: Thêm screenshot của GSI category query trong EU region\n\rBước 2: Status Query trong US Test cross-region status queries:\n Switch đến US-East-1 Query Index: GSI2 GSI2PK: STATUS#pending Run query  Expected: Shows orders từ both regions với pending status\nVị trí Screenshot: Thêm screenshot của GSI status query hiển thị orders từ multiple regions\n\rExercise 5: Replication Timing Analysis Bước 1: Measure Replication Speed Create timestamped items:\n Record start time: Note exact time trước creation Create item: Trong một region Switch regions: Immediately Query repeatedly: Until item appears Calculate delay: End time - start time  Test Item Template:\n{ \u0026#34;PK\u0026#34;: \u0026#34;TEST#timing-[timestamp]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;REPLICATION\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;[exact-timestamp]\u0026#34;, \u0026#34;source_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;timing_analysis\u0026#34; } Bước 2: Document Results Record your findings:\n Fastest replication: ___ seconds Slowest replication: ___ seconds Average time: ___ seconds Consistency: Usually \u0026lt; 2 seconds  Real-World Scenarios Scenario 1: Global User Login Simulate global application:\n User logs in: US region Profile updated: Last login timestamp User travels: EU region App checks: Profile từ EU Verify: Recent login time visible  Scenario 2: Inventory Management Product stock updates:\n Product sold: US region (-1 stock) Same product: EU region query Stock level: Eventually consistent Business logic: Handle temporary inconsistency  Scenario 3: Order Processing Multi-region order flow:\n Order created: EU region Payment processed: US region Status updated: EU region Fulfillment: Reads từ nearest region  Performance Monitoring Check Replication Metrics During exercises:\n Monitor: CloudWatch metrics Watch: Replication latency Observe: Pending replication count Track: Error rates (sẽ là 0)  Vị trí Screenshot: Thêm screenshot của CloudWatch metrics hiển thị replication performance trong exercises\n\rTroubleshooting Guide Replication Not Working Common issues:\n Wrong region: Double-check region selection Typos in keys: Exact match required cho queries Browser cache: Refresh page Wait longer: Up to 2 minutes possible  Queries Returning Empty Checklist:\n Correct PK/SK: Exact string match Region correct: Item exists trong queried region GSI populated: GSI keys included trong item Query type: Using Query, không phải Scan  Conflict Resolution Unexpected Understanding:\n Timestamp precision: Millisecond level Clock synchronization: AWS handles timing Application design: Plan cho overwrites  Important: Nếu bạn experience issues, check the Global Tables health status trong console và verify network connectivity.\n\rExercise Summary Bằng cách completing các exercises này, bạn đã experienced:\n ✅ Cross-region replication trong both directions ✅ Eventual consistency timing ✅ Conflict resolution với Last Writer Wins ✅ Query patterns working across regions ✅ Real-world scenarios và timing analysis  Multi-Region Mastery: Bây giờ bạn understand how Global Tables enables truly global applications với local performance!\n\rNext Steps Với hands-on Global Tables experience complete, hãy monitor the replication performance và understand the metrics giúp bạn operate global applications trong production.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/4.1-stream-configuration/",
	"title": "4.1 Stream Configuration",
	"tags": [],
	"description": "",
	"content": "Enable DynamoDB Streams 🔧 Configure DynamoDB table của bạn để capture every data change\nTổng quan DynamoDB Streams capture data modification events trong tables của bạn. Khi enabled, streams provide time-ordered sequence của item-level modifications cho up to 24 hours.\nWhat Streams Capture Event Types:\n INSERT: New item added to table MODIFY: Existing item updated REMOVE: Item deleted from table  Stream View Types:\n KEYS_ONLY: Only key attributes của modified item NEW_IMAGE: Entire item after modification OLD_IMAGE: Entire item before modification NEW_AND_OLD_IMAGES: Both before và after images  Exercise 1: Enable Streams on Existing Table Bước 1: Navigate to DynamoDB Console Access table của bạn:\n AWS Console: Search \u0026ldquo;DynamoDB\u0026rdquo; Tables: Click \u0026ldquo;Tables\u0026rdquo; trong left sidebar Select table: Click demo-ecommerce-freetier Exports and streams: Click \u0026ldquo;Exports and streams\u0026rdquo; tab  Vị trí Screenshot: Thêm screenshot của DynamoDB console với Exports and streams tab highlighted\n\rBước 2: Configure DynamoDB Stream Enable stream processing:\n DynamoDB stream section: Scroll to \u0026ldquo;DynamoDB stream\u0026rdquo; section Turn on stream: Click \u0026ldquo;Turn on\u0026rdquo; button View type selection: Choose \u0026ldquo;New and old images\u0026rdquo; Confirmation: Click \u0026ldquo;Turn on stream\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của stream configuration dialog với \u0026ldquo;New and old images\u0026rdquo; selected\n\rBước 3: Verify Stream Configuration Check stream status:\n Stream details: Note the stream ARN appears Status: Should show \u0026ldquo;Active\u0026rdquo; View type: Confirms \u0026ldquo;New and old images\u0026rdquo; Creation time: Shows khi stream was enabled  Vị trí Screenshot: Thêm screenshot showing active stream với ARN và configuration details\n\rExercise 2: Understanding Stream Settings Stream View Type Comparison Choose the right view type cho use case của bạn:\n   View Type Use Case Data Captured     KEYS_ONLY Audit logging PK, SK only   NEW_IMAGE Cache updates Item after change   OLD_IMAGE Change tracking Item before change   NEW_AND_OLD_IMAGES Full audit Both versions    Performance Considerations Stream Configuration Impact:\n Storage: NEW_AND_OLD_IMAGES uses most space Lambda payload: Larger payloads với full images Processing time: More data = longer processing Cost: Minimal additional cost cho streams  Free Tier Note: DynamoDB Streams are included at no additional charge. Lambda processing stays within Free Tier limits.\n\rExercise 3: Test Stream Functionality Bước 1: Create Test Item Generate một stream event:\n Items tab: Go back to \u0026ldquo;Items\u0026rdquo; tab Create item: Click \u0026ldquo;Create item\u0026rdquo; Add test data:  { \u0026#34;PK\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;EVENT#001\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;stream_test\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Testing DynamoDB Stream functionality\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T16:00:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;verify_stream_capture\u0026#34; } Create: Click \u0026ldquo;Create item\u0026rdquo;  Vị trí Screenshot: Thêm screenshot của item creation dialog với stream test data\n\rBước 2: Monitor Stream Activity Check stream metrics:\n CloudWatch: Open CloudWatch console trong new tab Metrics: Navigate to Metrics DynamoDB: Click \u0026ldquo;DynamoDB\u0026rdquo; namespace Stream metrics: Look for stream-related metrics IncomingRecords: Should show 1 new record  Vị trí Screenshot: Thêm screenshot của CloudWatch showing DynamoDB stream metrics\n\rBước 3: Understand Stream Records Stream record structure (for reference):\n{ \u0026#34;Records\u0026#34;: [ { \u0026#34;eventID\u0026#34;: \u0026#34;12345...\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;INSERT\u0026#34;, \u0026#34;eventVersion\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;aws:dynamodb\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;dynamodb\u0026#34;: { \u0026#34;ApproximateCreationDateTime\u0026#34;: 1642857600, \u0026#34;Keys\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;EVENT#001\u0026#34;} }, \u0026#34;NewImage\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;EVENT#001\u0026#34;}, \u0026#34;event_type\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;stream_test\u0026#34;}, \u0026#34;description\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Testing DynamoDB Stream functionality\u0026#34;}, \u0026#34;created_at\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;2025-08-11T16:00:00Z\u0026#34;}, \u0026#34;test_purpose\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;verify_stream_capture\u0026#34;} }, \u0026#34;SequenceNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;SizeBytes\u0026#34;: 245, \u0026#34;StreamViewType\u0026#34;: \u0026#34;NEW_AND_OLD_IMAGES\u0026#34; } } ] } Key components:\n eventName: INSERT (since this is a new item) Keys: Primary key của changed item NewImage: Complete item data after creation OldImage: Would be empty cho INSERT events  Exercise 4: Stream Configuration Best Practices Optimal Configuration for Workshop Recommended settings:\n ✅ View Type: NEW_AND_OLD_IMAGES (comprehensive audit trail) ✅ Retention: 24 hours (default, sufficient cho processing) ✅ Shards: Auto-managed by AWS ✅ Processing: Lambda với appropriate batch size  Security Considerations Access control:\n IAM permissions: Lambda needs stream read permissions Encryption: Streams inherit table encryption settings VPC: Streams work within VPC configuration của bạn Monitoring: CloudTrail logs stream access  Cost Optimization Stream cost factors:\n Read requests: No additional charge cho stream writes Lambda invocations: Count toward Free Tier Data transfer: Minimal cho in-region processing Storage: Stream records retained cho 24 hours only  Exercise 5: Advanced Stream Configuration Multiple Consumer Pattern Khi bạn need multiple processors:\n Single stream: One DynamoDB stream per table Multiple Lambdas: Each có thể process the same stream Kinesis Data Streams: Cho more complex routing Event filtering: Lambda-level filtering  Cross-Region Considerations Global Tables + Streams:\n Each region: Has its own stream Replication events: Generate stream records Filtering: Distinguish app writes from replication Processing: Handle regional differences  Vị trí Screenshot: Thêm screenshot của Global Tables với streams enabled trong multiple regions\n\rTroubleshooting Common Issues Stream Not Appearing Check các items này:\n Permissions: Ensure bạn có DynamoDB full access Region: Verify bạn đang ở correct AWS region Table status: Table must be ACTIVE để enable streams Refresh: Browser refresh có thể needed  Stream Configuration Failed Possible causes:\n Table updating: Wait cho table to be ACTIVE Permissions: Need dynamodb:EnableStream permission Rate limits: Wait và retry nếu rate limited Billing: Ensure account is trong good standing  Stream Records Missing Debugging steps:\n Stream status: Confirm stream is ACTIVE Write operations: Ensure items are actually changing Time delay: Allow 1-2 minutes cho propagation Metrics: Check CloudWatch cho IncomingRecords  Configuration Summary Bằng cách completing exercise này, bạn đã có:\n ✅ Enabled DynamoDB Streams on table của bạn ✅ Configured view type cho comprehensive change capture ✅ Tested stream functionality với sample data ✅ Understood stream record structure và components ✅ Applied best practices cho optimal configuration  Stream Ready: DynamoDB table của bạn bây giờ captures every change và ready cho Lambda processing!\n\rNext Steps Với streams configured, bạn ready để create Lambda functions sẽ process các events này real-time. Trong next section, chúng ta sẽ build và deploy Lambda function optimized cho DynamoDB stream processing.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/4.2-lambda-function-setup/",
	"title": "4.2 Lambda Function Setup",
	"tags": [],
	"description": "",
	"content": "Create Stream Processing Lambda ⚙️ Build Lambda function để process DynamoDB stream events trong real-time\nTổng quan AWS Lambda provides serverless compute để process DynamoDB stream events. Function của bạn sẽ automatically trigger khi items change trong table của bạn, enabling real-time processing patterns.\nFunction Requirements Free Tier Optimized Configuration:\n Runtime: Python 3.9 (reliable và well-supported) Memory: 128 MB (minimum cho Free Tier) Timeout: 30 seconds (sufficient cho stream processing) Concurrent executions: 10 (Free Tier safe)  Exercise 1: Create Lambda Function Bước 1: Access Lambda Console Navigate to Lambda service:\n AWS Console: Search \u0026ldquo;Lambda\u0026rdquo; Functions: Click \u0026ldquo;Functions\u0026rdquo; trong left sidebar Create function: Click \u0026ldquo;Create function\u0026rdquo; button Author from scratch: Select option này  Vị trí Screenshot: Thêm screenshot của Lambda console với Create function button highlighted\n\rBước 2: Configure Basic Settings Function configuration:\n Function name: demo-dynamodb-stream-processor Runtime: Select \u0026ldquo;Python 3.9\u0026rdquo; Architecture: Leave as \u0026ldquo;x86_64\u0026rdquo; Permissions: \u0026ldquo;Create a new role with basic Lambda permissions\u0026rdquo; Create function: Click to proceed  Vị trí Screenshot: Thêm screenshot của Lambda function creation form với specified settings\n\rBước 3: Configure Function Settings Optimize cho Free Tier:\n Configuration tab: Click after function creation General configuration: Click \u0026ldquo;Edit\u0026rdquo; Memory: Set to 128 MB Timeout: Set to 30 seconds Save: Click to apply changes  Vị trí Screenshot: Thêm screenshot của Lambda function configuration settings với memory và timeout values\n\rExercise 2: Add Stream Processing Code Bước 1: Replace Function Code Navigate to code editor:\n Code tab: Click để open code editor lambda_function.py: Replace existing code với:  import json import boto3 import logging from datetime import datetime # Configure logging logger = logging.getLogger() logger.setLevel(logging.INFO) def lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34; Process DynamoDB Stream events Optimized for AWS Free Tier \u0026#34;\u0026#34;\u0026#34; try: processed_records = 0 # Process each record in the batch for record in event[\u0026#39;Records\u0026#39;]: event_name = record[\u0026#39;eventName\u0026#39;] # Process INSERT, MODIFY, REMOVE events if event_name in [\u0026#39;INSERT\u0026#39;, \u0026#39;MODIFY\u0026#39;, \u0026#39;REMOVE\u0026#39;]: process_stream_record(record) processed_records += 1 # Return success response return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: f\u0026#39;Successfully processed {processed_records}records\u0026#39;, \u0026#39;timestamp\u0026#39;: datetime.utcnow().isoformat(), \u0026#39;processed_count\u0026#39;: processed_records }) } except Exception as e: logger.error(f\u0026#34;Error processing stream records: {str(e)}\u0026#34;) # Re-raise for Lambda retry logic raise e def process_stream_record(record): \u0026#34;\u0026#34;\u0026#34; Process individual stream record Add your business logic here \u0026#34;\u0026#34;\u0026#34; event_name = record[\u0026#39;eventName\u0026#39;] # Extract key information if \u0026#39;dynamodb\u0026#39; in record: keys = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;Keys\u0026#39;, {}) pk = keys.get(\u0026#39;PK\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) sk = keys.get(\u0026#39;SK\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) logger.info(f\u0026#34;Processing {event_name}for item: {pk}#{sk}\u0026#34;) # Handle different event types if event_name == \u0026#39;INSERT\u0026#39;: handle_insert_event(record) elif event_name == \u0026#39;MODIFY\u0026#39;: handle_modify_event(record) elif event_name == \u0026#39;REMOVE\u0026#39;: handle_remove_event(record) def handle_insert_event(record): \u0026#34;\u0026#34;\u0026#34; Handle new item creation \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing INSERT event\u0026#34;) # Get new item data new_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;NewImage\u0026#39;, {}) # Example: Send notification for new user if \u0026#39;USER#\u0026#39; in str(new_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;New user created - could send welcome email\u0026#34;) # Example: Update inventory for new product elif \u0026#39;PRODUCT#\u0026#39; in str(new_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;New product created - could update search index\u0026#34;) # Example: Process new order elif \u0026#39;ORDER#\u0026#39; in str(new_image.get(\u0026#39;SK\u0026#39;, {})): logger.info(\u0026#34;New order created - could trigger fulfillment\u0026#34;) def handle_modify_event(record): \u0026#34;\u0026#34;\u0026#34; Handle item updates \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing MODIFY event\u0026#34;) # Get before and after images old_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;OldImage\u0026#39;, {}) new_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;NewImage\u0026#39;, {}) # Example: Check for status changes old_status = old_image.get(\u0026#39;status\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) new_status = new_image.get(\u0026#39;status\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) if old_status != new_status: logger.info(f\u0026#34;Status changed from {old_status}to {new_status}\u0026#34;) # Could trigger notifications, cache updates, etc. # Example: Price change detection old_price = old_image.get(\u0026#39;price\u0026#39;, {}).get(\u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;) new_price = new_image.get(\u0026#39;price\u0026#39;, {}).get(\u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;) if old_price != new_price: logger.info(f\u0026#34;Price changed from {old_price}to {new_price}\u0026#34;) # Could invalidate cache, update recommendations, etc. def handle_remove_event(record): \u0026#34;\u0026#34;\u0026#34; Handle item deletion \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing REMOVE event\u0026#34;) # Get deleted item data old_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;OldImage\u0026#39;, {}) # Example: Cleanup related data if \u0026#39;USER#\u0026#39; in str(old_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;User deleted - could cleanup user data\u0026#34;) # Example: Remove from search index elif \u0026#39;PRODUCT#\u0026#39; in str(old_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;Product deleted - could remove from search\u0026#34;) Deploy: Click \u0026ldquo;Deploy\u0026rdquo; để save the code  Vị trí Screenshot: Thêm screenshot của Lambda code editor với stream processing code\n\rBước 2: Test Function Syntax Validate the code:\n Test tab: Click \u0026ldquo;Test\u0026rdquo; tab Create test event: Click \u0026ldquo;Create new event\u0026rdquo; Event template: Select \u0026ldquo;DynamoDB Stream\u0026rdquo; template Event name: test-stream-event Test: Click \u0026ldquo;Test\u0026rdquo; để validate syntax  Vị trí Screenshot: Thêm screenshot của Lambda test configuration với DynamoDB Stream template\n\rExercise 3: Configure Event Source Mapping Bước 1: Add DynamoDB Trigger Connect Lambda to DynamoDB Stream:\n Function overview: Trong Lambda console Add trigger: Click \u0026ldquo;Add trigger\u0026rdquo; button Trigger configuration:  Source: Select \u0026ldquo;DynamoDB\u0026rdquo; DynamoDB table: Choose demo-ecommerce-freetier Batch size: Set to 10 (Free Tier optimized) Starting position: Select \u0026ldquo;Trim horizon\u0026rdquo;   Add: Click để create trigger  Vị trí Screenshot: Thêm screenshot của trigger configuration dialog với DynamoDB settings\n\rBước 2: Verify Event Source Mapping Check trigger configuration:\n Function overview: Should show DynamoDB trigger Configuration: Verify settings:  Batch size: 10 records Starting position: Trim horizon Status: Enabled State: Creating → Enabled    Vị trí Screenshot: Thêm screenshot showing successful DynamoDB trigger configuration\n\rBước 3: Configure IAM Permissions Update Lambda execution role:\n Configuration tab: Click \u0026ldquo;Permissions\u0026rdquo; Execution role: Click role name link IAM console: Opens trong new tab Attach policies: Add AWSLambdaDynamoDBExecutionRole Save: Return to Lambda console  Vị trí Screenshot: Thêm screenshot của IAM role với DynamoDB stream permissions\n\rExercise 4: Test Stream Processing Bước 1: Create Test Item Generate stream event:\n DynamoDB console: Open trong new tab Items tab: Navigate to table của bạn Create item: Add test data:  { \u0026#34;PK\u0026#34;: \u0026#34;LAMBDA#test-processing\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;EVENT#001\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;lambda_test\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Testing Lambda stream processing\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T16:30:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;verify_lambda_trigger\u0026#34; } Create: Save the item  Vị trí Screenshot: Thêm screenshot của DynamoDB item creation cho Lambda testing\n\rBước 2: Monitor Lambda Execution Check function invocation:\n Lambda console: Return to function của bạn Monitor tab: Click để view metrics Invocations: Should show 1 new invocation Duration: Typically \u0026lt; 1 second Errors: Should be 0  Vị trí Screenshot: Thêm screenshot của Lambda monitoring tab showing successful invocation\n\rBước 3: Check Processing Logs View detailed logs:\n CloudWatch logs: Click \u0026ldquo;View CloudWatch logs\u0026rdquo; Log stream: Click latest log stream Log entries: Look for:  START RequestId: [uuid] Processing INSERT for item: LAMBDA#test-processing#EVENT#001 Processing INSERT event Successfully processed 1 records END RequestId: [uuid]    Vị trí Screenshot: Thêm screenshot của CloudWatch logs showing successful stream processing\n\rExercise 5: Advanced Configuration Error Handling Configuration Configure retry và error handling:\n Event source mapping: Edit DynamoDB trigger của bạn Additional settings:  Retry attempts: 3 (default) Maximum record age: 3600 seconds Split batch on error: Enable Dead letter queue: Configure SNS/SQS (optional)    Performance Optimization Free Tier optimization settings:\n Parallelization factor: 1 (avoid excess concurrency) Batch size: 10 records (balance latency vs cost) Reserved concurrency: 10 (control costs) Provisioned concurrency: 0 (not needed cho streams)  Monitoring and Alerting Set up basic monitoring:\n CloudWatch Alarms: Create cho:  Function errors \u0026gt; 0 Function duration \u0026gt; 20 seconds Iterator age \u0026gt; 30 seconds   Notifications: SNS topic cho alerts Dashboard: Add metrics to CloudWatch dashboard  Vị trí Screenshot: Thêm screenshot của CloudWatch alarm configuration cho Lambda function\n\rFunction Testing Patterns Test Different Event Types Comprehensive testing:\n INSERT: Create new items MODIFY: Update existing items REMOVE: Delete items Batch: Multiple rapid changes  Validation Checklist Verify setup của bạn:\n ✅ Lambda function created với correct runtime ✅ Stream trigger configured với proper permissions ✅ Code deployed và syntax validated ✅ Test successful với sample data ✅ Logs showing processing details ✅ Metrics indicating healthy execution  Troubleshooting Common Issues Lambda Not Triggering Check các items này:\n Stream enabled: DynamoDB stream is active Permissions: Lambda có stream read permissions Event source mapping: Trigger is enabled Function state: Lambda is active (not failed)  Processing Errors Debug steps:\n CloudWatch logs: Check cho error messages Timeout issues: Increase timeout nếu needed Memory errors: Monitor memory usage Permissions: Verify all required permissions  Performance Issues Optimization tips:\n Batch size: Adjust based on processing time Memory allocation: Right-size cho workload của bạn Cold starts: Consider provisioned concurrency nếu needed Error handling: Implement proper retry logic  Lambda Ready: Function của bạn bây giờ processing DynamoDB stream events trong real-time!\n\rNext Steps Với Lambda function của bạn processing stream events, bạn ready để practice với real data changes và explore different event-driven patterns. Next section covers hands-on stream processing exercises.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]