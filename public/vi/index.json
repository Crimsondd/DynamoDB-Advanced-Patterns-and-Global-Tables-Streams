[
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/",
	"title": "1. Thiết lập &amp; Triển khai Hạ tầng",
	"tags": [],
	"description": "",
	"content": "Thiết lập \u0026amp; Triển khai Hạ tầng 🚀 Hướng dẫn hoàn chỉnh thiết lập hạ tầng AWS cho workshop DynamoDB Advanced Patterns\nModule này cung cấp thiết lập nền tảng cần thiết cho workshop DynamoDB Advanced Patterns, đảm bảo tất cả học viên có môi trường hoạt động sử dụng AWS Free Tier.\n📋 Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Xác minh tài khoản AWS và tính đủ điều kiện Free Tier ✅ Điều hướng AWS Console hiệu quả ✅ Triển khai hạ tầng qua CloudFormation ✅ Xác minh tất cả tài nguyên được tạo thành công ✅ Thiết lập giám sát và cảnh báo billing  🏗️ Tổng quan Kiến trúc Chúng ta sẽ triển khai hạ tầng trên hai vùng AWS: 🎯 Những gì chúng ta sẽ xây dựng Chúng ta đang xây dựng một nền tảng thương mại điện tử đơn giản với:  Users: Hồ sơ khách hàng và xác thực Products: Danh mục với các danh mục và giá cả Orders: Giỏ hàng và quản lý đơn hàng Real-time processing: Cập nhật dựa trên stream Global availability: Triển khai đa vùng  📦 Tài nguyên được tạo Template CloudFormation này sẽ tạo:  DynamoDB Table: Global table với streams được kích hoạt Lambda Function: Stream processor cho cập nhật thời gian thực IAM Roles: Chính sách truy cập bảo mật CloudWatch Dashboard: Giám sát và metrics Billing Alerts: Cơ chế bảo vệ chi phí  🚀 Điều kiện tiên quyết Trước khi bắt đầu, đảm bảo bạn có:  Tài khoản AWS với tính đủ điều kiện Free Tier Quyền truy cập quản trị vào AWS Console Hiểu biết cơ bản về các dịch vụ AWS Trình duyệt web hiện đại (Chrome, Firefox, Safari)  Hãy bắt đầu với thiết lập hạ tầng sẽ hỗ trợ triển khai DynamoDB đa vùng của chúng ta.  Bạn có thể chọn tài khoản Personal hoặc Business  Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  Lưu ý: Bạn có thể chọn địa chỉ khác cho tài khoản của mình bằng cách chọn Use a new address trước Verify and Add.    Xác minh số điện thoại của bạn  Nhập số điện thoại. Nhập mã kiểm tra bảo mật sau đó chọn Call me now. AWS sẽ liên hệ và xác minh việc mở tài khoản.  Chọn Support Plan  Trong trang Select a support plan, chọn một plan hiệu quả, để so sánh các plan, xem Compare AWS Support Plans.  Đợi tài khoản của bạn được kích hoạt  Sau khi chọn Support plan, tài khoản thường được kích hoạt sau vài phút, nhưng quá trình có thể mất đến 24 giờ. Bạn vẫn có thể đăng nhập vào tài khoản AWS lúc này, trang chủ AWS có thể hiển thị nút \u0026ldquo;Complete Sign Up\u0026rdquo; trong thời gian này, ngay cả khi bạn đã hoàn thành tất cả các bước trong phần đăng ký. Sau khi nhận được email xác nhận tài khoản của bạn đã được kích hoạt, bạn có thể truy cập tất cả dịch vụ AWS.  Quan trọng  Các hành động AWS Identity and Access Management (IAM) sau đây sẽ đạt đến cuối hỗ trợ tiêu chuẩn vào tháng 7 năm 2023: aws-portal:ModifyAccount và aws-portal:ViewAccount. Xem Using fine-grained AWS Billing actions để thay thế các hành động này bằng các hành động chi tiết để bạn có quyền truy cập vào AWS Billing, AWS Cost Management và bảng điều khiển tài khoản AWS. Nếu bạn tạo tài khoản AWS hoặc tài khoản AWS Organizations Management trước ngày 6 tháng 3 năm 2023, các hành động chi tiết sẽ có hiệu lực từ tháng 7 năm 2023. Chúng tôi khuyên bạn thêm các hành động chi tiết, nhưng không loại bỏ quyền hiện có với tiền tố aws-portal hoặc purchase-orders. Nếu bạn tạo tài khoản AWS hoặc tài khoản AWS Organizations Management vào hoặc sau ngày 6 tháng 3 năm 2023, các hành động chi tiết có hiệu lực ngay lập tức. AWS gán các định danh duy nhất sau cho mỗi tài khoản AWS: AWS account ID: Một số 12 chữ số, chẳng hạn như 012345678901, định danh duy nhất cho tài khoản AWS. Nhiều tài nguyên AWS bao gồm ID tài khoản trong Amazon Resource Names (ARNs) của chúng. Phần ID tài khoản phân biệt tài nguyên trong một tài khoản với tài nguyên trong tài khoản khác. Nếu bạn là người dùng AWS Identity and Access Management (IAM), bạn có thể đăng nhập vào AWS Management Console bằng ID tài khoản hoặc bí danh tài khoản. Mặc dù ID tài khoản, như bất kỳ thông tin nhận dạng nào, nên được sử dụng và chia sẻ cẩn thận, chúng không được coi là thông tin bí mật, nhạy cảm hoặc bảo mật. Canonical user ID: Một định danh chữ và số, chẳng hạn như 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, là dạng che giấu của ID tài khoản AWS. Bạn có thể sử dụng ID này để xác định tài khoản AWS khi cấp quyền truy cập chéo tài khoản vào buckets và objects bằng Amazon Simple Storage Service (Amazon S3). Bạn có thể lấy canonical user ID cho tài khoản AWS của mình với tư cách là người dùng root hoặc người dùng IAM. Bạn phải được xác thực với AWS để xem các định danh này.  Cảnh báo Không cung cấp thông tin xác thực AWS của bạn (bao gồm mật khẩu và access keys) cho bên thứ ba cần định danh tài khoản AWS của bạn để chia sẻ tài nguyên AWS với bạn. Làm như vậy sẽ cấp cho họ quyền truy cập tương tự vào tài khoản AWS như bạn có.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/",
	"title": "Workshop DynamoDB Advanced Patterns",
	"tags": [],
	"description": "",
	"content": "DynamoDB Advanced Patterns Xây dựng Kiến trúc Đa Vùng với Global Tables và Streams Tổng quan Trong workshop toàn diện này, bạn sẽ xây dựng một Nền tảng E-commerce Đa Vùng sử dụng DynamoDB Advanced Patterns và AWS Free Tier. Bạn sẽ học Single Table Design, triển khai Global Tables cho replication đa vùng, và xây dựng real-time stream processing với Lambda. Cuối cùng, chúng ta sẽ triển khai các chiến lược monitoring và optimization toàn diện trong khi duy trì kiểm soát chi phí nghiêm ngặt trong giới hạn Free Tier.\nSingle Table Design Single Table Design là một phương pháp modeling DynamoDB nơi bạn lưu trữ nhiều loại entity trong một bảng sử dụng composite keys. Pattern này tối ưu cho hiệu suất và chi phí bằng cách giảm số lượng requests và tận dụng kiến trúc partition-based của DynamoDB. Khi triển khai đúng cách, nó cung cấp hiệu suất truy vấn sub-millisecond trong khi giảm thiểu tiêu thụ capacity.\nNhư một best practice, hãy thiết kế access patterns của bạn trước khi tạo table structure. Single Table Design yêu cầu lập kế hoạch cẩn thận cho partition keys (PK) và sort keys (SK) để hỗ trợ tất cả query patterns của bạn một cách hiệu quả. Workshop này sử dụng một mô hình dữ liệu e-commerce đã được chứng minh hỗ trợ 6 access patterns được tối ưu trong khi ở trong giới hạn Free Tier.\n\rGlobal Tables Đa Vùng Global Tables cung cấp replication database đa vùng, multi-active được quản lý hoàn toàn. Dữ liệu được ghi vào bất kỳ vùng nào sẽ được tự động replicate đến tất cả các vùng khác trong vài giây. Điều này cho phép bạn xây dựng các ứng dụng phân tán toàn cầu với truy cập read và write local, cải thiện hiệu suất và cung cấp khả năng disaster recovery.\nDynamoDB Streams \u0026amp; Lambda DynamoDB Streams capture các events modification dữ liệu trong table của bạn trong thời gian gần thực. Khi kết hợp với AWS Lambda, bạn có thể xây dựng kiến trúc event-driven tự động xử lý thay đổi, update derived data, gửi notifications, hoặc trigger business workflows. Pattern này rất quan trọng để xây dựng các ứng dụng reactive, scalable.\nGlobal Secondary Indexes (GSI) Global Secondary Indexes cho phép bạn query dữ liệu của mình sử dụng các access patterns khác với main table. GSIs có partition và sort keys riêng, cho phép các truy vấn hiệu quả qua các dimensions khác nhau của dữ liệu bạn. Thiết kế GSI đúng cách là crucial cho optimization hiệu suất và kiểm soát chi phí.\nMonitoring \u0026amp; Cost Optimization CloudWatch monitoring cung cấp visibility thời gian thực vào hiệu suất DynamoDB, capacity utilization, và costs. Kết hợp với billing alerts và Free Tier tracking, bạn có thể đảm bảo hiệu suất tối ưu trong khi duy trì kiểm soát chi phí nghiêm ngặt. Workshop này triển khai comprehensive monitoring dashboards và automated alerting.\nNội dung Chính  Thiết lập \u0026amp; Triển khai Hạ tầng Triển khai Single Table Design Thiết lập Global Tables Đa Vùng DynamoDB Streams \u0026amp; Lambda Processing Monitoring \u0026amp; Performance Optimization Advanced Patterns Dọn dẹp \u0026amp; Quản lý Tài nguyên  "
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/",
	"title": "2. Triển khai Single Table Design",
	"tags": [],
	"description": "",
	"content": "Triển khai Single Table Design 📊 Học cách triển khai các mẫu Single Table Design của DynamoDB để tối ưu hiệu suất và hiệu quả chi phí\nTổng quan  Single Table Design là một phương pháp cách mạng trong việc mô hình hóa dữ liệu trong DynamoDB. Thay vì sử dụng nhiều bảng như trong cơ sở dữ liệu quan hệ, chúng ta lưu trữ tất cả các loại entity (Users, Products, Orders) trong một bảng sử dụng composite keys cho các mối quan hệ.  Tại sao Single Table Design? Vấn đề của Phương pháp Quan hệ Truyền thống:  Nhiều bảng = Nhiều truy vấn = Độ trễ cao hơn JOINs rất tốn kém và không có sẵn trong DynamoDB Hiệu suất không nhất quán qua các mẫu truy vấn khác nhau Chi phí cao hơn từ việc quản lý nhiều bảng  Lợi ích DynamoDB Single Table:  Truy vấn đơn lấy dữ liệu liên quan Hiệu suất nhất quán qua tất cả các mẫu truy cập Chi phí thấp hơn với ít bảng và operations hơn Giao dịch atomic qua các loại entity  Mục tiêu Học tập Sau khi hoàn thành module này, bạn sẽ:  ✅ Hiểu các nguyên tắc và lợi ích của Single Table Design ✅ Thiết kế composite keys (PK + SK) cho nhiều loại entity ✅ Tạo và truy vấn dữ liệu sử dụng DynamoDB Console ✅ Triển khai Global Secondary Indexes (GSI) cho các mẫu truy cập linh hoạt ✅ Phân tích metrics hiệu suất và chi phí  Thời lượng Module: 90 phút  Lý thuyết: 20 phút - Khái niệm và nguyên tắc cốt lõi Demo: 25 phút - Điều hướng Console và tạo dữ liệu Thực hành: 35 phút - Tạo dữ liệu e-commerce của riêng bạn Ôn tập: 10 phút - Phân tích hiệu suất và Q\u0026amp;A  Tổng quan Mô hình Dữ liệu E-commerce Chúng ta sẽ xây dựng một nền tảng e-commerce đơn giản với các entity này:    PK SK Entity Data     USER#user1 PROFILE User name, email, phone   USER#user1 ORDER#ord1 Order status, total, date   PRODUCT#p1 DETAILS Product name, price, category   ORDER#ord1 ITEM#p1 OrderItem quantity, price, product    Các Mẫu Truy cập Chúng ta sẽ Triển khai    Mẫu Mô tả Phương pháp Truy vấn     1 Lấy user profile PK = USER#id, SK = PROFILE   2 Lấy orders của user PK = USER#id, SK begins_with ORDER#   3 Lấy chi tiết order với items PK = ORDER#id   4 Lấy products theo category GSI1: CATEGORY# queries   5 Lấy products theo price range GSI2: PRICE# queries   6 Lấy orders theo status GSI2: STATUS# queries    Khái niệm Chính Chiến lược Composite Keys  Partition Key (PK): Nhóm các items liên quan với nhau Sort Key (SK): Cho phép range queries và relationships GSI Keys: Cho phép các mẫu truy vấn bổ sung  Entity Namespacing  USER#: Tất cả dữ liệu liên quan đến user PRODUCT#: Tất cả dữ liệu liên quan đến product ORDER#: Tất cả dữ liệu liên quan đến order CATEGORY#: Nhóm products STATUS#: Nhóm trạng thái orders  Triết lý Thiết kế: Trong Single Table Design, chúng ta mô hình hóa cấu trúc bảng dựa trên CÁCH chúng ta sẽ truy vấn dữ liệu, không phải cách chúng ta sẽ lưu trữ nó. Điều này ngược lại với thiết kế cơ sở dữ liệu quan hệ!\n\rNhững gì Bạn sẽ Xây dựng Đến cuối module này, bạn sẽ đã tạo:  User profiles với cấu trúc key phù hợp Product catalog với category và price indexing Order management với item relationships Truy vấn hiệu quả sử dụng table và GSI patterns Performance insights từ CloudWatch metrics  An toàn Chi phí: Tất cả bài tập sử dụng dữ liệu tối thiểu và nằm trong giới hạn AWS Free Tier. Giám sát CloudWatch dashboard để theo dõi usage.\n\rĐiều kiện Tiên quyết Trước khi bắt đầu module này, đảm bảo bạn có:  Đã hoàn thành Module 1: Infrastructure Setup DynamoDB table demo-ecommerce-freetier đang Active Quyền truy cập AWS Console với DynamoDB permissions Hiểu biết cơ bản về các khái niệm NoSQL  Sẵn sàng cách mạng hóa phương pháp data modeling của bạn? Hãy khám phá Single Table Design!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/",
	"title": "3. Global Tables Multi-Region Setup",
	"tags": [],
	"description": "",
	"content": "Global Tables Multi-Region Setup 🌍 Thiết lập DynamoDB đa vùng cho truy cập toàn cầu\nTổng quan Global Tables biến đổi DynamoDB table đơn vùng của bạn thành cơ sở dữ liệu phân tán toàn cầu phục vụ người dùng trên toàn thế giới với độ trễ thấp.\nTại sao Global Tables? Vấn đề  Độ trễ cao: Người dùng xa database phải chờ lâu Không có Disaster Recovery: Điểm lỗi đơn Khả năng mở rộng hạn chế: Tất cả traffic qua một vùng  Giải pháp Trước: Chỉ US-EAST-1 → Độ trễ cao cho người dùng EU Sau: US-EAST-1 + EU-WEST-1 → Độ trễ thấp toàn cầu Bạn sẽ học gì  Xác minh Global Setup: Kiểm tra cấu hình đa vùng Test Replication: Ghi ở vùng này, đọc ở vùng khác Multi-Region Operations: Xử lý dữ liệu toàn cầu  Lợi ích chính  Độ trễ dưới 10ms cho người dùng toàn cầu Sao chép tự động giữa các vùng (0.5-2 giây) Free Tier friendly: Áp dụng cho mỗi vùng Disaster recovery tích hợp  Cơ bản về Global Tables Luồng sao chép 1. Ghi vào US-EAST-1 → ORDER#12345 được tạo 2. DynamoDB Streams ghi nhận thay đổi 3. Tự động sao chép sang EU-WEST-1 4. ORDER#12345 có sẵn ở Europe (1-2 giây) Tính năng chính  Hai chiều: Đọc/ghi từ bất kỳ vùng nào Eventually Consistent: Thay đổi đồng bộ trong vài giây Conflict Resolution: Last Writer Wins Zero downtime: Chuyển đổi vùng tự động  Nội dung Module  Global Tables Overview - Hiểu kiến trúc Verify Global Setup - Kiểm tra cấu hình Multi-Region Operations - Test chức năng đa vùng  Thiết lập: CloudFormation deployment của bạn đã cấu hình Global Tables giữa US-East-1 và EU-West-1.\n\r\r3.1 Tổng quan Global Tables\r\r\r3.2 Xác minh Global Setup\r\r\r3.3 Hoạt động Đa Vùng\r\r\rHãy làm cho DynamoDB table của bạn có thể truy cập toàn cầu!\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/",
	"title": "4. Streams &amp; Lambda Processing",
	"tags": [],
	"description": "",
	"content": "DynamoDB Streams \u0026amp; Lambda Processing ⚡ Thiết lập xử lý sự kiện thời gian thực cho bảng DynamoDB của bạn\nTổng quan Module Tìm hiểu cách ghi lại và xử lý các thay đổi dữ liệu trong thời gian thực bằng cách sử dụng DynamoDB Streams và AWS Lambda.\nBạn sẽ học được gì  Bật Streams: Bật theo dõi thay đổi cho bảng của bạn Tạo Lambda: Xây dựng một hàm để xử lý sự kiện Kiểm tra xử lý: Xem các sự kiện được kích hoạt trong thời gian thực  Kiến trúc đơn giản Lợi ích chính  Thời gian thực: Xử lý thay đổi ngay lập tức Tự động: Không cần polling Mở rộng: Lambda xử lý đồng thời Hiệu quả chi phí: Chỉ trả tiền cho thời gian sử dụng  Nội dung Module  Cấu hình Stream - Bật streams trên bảng của bạn Thiết lập hàm Lambda - Tạo và kết nối Lambda  Free Tier: Lambda cung cấp 1 triệu yêu cầu miễn phí mỗi tháng. Demo này sử dụng tài nguyên tối thiểu.\n\r\r4.1 Stream Configuration\r\r\r4.2 Lambda Function Setup\r\r\rHãy thêm xử lý thời gian thực vào bảng DynamoDB của bạn. Xử lý thời gian thực\n Xử lý thay đổi dữ liệu trong vòng 100-500 mili giây Không cần polling - các sự kiện được đẩy tự động Mở rộng đến hàng triệu sự kiện mỗi giây  Kiến trúc hướng sự kiện\n Tách biệt lưu trữ dữ liệu khỏi logic nghiệp vụ Kích hoạt nhiều hệ thống hạ nguồn Xây dựng các ứng dụng phản ứng nhanh, đáp ứng  Hiệu quả chi phí\n Chỉ trả tiền cho thời gian xử lý thực tế AWS Free Tier bao gồm 1 triệu lần gọi Lambda Không cần quản lý cơ sở hạ tầng  Các trường hợp sử dụng phổ biến    Mẫu Kích hoạt Hành động     Audit Trail Bất kỳ thay đổi nào Ghi nhật ký vào S3/CloudWatch   Cache Invalidation Cập nhật mục Xóa Redis/ElastiCache   Notifications Đơn hàng được tạo Gửi email/SMS   Analytics Hoạt động người dùng Cập nhật bảng điều khiển số liệu   Search Index Thay đổi sản phẩm Cập nhật Elasticsearch   Workflow Thay đổi trạng thái Kích hoạt Step Functions    Mẫu xử lý Stream Mẫu Fan-out: Một thay đổi kích hoạt nhiều hàm Lambda\nDynamoDB Change → Stream → Lambda 1 (Email)\r→ Lambda 2 (Analytics) → Lambda 3 (Cache Update)\rMẫu Pipeline: Xử lý tuần tự qua nhiều giai đoạn\nOrder Created → Validate → Process Payment → Update Inventory → Ship\rMẫu Aggregation: Kết hợp nhiều thay đổi thành các bản tóm tắt\nSales Records → Real-time Revenue Dashboard\rUser Actions → Activity Analytics\rĐặc điểm hiệu suất  Độ trễ: Thường từ 100-500ms từ thay đổi đến xử lý Thông lượng: Tự động mở rộng với khối lượng dữ liệu của bạn Độ tin cậy: Tự động thử lại và xử lý lỗi Thứ tự: Các thay đổi được xử lý theo thứ tự cho mỗi mục Lưu giữ: Bản ghi stream có sẵn trong 24 giờ  Cấu trúc Module Module này được tổ chức thành các phần thực hành xây dựng dựa trên nhau:\n Cấu hình Stream - Bật và cấu hình DynamoDB Streams Thiết lập hàm Lambda - Tạo và triển khai các hàm xử lý stream Thực hành xử lý sự kiện - Kiểm tra với các thay đổi dữ liệu thực tế Giám sát \u0026amp; Gỡ lỗi - Theo dõi hiệu suất và khắc phục sự cố  Mỗi phần bao gồm:\n ✅ Hướng dẫn từng bước trên AWS Console ✅ Ví dụ mã và mẫu ✅ Chỗ dành sẵn cho ảnh chụp màn hình trong tài liệu ✅ Hướng dẫn khắc phục sự cố ✅ Kịch bản thực tế  Điều kiện tiên quyết Trước khi bắt đầu module này, hãy đảm bảo bạn đã:\n ✅ Hoàn thành Module 1 (thiết lập bảng DynamoDB) ✅ Hiểu cơ bản về AWS Lambda ✅ Quen thuộc với JSON và các khái niệm hướng sự kiện ✅ Truy cập AWS Console với quyền phù hợp  Mục tiêu học tập Sau khi hoàn thành module này, bạn sẽ:\n Hiểu kiến trúc DynamoDB Streams và luồng sự kiện Cấu hình các hàm Lambda để xử lý sự kiện stream Triển khai các mẫu hướng sự kiện phổ biến Giám sát hiệu suất xử lý stream Gỡ lỗi các vấn đề xử lý stream Thiết kế các ứng dụng hướng sự kiện có khả năng mở rộng  "
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/",
	"title": "5. Giám Sát &amp; Tối Ưu Hóa",
	"tags": [],
	"description": "",
	"content": "Giám Sát \u0026amp; Tối Ưu Hóa 📈 Giám sát và tối ưu hóa chi phí cho workshop DynamoDB của bạn\nTổng Quan Module Học cách giám sát bảng DynamoDB của bạn và duy trì trong giới hạn Free Tier với các bảng điều khiển CloudWatch thực tế và theo dõi chi phí.\nNhững Gì Bạn Sẽ Học  Bảng Điều Khiển CloudWatch: Tạo một giao diện giám sát cho bảng của bạn Theo Dõi Chi Phí: Giám sát việc sử dụng Free Tier để tránh chi phí Cảnh Báo Cơ Bản: Thiết lập các cảnh báo đơn giản cho giới hạn dung lượng  Các Chỉ Số Quan Trọng Cần Giám Sát    Chỉ Số Giới Hạn Free Tier Cần Theo Dõi     Dung Lượng Đọc 25 RCU Giữ mức sử dụng dưới 20 RCU   Dung Lượng Ghi 25 WCU Giữ mức sử dụng dưới 20 WCU   Lưu Trữ 25 GB Theo dõi sự tăng trưởng dữ liệu    Giám Sát Free Tier Duy trì trong giới hạn với các kiểm tra đơn giản này:\n✅ Bảng điều khiển hiển thị các chỉ số màu xanh\r✅ Lưu trữ dưới 20 GB\r✅ Sử dụng RCU/WCU dưới 80%\r✅ Bảng điều khiển billing hiển thị $0.00\rNội Dung Module  Bảng Điều Khiển CloudWatch - Tạo giao diện giám sát Phân Tích Chi Phí - Theo dõi việc sử dụng Free Tier  Tập Trung: Module này chỉ bao gồm các giám sát cần thiết cho workshop. Các mẫu nâng cao được đề cập riêng.\n\r\r5.1 Giám sát cơ bản với CloudWatch\r\r\r5.2 Phân Tích Chi Phí \u0026amp; Tối Ưu Hóa\r\r\rHãy thiết lập giám sát cơ bản để giữ cho workshop của bạn hoạt động trơn tru và không tốn phí.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/",
	"title": "6. Các Mẫu Nâng Cao",
	"tags": [],
	"description": "",
	"content": "Các Mẫu Nâng Cao DynamoDB 🚀 Học các kỹ thuật chính của DynamoDB để cải thiện hiệu suất\nTổng quan về Module Nắm vững các mẫu DynamoDB thiết yếu để cải thiện hiệu suất và ngăn ngừa các vấn đề phổ biến trong ứng dụng của bạn.\nNhững Gì Bạn Sẽ Học  Thao Tác Theo Lô: Xử lý nhiều mục một cách hiệu quả Cập Nhật Có Điều Kiện: Ngăn ngừa xung đột dữ liệu và điều kiện đua  Lợi Ích Chính  Hiệu Suất Tốt Hơn: Giảm số lượng API gọi và độ trễ An Toàn Dữ Liệu: Ngăn ngừa bán quá mức và hỏng dữ liệu Thân Thiện Với Gói Miễn Phí: Tối đa hóa giá trị trong giới hạn  Các Mẫu Cốt Lõi 1. Thao Tác Theo Lô Xử lý nhiều mục trong các lần gọi API đơn lẻ: ❌ Đơn lẻ: 100 lần gọi API riêng biệt ✅ Theo lô: 4 lần gọi API (25 mục mỗi lần) 2. Cập Nhật Có Điều Kiện Ngăn ngừa điều kiện đua: ❌ Không có điều kiện: Hai người dùng mua mục cuối cùng ✅ Có điều kiện: Chỉ người dùng đầu tiên thành công Nội Dung Module  Thao Tác Theo Lô - Xử lý nhiều mục hiệu quả Cập Nhật Có Điều Kiện - Các mẫu sửa đổi dữ liệu an toàn  Tập Trung: Các mẫu này là cần thiết cho bất kỳ ứng dụng DynamoDB nào trong môi trường sản xuất.\n\r\r6.1 Thao Tác Hàng Loạt\r\r\r6.2 Cập Nhật Có Điều Kiện\r\r\rHãy triển khai các mẫu nâng cao để có các ứng dụng DynamoDB tốt hơn.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/7-cleanup-resources/",
	"title": "7. Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp Tài nguyên Trong phần này, bạn sẽ học cách dọn dẹp tài nguyên trên AWS Cloud để tránh phát sinh chi phí không cần thiết.\nTại sao Dọn dẹp quan trọng  Kiểm soát Chi phí: Ngăn chặn các khoản phí AWS không mong muốn Quản lý Tài nguyên: Loại bỏ hạ tầng không sử dụng Best Practices: Học quản lý lifecycle tài nguyên đúng cách  1. Xóa DynamoDB Table được tạo trong Lab  Truy cập DynamoDB Management Console Trên thanh điều hướng bên trái, chọn Tables Chọn DynamoDB table demo-ecommerce-freetier liên quan đến lab Nhấp vào Actions Chọn Delete table Nhập tên table để xác nhận Xác nhận bằng cách nhấp Delete  2. Xóa CloudWatch Resources được tạo trong Lab  Truy cập CloudWatch Management Console Trên thanh điều hướng bên trái, đi đến Dashboards Chọn tất cả dashboards liên quan đến lab Nhấp vào Actions Chọn Delete dashboards Xác nhận xóa bằng cách nhấp Delete Trên thanh điều hướng bên trái, đi đến Alarms Chọn tất cả alarms liên quan đến lab Nhấp vào Actions Chọn Delete Xác nhận xóa bằng cách nhấp Delete  3. Xóa Lambda Functions (nếu đã tạo)  Truy cập Lambda Management Console Trên thanh điều hướng bên trái, điều hướng đến Functions Chọn các Lambda functions liên quan đến lab Nhấp vào Actions Chọn Delete function Xác nhận bằng cách nhấp Delete  4. Xóa SNS Topics (nếu đã tạo)  Truy cập SNS Management Console Trên thanh điều hướng bên trái, chọn Topics Chọn tất cả SNS topics liên quan đến lab Nhấp vào Actions Chọn Delete Nhập \u0026ldquo;delete me\u0026rdquo; để xác nhận Xác nhận xóa bằng cách nhấp Delete  5. Xác minh Billing và Chi phí  Truy cập Billing and Cost Management Console Kiểm tra các khoản phí tháng hiện tại Xác minh rằng tất cả các khoản phí hiển thị $0.00 Xác nhận không có dịch vụ nào đang chạy không mong muốn  Xác minh Cuối cùng ✅ Checklist Dọn dẹp:\n DynamoDB table đã xóa CloudWatch dashboards và alarms đã loại bỏ Lambda functions đã xóa (nếu có) SNS topics đã xóa (nếu có) Billing hiển thị $0.00 charges   Chúc mừng! Bạn đã hoàn thành thành công workshop DynamoDB Advanced Patterns và dọn dẹp tất cả tài nguyên.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.1-aws-freetier-overview/",
	"title": "1.1 Tổng quan AWS Free Tier",
	"tags": [],
	"description": "",
	"content": "Tổng quan AWS Free Tier 🆓 Hiểu giới hạn AWS Free Tier và đảm bảo trải nghiệm workshop không mất phí\nAWS Free Tier là gì? AWS Free Tier cung cấp cho khách hàng mới quyền truy cập vào các dịch vụ AWS miễn phí trong thời gian giới hạn. Nó bao gồm ba loại gói:\n1. Miễn phí 12 Tháng Có sẵn trong 12 tháng sau ngày đăng ký AWS của bạn:\n Amazon DynamoDB: 25 GB storage, 25 WCU, 25 RCU AWS Lambda: 1 triệu requests mỗi tháng Amazon CloudWatch: 10 metrics, 10 alarms, 1 triệu API requests  2. Luôn Miễn phí Có sẵn cho tất cả khách hàng AWS vô thời hạn:\n DynamoDB: 25 GB storage (luôn miễn phí) Lambda: 1 triệu requests, 400,000 GB-seconds compute time CloudWatch: 10 custom metrics và 10 alarms  3. Trials Truy cập miễn phí ngắn hạn vào một số dịch vụ nhất định\nGiới hạn Free Tier cho Workshop này    Dịch vụ Free Tier Sử dụng An toàn %     DynamoDB RCU 25 units 15 units 60%   DynamoDB WCU 25 units 15 units 60%   DynamoDB Storage 25 GB \u0026lt;1 GB 4%   Lambda Requests 1M/tháng ~100/ngày 0.3%   Lambda Duration 400K GB-sec \u0026lt;1K GB-sec 0.25%   CloudWatch 10 metrics 6 metrics 60%   Data Transfer 1 GB \u0026lt;100 MB 10%    Tổng Sử dụng Free Tier: ~50% = 100% AN TOÀN! 🛡️\nBảo vệ Chi phí: Chúng ta chỉ sử dụng 50% giới hạn Free Tier có sẵn, đảm bảo không có phí phát sinh trong suốt workshop.\n\rCân nhắc về Vùng Vùng Chính: US East (N. Virginia)  Tại sao được chọn: Giới hạn Free Tier cao nhất DynamoDB: Đầy đủ 25 RCU/WCU có sẵn Lambda: Đầy đủ 1M requests có sẵn Tốt nhất cho: Workloads chính và testing  Vùng Phụ: EU West (Ireland)  Mục đích: Sao chép Global Tables Free Tier: Giới hạn giống vùng chính Sử dụng: Tối thiểu (chỉ replica table) Tác động chi phí: Gần như bằng không  Giám sát Sử dụng Free Tier AWS Billing Dashboard  Điều hướng đến: AWS Console → Billing \u0026amp; Cost Management Free Tier usage: Theo dõi tiêu thụ hiện tại Alerts: Thiết lập khi tiến gần 80% giới hạn Forecasting: Dự đoán sử dụng hàng tháng  CloudWatch Billing Alarms Cảnh báo tự động khi:\n DynamoDB consumed units \u0026gt; 20 (80% giới hạn) Lambda invocations \u0026gt; 800K/tháng (80% giới hạn) Tổng ước tính phí \u0026gt; $1.00  Thực hành Tốt nhất Free Tier 1. Giám sát Thường xuyên  Kiểm tra Free Tier dashboard hàng ngày trong workshop Thiết lập cảnh báo billing trước khi triển khai Giám sát sử dụng tài nguyên trong CloudWatch  2. Sử dụng Capacity Thích hợp DynamoDB Provisioned Capacity: - Read Capacity Units (RCU): 5 (dưới giới hạn 25) - Write Capacity Units (WCU): 5 (dưới giới hạn 25) - On-Demand: KHÔNG khuyến nghị (có thể vượt Free Tier) 3. Dọn dẹp Tài nguyên  Xóa test data thường xuyên Loại bỏ Lambda functions không sử dụng Dọn dẹp CloudWatch logs cũ hơn 7 ngày  Những Bẫy Free Tier Thường gặp cần Tránh Tránh Những Lỗi Này:\n On-Demand DynamoDB: Có thể nhanh chóng vượt Free Tier Nhiều Vùng: Triển khai cùng tài nguyên trong \u0026gt;2 vùng Tập Dữ liệu Lớn: Upload \u0026gt;25GB vào DynamoDB Quên Dọn dẹp: Để tài nguyên chạy quá workshop  \rLỗi #1: Provisioned vs On-Demand ❌ SAI: DynamoDB On-Demand - Trả tiền theo request (có thể đắt) - Chi phí không dự đoán được - Không có bảo vệ Free Tier ✅ ĐÚNG: DynamoDB Provisioned - Capacity units cố định - Chi phí dự đoán được - Được bảo vệ bởi giới hạn Free Tier Lỗi #2: Nhân Tài nguyên ❌ SAI: Triển khai đến 5 vùng - 5x tiêu thụ tài nguyên - 5x sử dụng Free Tier - Có khả năng vượt giới hạn ✅ ĐÚNG: Triển khai tối đa 2 vùng - Sử dụng tài nguyên tối thiểu - Trong giới hạn Free Tier - Duy trì tính khả dụng toàn cầu Quy trình Khẩn cấp Nếu Bạn Thấy Phí Xuất hiện  DỪNG NGAY LẬP TỨC: Tạm dừng tất cả hoạt động workshop Kiểm tra Billing Dashboard: Xác định nguồn phí Xem lại Tài nguyên: Liệt kê tất cả tài nguyên đang hoạt động Liên hệ Support: Sử dụng hỗ trợ AWS Free Tier nếu cần Xóa Tài nguyên: Loại bỏ bất cứ thứ gì ngoài phạm vi workshop  Lệnh Audit Tài nguyên Nhanh # Liệt kê tất cả DynamoDB tables aws dynamodb list-tables --region us-east-1 # Liệt kê tất cả Lambda functions  aws lambda list-functions --region us-east-1 # Kiểm tra CloudFormation stacks aws cloudformation list-stacks --region us-east-1 Checklist Trước Workshop Trước khi bắt đầu triển khai hạ tầng:\n Tài khoản AWS được tạo và xác minh Tính đủ điều kiện Free Tier được xác nhận (tài khoản \u0026lt;12 tháng tuổi) Cảnh báo billing được cấu hình Free Tier dashboard được bookmark Thông tin liên hệ khẩn cấp sẵn sàng Hiểu biết về giới hạn tài nguyên được xác nhận  Sẵn sàng Tiếp tục: Sau khi bạn đã xem xét giới hạn Free Tier và hiểu các biện pháp an toàn, hãy tiến hành Tổng quan Kiến trúc để hiểu những gì chúng ta sẽ xây dựng.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.2-architecture-overview/",
	"title": "1.2 Tổng quan Kiến trúc",
	"tags": [],
	"description": "",
	"content": "Tổng quan Kiến trúc 🏗️ Hiểu về hạ tầng hoàn chỉnh chúng ta sẽ triển khai cho workshop DynamoDB\nKiến trúc Cấp cao Hạ tầng workshop của chúng ta trải rộng hai vùng AWS để minh họa chức năng Global Tables trong khi duy trì tuân thủ Free Tier.\nCác Thành phần Cốt lõi 1. DynamoDB Global Table Bảng Chính (US-East-1):\n Tên Bảng: demo-ecommerce-freetier Partition Key: PK (String) Sort Key: SK (String) Capacity: 5 RCU / 5 WCU (Provisioned) Streams: Enabled (NEW_AND_OLD_IMAGES) Point-in-time Recovery: Enabled  Bảng Replica (EU-West-1):\n Synchronized: Sao chép tự động Read Capacity: 5 RCU Eventual Consistency: Chéo vùng Local Reads: Độ trễ thấp cho người dùng EU  2. Lambda Stream Processor Cấu hình Function:\nRuntime: Python 3.9 Memory: 128 MB (Tối ưu Free Tier) Timeout: 30 seconds Environment: Demo Trigger: DynamoDB Streams Logic Xử lý:\n Stream Records: Xử lý các sự kiện INSERT, MODIFY, REMOVE Data Validation: Đảm bảo tính toàn vẹn dữ liệu Audit Logging: Theo dõi tất cả thay đổi Error Handling: Dead letter queue cho records thất bại  3. CloudWatch Monitoring Thành phần Dashboard:\n DynamoDB Metrics: Sử dụng Read/Write capacity Lambda Metrics: Số lần gọi, thời lượng, lỗi Cost Tracking: Sử dụng Free Tier thời gian thực Performance: Metrics độ trễ và throughput  Billing Alarms:\n Cảnh báo ở $1.00: Hệ thống cảnh báo sớm Cảnh báo ở 80% Free Tier: Giám sát sử dụng Email Notifications: Nhận thức ngay lập tức  Kiến trúc Data Model Mẫu Single Table Design Nền tảng thương mại điện tử của chúng ta sử dụng một bảng DynamoDB duy nhất với nhiều loại entity:\n   Loại Entity Partition Key Sort Key Mục đích     User Profile USER#id PROFILE User metadata   User Addresses USER#id ADDRESS#id Thông tin ship   Product PRODUCT#id DETAILS Danh mục sản phẩm   Product Reviews PRODUCT#id REVIEW#user_id Đánh giá khách   Order Header ORDER#id DETAILS Order metadata   Order Items ORDER#id ITEM#product_id Nội dung order   Category CATEGORY#id DETAILS Nhóm sản phẩm    Access Patterns  Get User Profile: PK=USER#123, SK=PROFILE Get User\u0026rsquo;s Orders: PK=USER#123, SK begins_with ORDER# Get Product Details: PK=PRODUCT#456, SK=DETAILS Get Order with Items: PK=ORDER#789, SK begins_with ITEM# Get Product Reviews: PK=PRODUCT#456, SK begins_with REVIEW#  Kiến trúc Bảo mật IAM Roles và Policies Lambda Execution Role:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:DescribeStream\u0026#34;, \u0026#34;dynamodb:GetRecords\u0026#34;, \u0026#34;dynamodb:GetShardIterator\u0026#34;, \u0026#34;dynamodb:ListStreams\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:*:*:table/demo-ecommerce-freetier/stream/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; } ] } Nguyên tắc Least Privilege:\n Lambda: Chỉ quyền đọc stream CloudWatch: Chỉ quyền ghi metrics và logs DynamoDB: Truy cập chỉ định bảng  Kiến trúc Network Chiến lược Triển khai Vùng Vùng Chính (US-East-1):\n Availability: 99.99% SLA Latency: \u0026lt;10ms cho người dùng US Capacity: Hoạt động đọc/ghi đầy đủ Backup: Point-in-time recovery  Vùng Phụ (EU-West-1):\n Availability: 99.99% SLA (độc lập) Latency: \u0026lt;10ms cho người dùng EU Capacity: Tối ưu đọc Sync: Sao chép eventually consistent  Data Flow  Write Operations: Luôn đến vùng chính Read Operations: Có thể từ bất kỳ vùng nào Replication: Đồng bộ cross-region tự động Conflict Resolution: Last-writer-wins Failover: Promotion thủ công nếu cần  Kiến trúc Chi phí Tối ưu Free Tier Chi phí DynamoDB:\nBảng Chính (US-East-1): - Provisioned RCU: 5 units (Free: 25) = $0.00 - Provisioned WCU: 5 units (Free: 25) = $0.00 - Storage: \u0026lt;1 GB (Free: 25 GB) = $0.00 Bảng Replica (EU-West-1): - Provisioned RCU: 5 units (Free: 25) = $0.00 - Cross-region replication: \u0026lt;1 GB/month = $0.00 Chi phí Lambda:\nStream Processor: - Invocations: ~100/ngày (Free: 1M/tháng) = $0.00 - Duration: 128MB × 1s × 100 = \u0026lt;1 GB-second = $0.00 Tổng Chi phí Workshop: $0.00 ✅\nCân nhắc Scalability Horizontal Scaling DynamoDB:\n Auto Scaling: Có thể bật nếu cần On-Demand: Chuyển từ provisioned Global Secondary Indexes: Thêm cho access patterns mới  Lambda:\n Concurrent Executions: Lên đến 1000 mặc định Dead Letter Queue: Xử lý failures Reserved Concurrency: Kiểm soát scaling  Tối ưu Performance Read Performance:\n Consistent Reads: Khi cần tính nhất quán dữ liệu Eventually Consistent: Cho performance tốt hơn DAX: DynamoDB Accelerator cho caching  Write Performance:\n Batch Operations: Giảm API calls Parallel Writes: Nhiều partition keys Write Sharding: Phân phối hot partitions  Monitoring và Observability Key Metrics để Monitor DynamoDB:\n Consumed Read Capacity: Target \u0026lt;80% of provisioned Consumed Write Capacity: Target \u0026lt;80% of provisioned Throttled Requests: Nên là 0 Error Rate: Target \u0026lt;1%  Lambda:\n Invocation Count: Theo dõi volume xử lý Duration: Monitor xu hướng performance Error Rate: Target \u0026lt;1% Dead Letter Queue: Monitor failed records  Chiến lược Alerting Critical Alerts:\n DynamoDB throttling events Lambda function errors Billing threshold exceeded Free Tier limit approaching  Warning Alerts:\n High capacity utilization (\u0026gt;70%) Increased error rates Performance degradation  Kiến trúc Sẵn sàng: Kiến trúc này cung cấp nền tảng production-ready để học các mẫu DynamoDB nâng cao trong khi vẫn ở trong giới hạn AWS Free Tier.\n\rCác Bước Tiếp theo Với việc hiểu kiến trúc hoàn tất, chúng ta sẽ tiến hành triển khai hạ tầng này bằng CloudFormation templates trong phần tiếp theo.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.3-cloudformation-deployment/",
	"title": "1.3 Triển khai CloudFormation",
	"tags": [],
	"description": "",
	"content": "Triển khai CloudFormation 🚀 Hướng dẫn từng bước triển khai hạ tầng AWS sử dụng Infrastructure as Code\nTổng quan Trong phần này, bạn sẽ triển khai hạ tầng workshop DynamoDB hoàn chỉnh sử dụng AWS CloudFormation. Phương pháp này đảm bảo triển khai nhất quán, có thể tái tạo và tuân theo AWS best practices.\nPrerequisites Trước khi bắt đầu triển khai, đảm bảo:\n Quyền truy cập AWS Console với administrative permissions Region đã xác minh: US East (N. Virginia) us-east-1 Trạng thái billing hiện tại: $0.00 CloudFormation template đã tải về  Tổng quan CloudFormation Template Template của chúng ta tạo các tài nguyên sau:\nHạ tầng Cốt lõi  DynamoDB Table: Single table với Global Tables enabled Lambda Function: Stream processor cho real-time events IAM Roles: Chính sách truy cập least privilege DynamoDB Streams: Cấu hình change data capture  Monitoring \u0026amp; Alerting  CloudWatch Dashboard: Hiển thị metrics thời gian thực CloudWatch Alarms: Cảnh báo dựa trên threshold Billing Alerts: Cơ chế bảo vệ chi phí  Cấu hình Bảo mật  IAM Policies: Quyền fine-grained Resource Encryption: Bảo vệ dữ liệu at rest VPC Integration: Cách ly network (tùy chọn)  Triển khai Từng bước Bước 1: Truy cập CloudFormation Service   Điều hướng đến CloudFormation\n Mở AWS Management Console Tìm kiếm \u0026ldquo;CloudFormation\u0026rdquo; hoặc tìm trong services menu Đảm bảo bạn ở region US East (N. Virginia)    Tạo New Stack\n Nhấp nút \u0026ldquo;Create stack\u0026rdquo; Chọn \u0026ldquo;With new resources (standard)\u0026rdquo;    Bước 2: Upload Template   Chọn Template Source\n Chọn \u0026ldquo;Upload a template file\u0026rdquo; Nhấp nút \u0026ldquo;Choose file\u0026rdquo; Chọn file infrastructure.yaml    Validate Template\n CloudFormation sẽ tự động validate syntax Xem lại template details nếu cần Nhấp \u0026ldquo;Next\u0026rdquo; để tiếp tục    Bước 3: Cấu hình Stack Parameters Stack Details:\nStack name: demo-dynamodb-freetier\rDescription: DynamoDB Advanced Patterns Workshop Infrastructure\rParameters:\nResource Configuration:\nReadCapacityUnits: 5\rWriteCapacityUnits: 5\rStreamViewType: NEW_AND_OLD_IMAGES\rBước 4: Cấu hình Stack Options Tags (Tùy chọn):\nWorkshop: DynamoDB-Advanced-Patterns\rEnvironment: Demo\rCostCenter: Learning\rPermissions:\n Sử dụng existing service role (nếu có) Hoặc cho phép CloudFormation tạo new role  Advanced Options:\n Giữ tất cả defaults Rollback on failure: Enabled Stack creation timeout: 10 phút  Bước 5: Review và Deploy   Review Configuration\n Xác minh tất cả parameters đúng Kiểm tra resource list khớp với expectations Xác nhận estimated costs ($0.00 cho Free Tier)    Acknowledge Capabilities\n ✅ Check: \u0026ldquo;I acknowledge that AWS CloudFormation might create IAM resources\u0026rdquo; ✅ Check: \u0026ldquo;I acknowledge that AWS CloudFormation might create IAM resources with custom names\u0026rdquo;    Create Stack\n Nhấp nút \u0026ldquo;Create stack\u0026rdquo; Deployment bắt đầu ngay lập tức    Giám sát Deployment Stack Events Tab Giám sát tiến trình deployment thời gian thực:\nTimeline Dự kiến  Tổng Thời lượng: 5-7 phút IAM Resources: 1-2 phút DynamoDB Table: 2-3 phút Lambda Function: 1-2 phút CloudWatch Components: 1-2 phút  Troubleshooting Các Vấn đề Thường gặp Vấn đề: Insufficient Permissions Triệu chứng: CREATE_FAILED cho IAM resources Giải pháp:\n Xác minh account có administrator access Kiểm tra IAM permissions cho CloudFormation Sử dụng root account nếu cần (chỉ cho workshop)  Vấn đề: Resource Limits Exceeded Triệu chứng: CREATE_FAILED cho DynamoDB hoặc Lambda Giải pháp:\n Kiểm tra Free Tier usage trong billing console Xác minh không có existing resources tiêu thụ limits Liên hệ AWS support nếu cần  Vấn đề: Region Mismatch Triệu chứng: Template validation errors Giải pháp:\n Xác minh region là us-east-1 Kiểm tra tất cả parameters phù hợp với region Khởi động lại deployment ở region đúng  Các Bước Xác minh Sau khi deployment thành công:\n Stack Status: CREATE_COMPLETE ✅ Điều hướng đến Outputs tab Ghi lại các giá trị quan trọng:  Table Name Lambda Function ARN Dashboard URL Stream ARN    Deployment Hoàn tất! Hạ tầng DynamoDB Advanced Patterns của bạn hiện đang chạy. Trong phần tiếp theo, chúng ta sẽ xác minh tất cả components hoạt động đúng.\n\rCác Bước Tiếp theo  Xác minh DynamoDB table đang active Test Lambda function deployment Kiểm tra CloudWatch dashboard Xác nhận zero billing charges Bắt đầu data modeling exercises  "
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/1-setup-infrastructure/1.4-infrastructure-verification/",
	"title": "1.4 Xác minh Hạ tầng",
	"tags": [],
	"description": "",
	"content": "Xác minh Hạ tầng ✅ Kiểm tra toàn diện để đảm bảo tất cả tài nguyên AWS được triển khai và hoạt động đúng cách\nTổng quan Sau khi triển khai CloudFormation, việc xác minh tất cả tài nguyên hoạt động đúng là rất quan trọng. Phần này cung cấp quy trình xác minh từng bước để đảm bảo hạ tầng của bạn sẵn sàng cho workshop.\nChecklist Xác minh Sử dụng checklist này để xác minh từng thành phần một cách có hệ thống:\n Trạng thái CloudFormation stack: CREATE_COMPLETE DynamoDB table: Active và có thể truy cập DynamoDB Global Tables: Replication được cấu hình Lambda function: Đã triển khai và kết nối với stream CloudWatch dashboard: Metrics hiển thị IAM roles: Permissions được cấu hình đúng Trạng thái billing: $0.00 phí Sử dụng Free Tier: Trong giới hạn  Bước 1: Xác minh CloudFormation Stack 1.1 Kiểm tra Stack Status Điều hướng đến CloudFormation:\n AWS Console → CloudFormation → Stacks Tìm stack: demo-dynamodb-freetier Status nên là: CREATE_COMPLETE ✅  Nếu status hiển thị khác:\n CREATE_IN_PROGRESS: Đợi hoàn thành CREATE_FAILED: Kiểm tra Events tab để tìm lỗi ROLLBACK_COMPLETE: Xóa và triển khai lại  1.2 Xem lại Stack Outputs Nhấp vào stack của bạn → Outputs tab:\nGhi lại các giá trị này - bạn sẽ sử dụng chúng để xác minh thêm.\nBước 2: Xác minh DynamoDB Table 2.1 Truy cập DynamoDB Console Điều hướng đến DynamoDB:\n AWS Console → Services → DynamoDB Nhấp Tables trong sidebar trái Tìm table: demo-ecommerce-freetier  2.2 Kiểm tra Table Status Table Overview:\n   Property Expected Value     Table Status Active ✅   Partition Key PK (String)   Sort Key SK (String)   Read Capacity 5 (Provisioned)   Write Capacity 5 (Provisioned)   Point-in-time Rec. Enabled   Streams Enabled (NEW_AND_OLD_IMAGES)    2.3 Xác minh Cấu hình Table Nhấp vào tên table để xem chi tiết:\nGeneral Tab:\n Table name: demo-ecommerce-freetier Primary key: PK (String), SK (String) Table status: Active Creation date: Ngày hôm nay  Capacity Tab:\n Read capacity: 5 units (Provisioned) Write capacity: 5 units (Provisioned) Auto scaling: Disabled (để an toàn Free Tier)  2.4 Kiểm tra DynamoDB Streams Exports and streams Tab:\n DynamoDB stream: Enabled ✅ Stream view type: New and old images Stream ARN: Nên khớp với CloudFormation output  Bước 3: Xác minh Global Tables Setup 3.1 Kiểm tra Cấu hình Global Tables Global Tables Tab:\n Primary region: us-east-1 (US East N. Virginia) Replica regions: eu-west-1 (Europe Ireland) Replication status: Active  3.2 Xác minh Secondary Region Chuyển đến EU-West-1:\n Đổi region trong AWS Console thành \u0026ldquo;Europe (Ireland)\u0026rdquo; Điều hướng đến DynamoDB → Tables Tìm replica table: demo-ecommerce-freetier Status nên là: Active  Replica Table Properties:\n Table status: Active Read capacity: 5 units Global table: Yes (replica) Primary region: us-east-1  Bước 4: Xác minh Lambda Function 4.1 Truy cập Lambda Console Điều hướng đến Lambda:\n Chuyển lại về US-East-1 region AWS Console → Services → Lambda Nhấp Functions trong sidebar trái Tìm function: demo-dynamodb-stream-processor  4.2 Kiểm tra Cấu hình Function Function Overview:\n   Property Expected Value     Function Name demo-dynamodb-stream-processor   Runtime Python 3.9   Memory 128 MB   Timeout 30 seconds   Handler lambda_function.lambda_handler   Last Modified Ngày hôm nay    4.3 Xác minh Stream Trigger Configuration Tab:\n Triggers: DynamoDB stream nên được liệt kê Source: demo-ecommerce-freetier table State: Enabled Batch size: 100 (default)  4.4 Test Function Permissions Permissions Tab:\n Execution role: Nên có quyền đọc DynamoDB stream Resource-based policy: Nên được cấu hình tự động  Bước 5: Xác minh CloudWatch Dashboard 5.1 Truy cập CloudWatch Console Điều hướng đến CloudWatch:\n AWS Console → Services → CloudWatch Nhấp Dashboards trong sidebar trái Tìm dashboard: demo-dynamodb-freetier-monitoring  5.2 Kiểm tra Dashboard Widgets Widgets Dự kiến:\n   Widget Description     DynamoDB RCU Read Capacity Utilization   DynamoDB WCU Write Capacity Utilization   DynamoDB Throttles Throttled Read/Write Requests   Lambda Invocations Function invocation count   Lambda Errors Function error rate   Lambda Duration Function execution duration    5.3 Xác minh Metrics Data Trạng thái Ban đầu (chưa có hoạt động):\n DynamoDB metrics: Nên hiển thị 0 consumed capacity Lambda metrics: Nên hiển thị 0 invocations Tất cả metrics: Nên hiển thị nhưng chưa có data points  Bước 6: Test Data Operations 6.1 Tạo Test Item Thêm sample data để xác minh chức năng table:\n Đi đến DynamoDB Console → Tables → demo-ecommerce-freetier Nhấp \u0026ldquo;Explore table items\u0026rdquo; Nhấp \u0026ldquo;Create item\u0026rdquo;  Test Item:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#test123\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Test User\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34; } 6.2 Xác minh Item Creation Xác nhận item xuất hiện:\n Item nên hiển thị trong table Item count nên tăng lên 1 Không nên có lỗi xuất hiện  6.3 Kiểm tra Lambda Trigger Xác minh stream processing:\n Đi đến Lambda Console Nhấp vào stream processor function Kiểm tra \u0026ldquo;Monitor\u0026rdquo; tab Nên thấy 1 invocation (từ việc tạo item)  Bước 7: Xác minh Chi phí và Free Tier 7.1 Kiểm tra Current Billing Điều hướng đến Billing:\n AWS Console → Services → Billing \u0026amp; Cost Management Current charges: Nên hiển thị $0.00 ✅ Month-to-date: Nên hiển thị $0.00 ✅  7.2 Xác minh Free Tier Usage Free Tier Dashboard:\n DynamoDB: Nên hiển thị sử dụng tối thiểu Lambda: Nên hiển thị \u0026lt;10 invocations CloudWatch: Nên hiển thị active metrics  Usage Breakdown:\n   Service Used Available % Used     DynamoDB RCU \u0026lt;1 unit 25 units \u0026lt;4%   DynamoDB WCU \u0026lt;1 unit 25 units \u0026lt;4%   DynamoDB Storage \u0026lt;0.01 GB 25 GB \u0026lt;0.1%   Lambda Requests 1 request 1M requests \u0026lt;0.001%   Lambda Duration \u0026lt;1 GB-sec 400K GB-sec \u0026lt;0.001%    Tổng Sử dụng: \u0026lt;1% giới hạn Free Tier ✅\nBước 8: Tóm tắt Xác minh Cuối cùng 8.1 Hoàn thành Verification Checklist Trạng thái Hạ tầng:\n CloudFormation: CREATE_COMPLETE DynamoDB: Active table với streams Global Tables: Replication hoạt động Lambda: Function đã triển khai và triggered CloudWatch: Dashboard có thể truy cập IAM: Permissions được cấu hình đúng Billing: $0.00 phí Test data: Được tạo và xử lý thành công  8.2 Sẵn sàng cho Module Tiếp theo Infrastructure Health Check:\n   Component Status Health     DynamoDB Table Active 🟢 Healthy   Global Tables Replicating 🟢 Healthy   Lambda Function Active 🟢 Healthy   CloudWatch Monitoring 🟢 Healthy   Cost Management $0.00 🟢 On Track    Xác minh Hạ tầng Hoàn tất: Tất cả tài nguyên đã được triển khai đúng cách và hoạt động. Bạn sẵn sàng tiến hành Module 2: Single Table Design.\n\rCác Bước Tiếp theo Với hạ tầng đã được xác minh thành công, bây giờ bạn có:\n DynamoDB table production-ready với Global Tables Lambda stream processor hoạt động đầy đủ Thiết lập monitoring và alerting hoàn chỉnh Triển khai Free Tier không mất phí  Sẵn sàng cho: Module 2: Single Table Design\nGiữ Môi trường Này: Đừng xóa các tài nguyên này - chúng ta sẽ sử dụng chúng trong suốt workshop cho các bài tập thực hành.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.1-design-principles/",
	"title": "2.1 Nguyên tắc Thiết kế",
	"tags": [],
	"description": "",
	"content": "Nguyên tắc Single Table Design 🎯 Hiểu các khái niệm cốt lõi làm cho Single Table Design mạnh mẽ\nSự Chuyển đổi Mô hình Từ Tư duy Quan hệ sang NoSQL Cơ sở dữ liệu quan hệ truyền thống tổ chức dữ liệu theo entities (các bảng riêng biệt cho Users, Products, Orders). DynamoDB tổ chức dữ liệu theo access patterns (cách bạn sẽ truy vấn dữ liệu).\nPhương pháp Quan hệ:\n   Bảng Trường     Users user_id, name, email   Products product_id, name, category   Orders order_id, user_id, status    Phương pháp Single Table:\n   PK SK Entity Additional Data     USER#user1 PROFILE User name, email, phone   USER#user1 ORDER#ord1 Order status, total, date   PRODUCT#p1 DETAILS Product name, price, stock   ORDER#ord1 ITEM#p1 OrderItem quantity, price    Nguyên tắc Cốt lõi 1. Chiến lược Composite Primary Key Partition Key (PK) + Sort Key (SK) tạo identification duy nhất cho item và cho phép relationships:\n PK: Nhóm các items liên quan với nhau (như một namespace) SK: Sắp xếp items trong một partition và tạo hierarchies Cùng nhau: Cho phép relationships 1-to-1, 1-to-many, và many-to-many  2. Entity Namespacing Sử dụng prefixes để tạo separation logic:\n   Loại Entity PK Pattern SK Pattern Mục đích     User Profile USER#user123 PROFILE Lưu trữ thông tin user   User Orders USER#user123 ORDER#order456 Liên kết orders với users   Product Details PRODUCT#prod789 DETAILS Lưu trữ thông tin product   Order Items ORDER#order456 ITEM#prod789 Liên kết products với orders    3. Thiết kế Access Pattern First Bắt đầu với các câu hỏi, sau đó thiết kế cấu trúc key:\n \u0026ldquo;Làm sao tôi lấy user profile?\u0026rdquo; → PK=USER#id, SK=PROFILE \u0026ldquo;Làm sao tôi lấy orders của user?\u0026rdquo; → PK=USER#id, SK begins_with ORDER# \u0026ldquo;Làm sao tôi lấy chi tiết order?\u0026rdquo; → PK=ORDER#id, SK begins_with ITEM# \u0026ldquo;Làm sao tôi lấy products theo category?\u0026rdquo; → Sử dụng GSI với CATEGORY# keys  Chiến lược Global Secondary Index (GSI) Khi nào Sử dụng GSIs Sử dụng GSIs khi bạn cần truy vấn dữ liệu theo attributes khác với primary key:\n Nhóm khác: Products theo category thay vì theo product ID Sắp xếp khác: Orders theo status thay vì theo user Cross-entity queries: Tất cả pending orders qua tất cả users  Thiết kế GSI Key GSI1 - Category-based queries:\n   GSI1PK GSI1SK     CATEGORY#electronics PRODUCT#prod1   CATEGORY#electronics PRODUCT#prod2   CATEGORY#books PRODUCT#prod3    GSI2 - Status/Price-based queries:\n   GSI2PK GSI2SK     STATUS#pending ORDER#order1   STATUS#shipped ORDER#order2   PRICE#100-500 PRODUCT#prod1    Lợi ích trong Thực tế Lợi ích Performance  Single Query: Lấy user profile + tất cả orders trong một query Độ trễ Dự đoán được: Thời gian phản hồi single-digit millisecond Không JOINs: Tất cả dữ liệu liên quan được retrieved cùng nhau Scaling Hiệu quả: Performance nhất quán ở bất kỳ scale nào  Lợi ích Chi phí  Ít Bảng hơn: Chi phí DynamoDB table thấp hơn Ít Operations hơn: Batch queries thay vì multiple calls Capacity Tối ưu: Utilization tốt hơn của provisioned capacity Giảm Data Transfer: Ít network overhead hơn  Lợi ích Operational  Atomic Transactions: Cập nhật các items liên quan cùng nhau Backup Đơn giản: Một bảng để backup/restore Monitoring Dễ hơn: Single table metrics để track Bảo mật Nhất quán: Một set IAM policies  Mẫu Thiết kế Chính 1. Adjacency List Pattern Lưu trữ các items liên quan cạnh nhau:\nPK=USER#user1, SK=PROFILE (Chi tiết User) PK=USER#user1, SK=ORDER#order1 (Order 1) PK=USER#user1, SK=ORDER#order2 (Order 2) 2. Hierarchical Data Pattern Sử dụng sort key để biểu diễn hierarchy:\nPK=ORDER#order1, SK=DETAILS (Order header) PK=ORDER#order1, SK=ITEM#prod1 (Order item 1) PK=ORDER#order1, SK=ITEM#prod2 (Order item 2) 3. GSI Overloading Pattern Sử dụng cùng GSI cho nhiều query patterns:\nGSI1PK=CATEGORY#electronics, GSI1SK=PRODUCT#prod1 GSI1PK=USER#user1@email.com, GSI1SK=PROFILE \rQuy tắc Thiết kế: Luôn bắt đầu với access patterns của bạn, sau đó thiết kế cấu trúc key. Đừng bắt đầu với entities!\n\rAnti-Patterns Thường gặp cần Tránh ❌ Đừng Sử dụng Scan Operations  Sai: Scan toàn bộ table để tìm items Đúng: Sử dụng Query với cấu trúc key phù hợp  ❌ Đừng Tạo Quá nhiều GSIs  Sai: Một GSI cho mỗi query pattern Đúng: Overload GSIs cho nhiều patterns  ❌ Đừng Bỏ qua Hot Partitions  Sai: Tất cả items có cùng partition key Đúng: Phân phối items qua nhiều partitions  ❌ Đừng Sử dụng Relational Patterns  Sai: Normalize dữ liệu qua nhiều items Đúng: Denormalize dữ liệu liên quan cùng nhau  Nhớ rằng: Single Table Design yêu cầu mindset shift. Hãy suy nghĩ theo access patterns, không phải entity relationships!\n\rSẵn sàng cho Implementation Bây giờ bạn đã hiểu các nguyên tắc, hãy chuyển đến AWS Console để xem những khái niệm này trong thực tế. Trong phần tiếp theo, chúng ta sẽ điều hướng DynamoDB Console và bắt đầu tạo e-commerce data model của chúng ta.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.2-console-navigation/",
	"title": "2.2 Điều hướng Console",
	"tags": [],
	"description": "",
	"content": "Điều hướng DynamoDB Console 🖥️ Hướng dẫn nhanh để điều hướng DynamoDB Console cho Single Table Design\nTruy cập Table của bạn Bước 1: Điều hướng đến DynamoDB Service  Mở AWS Console: https://console.aws.amazon.com Xác minh Region: Đảm bảo bạn đang ở US East (N. Virginia) Truy cập DynamoDB: Services → Database → DynamoDB  Bước 2: Tìm Workshop Table của bạn  Click \u0026ldquo;Tables\u0026rdquo; trong sidebar bên trái Tìm table: demo-ecommerce-freetier Xác minh Status: Phải hiển thị \u0026ldquo;Active\u0026rdquo; Click tên table để vào chi tiết table  Table Overview Dashboard Hiểu về Table Layout Khi bạn click vào table của mình, bạn sẽ thấy một số tab:\n   Tab Mục đích Bạn sẽ sử dụng để     Overview Cấu hình table Kiểm tra status, keys, capacity   Items Quản lý dữ liệu Tạo, xem, chỉnh sửa items   Metrics Dữ liệu hiệu suất Giám sát usage và costs   Indexes Quản lý GSI Xem Global Secondary Indexes   Global tables Thiết lập multi-region Kiểm tra replication status    Thông tin chính cần lưu ý Cấu hình Table:\n Tên table: demo-ecommerce-freetier Partition key: PK (String) Sort key: SK (String) Table status: Active Item count: Hiện tại là 0 (table trống)  Items Tab - Workspace dữ liệu của bạn Truy cập Items View  Click tab \u0026ldquo;Items\u0026rdquo; Xem cấu trúc table: Hiện tại trống Lưu ý các cột: PK, SK, và các attributes bổ sung  Đây là nơi bạn sẽ:\n ✅ Tạo items mới (users, products, orders) ✅ Xem dữ liệu hiện có ✅ Chỉnh sửa attributes của item ✅ Xóa items nếu cần  Giao diện tạo Items Để tạo item mới:\n Click nút \u0026ldquo;Create item\u0026rdquo; Chọn phương thức input:  Form view: Giao diện point-and-click JSON view: Chỉnh sửa JSON trực tiếp (được khuyến nghị)   Chuyển sang JSON view để nhập dữ liệu dễ dàng hơn  JSON View để nhập dữ liệu Hiểu về định dạng JSON Khi tạo items, bạn sẽ sử dụng cấu trúc JSON này:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user123\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34; } Điểm chính:\n PK và SK: Luôn luôn bắt buộc (composite primary key của bạn) Attributes bổ sung: Thêm theo nhu cầu cho từng loại entity Kiểu dữ liệu: Hỗ trợ strings, numbers, booleans, lists, maps  Giao diện Query Truy cập chức năng Query Để query table của bạn:\n Đi đến tab Items Click nút \u0026ldquo;Query\u0026rdquo; (bên cạnh Create item) Chọn loại query:  Table query: Query table chính Index query: Query GSI    Tham số Query Đối với table queries, bạn sẽ chỉ định:\n Partition key (PK): Giá trị chính xác (ví dụ: USER#user123) Sort key (SK): Điều kiện tùy chọn:  Khớp chính xác: PROFILE Bắt đầu với: ORDER# Giữa: Range queries    Điều hướng Global Secondary Index (GSI) Xem cấu hình GSI  Click tab \u0026ldquo;Indexes\u0026rdquo; Xem GSI1: Được sử dụng cho category-based queries Xem GSI2: Được sử dụng cho status/price-based queries  Cấu trúc GSI:\n GSI1: GSI1PK (Partition) + GSI1SK (Sort) GSI2: GSI2PK (Partition) + GSI2SK (Sort)  Metrics và Monitoring Kiểm tra Usage và Performance  Click tab \u0026ldquo;Metrics\u0026rdquo; Giám sát các metrics chính:  Consumed read/write capacity Throttled requests (phải là 0) Item count (tăng khi bạn thêm dữ liệu)    Tại sao điều này quan trọng:\n ✅ Duy trì trong giới hạn Free Tier ✅ Giám sát hiệu suất ✅ Phát hiện sớm các vấn đề  Tham chiếu Quick Actions Các hành động Console thường dùng    Hành động Vị trí Mục đích     Create Item Items tab → Create item Thêm dữ liệu mới   Query Table Items tab → Query Tìm kiếm theo PK/SK   View Metrics Metrics tab Giám sát hiệu suất   Check Capacity Overview tab Xác minh provisioned capacity    Console Tips Tips hiệu quả  Sử dụng JSON view để tạo item nhanh hơn Copy/paste cấu trúc item để đảm bảo tính nhất quán Sử dụng Query, không phải Scan để có hiệu suất tốt hơn Kiểm tra metrics thường xuyên để giám sát usage  Phím tắt điều hướng  Danh sách Tables: DynamoDB home → Tables Truy cập table nhanh: Bookmark URL table của bạn Chuyển region: Sử dụng region selector ở góc trên-phải Tìm kiếm service: Sử dụng Ctrl+K để truy cập service nhanh  Pro Tip: Giữ DynamoDB console mở trong tab trình duyệt riêng biệt trong suốt workshop để truy cập nhanh giữa các bài tập.\n\rSẵn sàng cho việc tạo dữ liệu Bây giờ bạn đã quen thuộc với giao diện console, bạn đã sẵn sàng bắt đầu tạo mô hình dữ liệu e-commerce của mình. Trong phần tiếp theo, chúng ta sẽ tạo users, products, và orders sử dụng các patterns bạn đã học.\nTrước khi bắt đầu: Đảm bảo bạn đang ở table đúng (demo-ecommerce-freetier) và hiểu sự khác biệt giữa các thao tác Query và Scan.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.3-create-data-items/",
	"title": "2.3 Tạo Data Items",
	"tags": [],
	"description": "",
	"content": "Tạo Data Items 📝 Hướng dẫn từng bước để tạo dữ liệu e-commerce sử dụng Single Table Design patterns\nTổng quan Trong phần này, bạn sẽ tạo các entity cốt lõi cho nền tảng e-commerce của chúng ta: Users, Products, Orders, và Order Items. Mỗi loại entity tuân theo các key patterns cụ thể để cho phép querying hiệu quả.\nCác loại Entity chúng ta sẽ tạo    Entity PK Pattern SK Pattern Mục đích     User Profile USER#userID PROFILE Lưu trữ thông tin khách hàng   Product PRODUCT#productID DETAILS Lưu trữ catalog sản phẩm   Order USER#userID ORDER#orderID Liên kết orders với customers   Order Item ORDER#orderID ITEM#productID Liên kết products với orders    Bước 1: Tạo User Profile Truy cập Item Creation  Navigate to: DynamoDB → Tables → demo-ecommerce-freetier Click: \u0026ldquo;Items\u0026rdquo; tab Click: \u0026ldquo;Create item\u0026rdquo; button Switch to: JSON view  User Profile JSON Template Copy và paste template này, sau đó chỉnh sửa với thông tin của bạn:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#john.doe@email.com\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;user001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john.doe@email.com\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;+1-555-0123\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Seattle\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;WA\u0026#34;, \u0026#34;zip\u0026#34;: \u0026#34;98101\u0026#34; }, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Giải thích Key Patterns:\n PK: USER#user001 - Nhóm tất cả dữ liệu user lại với nhau SK: PROFILE - Xác định đây là record profile của user GSI1PK: USER#john.doe@email.com - Cho phép lookups dựa trên email GSI1SK: PROFILE - Duy trì tính nhất quán trong GSI  Lưu User của bạn  Review JSON để kiểm tra lỗi syntax Click \u0026ldquo;Create item\u0026rdquo; Verify creation: Item sẽ xuất hiện trong table view  Bước 2: Tạo Products Ví dụ Electronics Product Tạo product đầu tiên của bạn - tùy chỉnh các giá trị:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#electronics\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#500-1000\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;laptop001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Professional Laptop\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;High-performance laptop for professionals\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;electronics\u0026#34;, \u0026#34;price\u0026#34;: 799, \u0026#34;stock\u0026#34;: 25, \u0026#34;brand\u0026#34;: \u0026#34;TechCorp\u0026#34;, \u0026#34;specifications\u0026#34;: { \u0026#34;processor\u0026#34;: \u0026#34;Intel i7\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;16GB RAM\u0026#34;, \u0026#34;storage\u0026#34;: \u0026#34;512GB SSD\u0026#34; }, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Giải thích Key Patterns:\n GSI1PK: CATEGORY#electronics - Cho phép category-based queries GSI2PK: PRICE#500-1000 - Cho phép price range queries Nested attributes: Lưu trữ chi tiết sản phẩm phức tạp  Ví dụ Books Product Tạo product thứ hai trong category khác:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#books\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#10-50\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;book001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;DynamoDB Patterns Guide\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Complete guide to DynamoDB design patterns\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;books\u0026#34;, \u0026#34;price\u0026#34;: 29, \u0026#34;stock\u0026#34;: 100, \u0026#34;author\u0026#34;: \u0026#34;Database Expert\u0026#34;, \u0026#34;isbn\u0026#34;: \u0026#34;978-1234567890\u0026#34;, \u0026#34;pages\u0026#34;: 350, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T10:00:00Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34; } Lưu ý các điểm khác biệt:\n Category khác: CATEGORY#books Price range khác: PRICE#10-50 Attributes đặc biệt cho sách: author, isbn, pages  Bước 3: Tạo Order Order Header Tạo một order liên kết với user của bạn:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#user001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;STATUS#pending\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;user001\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;total_amount\u0026#34;: 828, \u0026#34;tax_amount\u0026#34;: 66.24, \u0026#34;shipping_cost\u0026#34;: 0, \u0026#34;shipping_address\u0026#34;: { \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Seattle\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;WA\u0026#34;, \u0026#34;zip\u0026#34;: \u0026#34;98101\u0026#34; }, \u0026#34;payment_method\u0026#34;: \u0026#34;credit_card\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Giải thích Key Patterns:\n PK: USER#user001 - Liên kết order với user (cho phép \u0026ldquo;get user\u0026rsquo;s orders\u0026rdquo;) SK: ORDER#order001 - Xác định đây là order record GSI1PK: ORDER#order001 - Cho phép direct order lookup GSI2PK: STATUS#pending - Cho phép status-based queries  Bước 4: Tạo Order Items Order Item đầu tiên Thêm laptop vào order:\n{ \u0026#34;PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ITEM#laptop001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;PRODUCT#laptop001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;laptop001\u0026#34;, \u0026#34;product_name\u0026#34;: \u0026#34;Professional Laptop\u0026#34;, \u0026#34;quantity\u0026#34;: 1, \u0026#34;unit_price\u0026#34;: 799, \u0026#34;total_price\u0026#34;: 799, \u0026#34;added_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Order Item thứ hai Thêm sách vào cùng order:\n{ \u0026#34;PK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ITEM#book001\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;PRODUCT#book001\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;ORDER#order001\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;order001\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;book001\u0026#34;, \u0026#34;product_name\u0026#34;: \u0026#34;DynamoDB Patterns Guide\u0026#34;, \u0026#34;quantity\u0026#34;: 1, \u0026#34;unit_price\u0026#34;: 29, \u0026#34;total_price\u0026#34;: 29, \u0026#34;added_at\u0026#34;: \u0026#34;2025-08-11T11:00:00Z\u0026#34; } Giải thích Key Patterns:\n PK: ORDER#order001 - Nhóm items với order của chúng SK: ITEM#productID - Xác định specific items GSI1: Tạo product-to-order relationship  Xác minh cấu trúc dữ liệu của bạn Kiểm tra nội dung Table Sau khi tạo tất cả items, table của bạn sẽ chứa:\n   PK SK Entity Type     USER#user001 PROFILE User Profile   USER#user001 ORDER#order001 Order (linked to user)   PRODUCT#laptop001 DETAILS Product (Electronics)   PRODUCT#book001 DETAILS Product (Books)   ORDER#order001 ITEM#laptop001 Order Item (Laptop)   ORDER#order001 ITEM#book001 Order Item (Book)    Validate Relationships Xác minh các relationships này hoạt động:\n User → Orders: PK=USER#user001 trả về profile + orders Order → Items: PK=ORDER#order001 trả về order details + items Category grouping: GSI1 với CATEGORY#electronics trả về products Status grouping: GSI2 với STATUS#pending trả về orders  Tips tạo dữ liệu JSON Best Practices  Sử dụng naming nhất quán: Tuân theo các patterns đã thiết lập Validate JSON syntax: Kiểm tra missing commas, brackets Include required attributes: PK, SK, và GSI keys Sử dụng meaningful IDs: Làm cho chúng readable và unique  Các lỗi thường gặp cần tránh  ❌ Missing GSI keys: Luôn populate GSI1PK/GSI1SK và GSI2PK/GSI2SK ❌ Inconsistent patterns: Tuân thủ định dạng ENTITY#ID ❌ Wrong data types: Sử dụng strings cho keys, appropriate types cho values ❌ JSON syntax errors: Missing quotes, commas, hoặc brackets  Quan trọng: Nếu bạn gặp JSON syntax errors, hãy kiểm tra quotation marks, commas, và brackets của bạn. Console sẽ highlight các syntax issues.\n\rTùy chỉnh dữ liệu của bạn Làm cho nó cá nhân hóa Tùy chỉnh các giá trị này để workshop trở thành của bạn:\n Tên user và emails: Sử dụng thông tin của riêng bạn Tên products: Tạo products bạn thấy thú vị Addresses: Sử dụng city/state của bạn Prices: Giá trị thực tế cho products của bạn  Thêm nhiều Items Xem xét tạo thêm:\n Nhiều users (tên bạn bè, gia đình) Nhiều products (các categories khác) Additional orders Multiple items per order  Sẵn sàng cho Querying Bây giờ bạn đã có một dataset e-commerce hoàn chỉnh với Single Table Design patterns phù hợp, bạn đã sẵn sàng khám phá các query patterns khác nhau. Trong phần tiếp theo, chúng ta sẽ học cách retrieve dữ liệu này một cách hiệu quả sử dụng các query techniques khác nhau.\nData Creation Complete: Bạn đã thành công implement Single Table Design với proper entity relationships, composite keys, và GSI patterns!\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/2-single-table-design/2.4-query-patterns/",
	"title": "2.4 Các Mẫu Truy Vấn",
	"tags": [],
	"description": "",
	"content": "Các Mẫu Truy Vấn 🔍 Học các kỹ thuật truy vấn hiệu quả sử dụng DynamoDB Console\nTổng Quan Học cách truy xuất dữ liệu hiệu quả sử dụng cả truy vấn bảng và truy vấn Global Secondary Index (GSI).\nTruy Vấn vs Quét  Truy Vấn (Query): Nhanh, hiệu quả, sử dụng khóa chính ✅ Quét (Scan): Chậm, tốn kém, đọc toàn bộ bảng ❌  Quan trọng: Luôn sử dụng các thao tác Query. Các thao tác Scan có thể vượt quá giới hạn Free Tier.\n\rTruy Cập Giao Diện Query  Đi đến: Tab Items trong bảng DynamoDB của bạn Nhấp vào: Nút \u0026ldquo;Query\u0026rdquo; (không phải Scan) Chọn: Truy vấn bảng hoặc truy vấn Index  Mẫu 1: Lấy Hồ Sơ Người Dùng Mục tiêu: Lấy thông tin cụ thể của người dùng\nCấu hình Query:\n Khóa phân vùng (PK): USER#user001 Khóa sắp xếp (SK): PROFILE  Kết quả: Một mục chứa dữ liệu hồ sơ người dùng\nMẫu 2: Lấy Đơn Hàng Của Người Dùng Mục tiêu: Lấy tất cả đơn hàng của một người dùng\nCấu hình Query:\n Khóa phân vùng (PK): USER#user001 Điều kiện khóa sắp xếp: \u0026ldquo;begins_with\u0026rdquo; Giá trị khóa sắp xếp: ORDER#  Kết quả: Hồ sơ người dùng + tất cả đơn hàng của họ\nMẫu 3: Lấy Chi Tiết Đơn Hàng Mục tiêu: Lấy thông tin đầy đủ của đơn hàng\nCấu hình Query:\n Khóa phân vùng (PK): ORDER#order001 Khóa sắp xếp: Để trống (lấy tất cả các mục)  Kết quả: Chi tiết đơn hàng + tất cả các mục trong đơn hàng\nMẫu 4: Sản Phẩm Theo Danh Mục (GSI) Mục tiêu: Tìm sản phẩm trong danh mục cụ thể\nChuyển sang Truy vấn GSI:\n Nhấp vào \u0026ldquo;Query (index)\u0026rdquo; Chọn Index: GSI1  Cấu hình Query:\n Khóa phân vùng GSI1: CATEGORY#electronics Khóa sắp xếp GSI1: Để trống  Kết quả: Tất cả sản phẩm điện tử\nMẫu 5: Đơn Hàng Theo Trạng Thái (GSI) Mục tiêu: Tìm đơn hàng với trạng thái cụ thể\nCấu hình Query:\n Chọn Index: GSI2 Khóa phân vùng GSI2: STATUS#pending  Kết quả: Tất cả đơn hàng đang chờ xử lý\nHiệu Suất Truy Vấn Hiệu suất mong đợi:\n Một mục: ~1-2ms, 1 RCU Nhiều mục: ~3-5ms, 2-5 RCU Truy vấn GSI: ~2-4ms, 1-3 RCU  Thực Hành Tốt Nhất  Luôn sử dụng Query (không bao giờ Scan) Thiết kế khóa cho truy vấn trước Sử dụng GSIs chiến lược cho các mẫu truy vấn khác nhau Giám sát hiệu suất và dung lượng tiêu thụ  Thành Thạo Truy Vấn: Bây giờ bạn có thể truy xuất dữ liệu hiệu quả sử dụng các mẫu thiết kế bảng đơn!\n\rBước Tiếp Theo Sẵn sàng cho quy mô toàn cầu! Module tiếp theo sẽ đề cập đến Global Tables cho triển khai đa vùng.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.1-global-tables-overview/",
	"title": "3.1 Tổng quan Global Tables",
	"tags": [],
	"description": "",
	"content": "Tổng quan Global Tables 🌐 Hiểu về kiến trúc DynamoDB Global Tables và cơ chế sao chép (replication)\nGlobal Tables là gì? Global Tables cho phép bạn tạo một cơ sở dữ liệu đa vùng (multi-region), đa chủ (multi-master) cung cấp hiệu suất đọc và ghi cục bộ cho các ứng dụng phân tán toàn cầu. Triển khai CloudFormation của bạn đã cấu hình sẵn điều này.\nCác thành phần Kiến trúc Cấu hình Workshop hiện tại Hạ tầng của bạn đã bao gồm:\n   Thành phần US-East-1 EU-West-1 Trạng thái     Bảng DynamoDB Chính (Primary) Bản sao (Replica) ✅ Hoạt động   Tên bảng demo-ecommerce-freetier demo-ecommerce-freetier ✅ Đồng bộ   DynamoDB Streams Bật Bật ✅ Đang sao chép   Sao chép Hai chiều Hai chiều ✅ Ổn định    Quá trình Sao chép Cách dữ liệu luân chuyển giữa các vùng    Bước Hành động Chi tiết     Bước 1 Người dùng ghi vào US-EAST-1     Mục USER#john, SK: PROFILE    Ghi cục bộ Thành công ngay lập tức    Bản ghi Stream Được tạo   Bước 2 DynamoDB Streams ghi nhận thay đổi     Bản ghi Stream NEW_AND_OLD_IMAGES    Dấu thời gian 2025-08-11T15:30:00.123Z    Sự kiện INSERT   Bước 3 Sao chép giữa các vùng     Nguồn Stream us-east-1    Đích Bảng eu-west-1    Độ trễ 500ms - 2 giây   Bước 4 EU-WEST-1 nhận bản cập nhật     Mục xuất hiện USER#john, SK: PROFILE    Có sẵn để đọc Ngay lập tức    Trạng thái Đã sao chép ✅    Mô hình Nhất quán Nhất quán Cuối cùng (Eventually Consistent) Global Tables cung cấp nhất quán cuối cùng giữa các vùng:\n Ngay lập tức: Ghi thành công ngay tại vùng nguồn Lan truyền: Thay đổi được sao chép đến các vùng khác trong 0.5-2 giây Hội tụ: Tất cả các vùng cuối cùng sẽ có dữ liệu giống nhau Bền vững: Dữ liệu không bao giờ bị mất trong quá trình sao chép  Giải quyết Xung đột Khi cùng một mục được sửa đổi ở nhiều vùng đồng thời:\nChiến lược Last Writer Wins:\n So sánh dấu thời gian của các bản cập nhật xung đột Giữ lại dấu thời gian muộn hơn (thay đổi gần đây nhất) Ghi đè các thay đổi trước đó ở tất cả các vùng Thông báo qua CloudWatch metrics  Ví dụ về xung đột:\nThời gian: 15:30:00 - Người dùng US cập nhật: name = \u0026#34;John Smith\u0026#34; Thời gian: 15:30:01 - Người dùng EU cập nhật: name = \u0026#34;John Doe\u0026#34; Kết quả: Tất cả các vùng sẽ có name = \u0026#34;John Doe\u0026#34; (Bản cập nhật EU thắng do dấu thời gian muộn hơn) Lợi ích của Global Tables Lợi ích về Hiệu suất  Độ trễ cục bộ: Thời gian phản hồi dưới 10ms trong mỗi vùng Quy mô toàn cầu: Phục vụ người dùng trên toàn thế giới mà không bị giảm hiệu suất Phân phối tải: Lưu lượng được phân phối giữa các vùng  Lợi ích về Khả dụng  Chuyển đổi vùng tự động: Tự động chuyển đổi nếu một vùng không khả dụng Khôi phục thảm họa: DR tích hợp giữa các vùng địa lý 99.999% Khả dụng: Khả dụng cao hơn so với triển khai một vùng  Lợi ích về Vận hành  Không cần thay đổi mã: Ứng dụng hoạt động với bất kỳ vùng nào Tự động mở rộng: Mỗi vùng mở rộng độc lập Quản lý hợp nhất: Một bảng duy nhất trên tất cả các vùng  Các Khái niệm Chính cần nhớ Sao chép Đa chủ (Multi-Master Replication)  Bất kỳ vùng nào cũng có thể chấp nhận ghi Tất cả các vùng đều có thể phục vụ đọc Không có điểm lỗi duy nhất  Sao chép Dựa trên Stream  DynamoDB Streams cung cấp năng lượng cho sao chép Giao hàng theo thứ tự đảm bảo tính nhất quán Logic thử lại xử lý các lỗi tạm thời  Độc lập Vùng  Mỗi vùng hoạt động độc lập Phân vùng mạng không ảnh hưởng đến hoạt động cục bộ Kết nối giữa các vùng chỉ cần thiết cho sao chép  Lợi thế Workshop: Mẫu CloudFormation của bạn đã cấu hình tất cả các thành phần Global Tables. Bạn có thể tập trung vào việc hiểu và kiểm tra chức năng!\n\rHạn chế cần hiểu Thách thức về Nhất quán Cuối cùng  Không nhất quán tạm thời có thể xảy ra trong 0.5-2 giây Thiết kế ứng dụng phải xử lý nhất quán cuối cùng Nhất quán mạnh chỉ khả dụng trong một vùng  Hạn chế về Giải quyết Xung đột  Last Writer Wins có thể ghi đè các thay đổi Không có logic giải quyết xung đột tùy chỉnh Xử lý xung đột ở cấp ứng dụng có thể cần thiết  Phụ thuộc giữa các vùng  Kết nối mạng cần thiết cho sao chép Sự cố vùng có thể làm chậm sao chép Độ trễ giữa các vùng ảnh hưởng đến tốc độ sao chép  Các Trường hợp Sử dụng Thực tế Lý tưởng cho Global Tables    Trường hợp Sử dụng Tại sao nó hoạt động Cân nhắc     Hồ sơ người dùng Cập nhật không thường xuyên, đọc nhiều Xử lý xung đột hồ sơ   Danh mục sản phẩm Phân phối nội dung, truy cập toàn cầu Thách thức đồng bộ hóa tồn kho   Bảng xếp hạng trò chơi Cạnh tranh toàn cầu, nhất quán cuối cùng OK Có thể xảy ra xung đột điểm số   Dữ liệu cảm biến IoT Dữ liệu chuỗi thời gian, chỉ thêm Khối lượng ghi cao    Các kịch bản thách thức  Giao dịch tài chính (yêu cầu nhất quán mạnh) Quản lý tồn kho (mức tồn kho cần độ chính xác) Hợp tác thời gian thực (cần nhất quán ngay lập tức)  Bước Tiếp theo Bây giờ bạn đã hiểu kiến trúc Global Tables, hãy xác minh cấu hình đa vùng của bạn và xem sao chép hoạt động thông qua AWS Console.\nSẵn sàng Khám phá: Global Tables của bạn đã được cấu hình và đang chạy. Đã đến lúc xem chúng hoạt động!\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.2-verify-global-setup/",
	"title": "3.2 Xác minh Global Setup",
	"tags": [],
	"description": "",
	"content": "Xác minh Global Setup ✅ Xác minh từng bước cấu hình Global Tables của bạn thông qua AWS Console\nTổng quan CloudFormation template của bạn đã tự động cấu hình Global Tables giữa US-East-1 và EU-West-1. Hãy xác minh mọi thứ hoạt động đúng trước khi chúng ta bắt đầu kiểm tra việc sao chép.\nBước 1: Truy cập Primary Region Điều hướng đến US-East-1  Mở AWS Console: Đảm bảo bạn đã đăng nhập Kiểm tra Region: Góc trên-phải sẽ hiển thị \u0026ldquo;N. Virginia\u0026rdquo; Chuyển đổi nếu cần: Nhấp vào dropdown region → \u0026ldquo;US East (N. Virginia)\u0026rdquo;  Tìm DynamoDB Table của bạn  Dịch vụ: Điều hướng đến dịch vụ DynamoDB Bảng: Nhấp vào \u0026ldquo;Tables\u0026rdquo; trong thanh bên trái Định vị: Tìm demo-ecommerce-freetier Trạng thái: Xác minh bảng hiển thị \u0026ldquo;Active\u0026rdquo;  Bước 2: Kiểm tra Cấu hình Global Tables Truy cập Tab Global Tables  Nhấp: Tên bảng demo-ecommerce-freetier Điều hướng: Nhấp vào tab \u0026ldquo;Global tables\u0026rdquo; Xem xét: Cấu hình Global Tables  Xác minh Trạng thái Global Tables Cấu hình Mong đợi:\n   Region Status Role Health     us-east-1 Active Primary ✅ Healthy   eu-west-1 Active Replica ✅ Healthy    Các chỉ số chính cần xác minh:\n Trạng thái Sao chép: \u0026ldquo;Healthy\u0026rdquo; hoặc \u0026ldquo;Active\u0026rdquo; Lần Sao chép Cuối: Dấu thời gian gần đây Cập nhật Đang Chờ: Sẽ là 0  Bước 3: Xác minh Khu vực Thứ cấp Chuyển đến EU-West-1  Bộ chọn Khu vực: Nhấp vào dropdown khu vực (góc trên bên phải) Chọn: \u0026ldquo;Europe (Ireland)\u0026rdquo; - eu-west-1 Chờ: Cho phép console chuyển đổi khu vực  Kiểm tra Bảng Sao chép  Điều hướng: DynamoDB → Tables Tìm: Cùng tên bảng demo-ecommerce-freetier Xác minh: Bảng tồn tại và hiển thị \u0026ldquo;Active\u0026rdquo; Kiểm tra: Tab global tables hiển thị trạng thái sao chép  Mong đợi trong EU-West-1:\n Tên Bảng: demo-ecommerce-freetier (giống hệt) Trạng thái: Active Vai trò: Bảng sao chép Khu vực Chính: us-east-1  Bước 4: So sánh Lược đồ Bảng Xác minh Tính nhất quán của Lược đồ Cả hai khu vực sẽ có lược đồ bảng giống hệt nhau:\nKhóa Chính:\n Khóa Phân vùng: PK (Chuỗi) Khóa Sắp xếp: SK (Chuỗi)  Chỉ mục Bổ sung Toàn cầu:\n GSI1: GSI1PK (Chuỗi), GSI1SK (Chuỗi) GSI2: GSI2PK (Chuỗi), GSI2SK (Chuỗi)  Cài đặt:\n Công suất Đọc: 5 đơn vị (được cấp phát) Công suất Ghi: 5 đơn vị (được cấp phát) Khôi phục theo thời gian: Bật DynamoDB Streams: Bật  Bước 5: Kiểm tra Dữ liệu Hiện tại Xác minh Việc Sao chép Dữ liệu Tồn tại Nếu bạn đã hoàn thành Module 2, hãy kiểm tra rằng dữ liệu hiện có của bạn xuất hiện trong cả hai khu vực:\nChuyển đến US-East-1:\n Đi tới: Tab Items Đếm mục: Ghi lại số lượng mục  Chuyển đến EU-West-1:\n Đi tới: Tab Items So sánh số lượng: Sẽ khớp chính xác với khu vực US  Nếu số lượng mục không khớp:\n Chờ 1-2 phút cho việc sao chép Làm mới trang trình duyệt Kiểm tra trạng thái sức khỏe của Global Tables  Bước 6: Xác minh Cấu hình Luồng Kiểm tra DynamoDB Streams Trong US-East-1:\n Tổng quan về Bảng: Đi tới chi tiết bảng Xuất và luồng: Nhấp vào tab Chi tiết luồng: Xác minh cài đặt  Cấu hình Luồng Mong đợi:\n Trạng thái Luồng: Bật Loại chế độ xem luồng: Ảnh mới và cũ Stream ARN: Sẽ có mặt Số lượng Shard: 1 hoặc nhiều shard đang hoạt động  Bước 7: Bảng điều khiển Kiểm tra Sức khỏe Giám sát Sức khỏe Sao chép Truy cập Giám sát:\n Tab Chỉ số: Nhấp trong chế độ xem bảng Chỉ số Global Tables: Tìm các chỉ số sao chép Các chỉ số chính:  Độ trễ sao chép Số lượng sao chép đang chờ Sự kiện sao chép thất bại    Các chỉ số Khỏe mạnh:\n Độ trễ Sao chép: \u0026lt; 2 giây trung bình Số lượng Đang chờ: 0 hoặc rất thấp Tỷ lệ Lỗi: 0%  Bước 8: Kiểm tra Kết nối Mạng Kiểm tra Giao tiếp Giữa các Khu vực Xác minh kết nối đơn giản:\n Tạo mục kiểm tra trong US-East-1 Chờ 30 giây Kiểm tra EU-West-1 cho mục đó Xóa mục kiểm tra từ một trong hai khu vực  Ví dụ về Mục Kiểm tra:\n{ \u0026#34;PK\u0026#34;: \u0026#34;TEST#connectivity\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;VERIFICATION\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;2025-08-11T15:00:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;global_tables_verification\u0026#34; } Khắc phục sự cố Các Vấn đề Thường gặp Vấn đề: Không tìm thấy Bảng trong EU-West-1 Nguyên nhân Có thể:\n Chọn sai khu vực Triển khai CloudFormation chưa hoàn tất Thiết lập Global Tables thất bại  Giải pháp:\n Kiểm tra lại khu vực trong góc trên bên phải Xác minh CloudFormation stack đã hoàn tất thành công Kiểm tra quyền IAM cho truy cập giữa các khu vực  Vấn đề: Trạng thái Sao chép Không Khỏe mạnh Kiểm tra Các Mục này:\n Kết nối mạng giữa các khu vực DynamoDB Streams đã bật trên bảng nguồn Quyền IAM cho dịch vụ Global Tables Công suất Bảng không bị giới hạn  Vấn đề: Số lượng Mục Không Khớp Các Bước Khắc phục sự cố:\n Chờ lâu hơn (lên đến 2 phút) Làm mới trang trình duyệt Kiểm tra lỗi trong nhật ký CloudWatch Xác minh không bị giới hạn trong các chỉ số  Danh sách Kiểm tra Xác minh Trước khi tiếp tục đến các hoạt động đa khu vực:\n Cả hai khu vực đều có thể truy cập thông qua AWS Console Bảng tồn tại trong cả us-east-1 và eu-west-1 Trạng thái Global Tables hiển thị \u0026ldquo;Healthy\u0026rdquo; hoặc \u0026ldquo;Active\u0026rdquo; Lược đồ giống hệt giữa các khu vực DynamoDB Streams đã bật Dữ liệu hiện có đã được sao chép (nếu có) Kiểm tra kết nối hoạt động Chỉ số giám sát có sẵn  Xác minh Hoàn tất: Thiết lập Global Tables của bạn khỏe mạnh và sẵn sàng cho các hoạt động đa khu vực!\n\rCác Bước Tiếp Theo Với Global Tables đã được xác minh và khỏe mạnh, bạn đã sẵn sàng để trải nghiệm các hoạt động đa khu vực. Trong phần tiếp theo, chúng ta sẽ tạo dữ liệu trong một khu vực và theo dõi nó tự động xuất hiện trong khu vực khác!\nMẹo Chuyên nghiệp: Giữ cả hai tab khu vực mở trong trình duyệt của bạn (US-East-1 và EU-West-1) để dễ dàng chuyển đổi giữa chúng trong các bài tập.\n\r"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/3-global-tables-setup/3.3-multi-region-operations/",
	"title": "3.3 Hoạt động Đa Vùng",
	"tags": [],
	"description": "",
	"content": "Hoạt động Đa Vùng 🌍 Thực hành trực tiếp với các thao tác đọc/ghi giữa các vùng và kiểm tra sao chép\nTổng quan Bây giờ Global Tables của bạn đã được xác minh, hãy trải nghiệm các hoạt động đa vùng. Bạn sẽ tạo dữ liệu ở một vùng, xác minh nó được sao chép sang vùng khác và kiểm tra các kịch bản giải quyết xung đột.\nBài tập 1: Ghi vào Vùng Chính, Đọc từ Bản Sao Bước 1: Tạo Người Dùng Toàn Cầu ở US-East-1 Đảm bảo bạn đang ở US-East-1:\n Kiểm tra vùng: Góc trên bên phải sẽ hiển thị \u0026ldquo;N. Virginia\u0026rdquo; Điều hướng: DynamoDB → Tables → demo-ecommerce-freetier Đi tới: Tab Items Nhấp vào: \u0026ldquo;Create item\u0026rdquo;  Mẫu Tạo Người Dùng Chuyển sang chế độ xem JSON và tạo:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#global-user-[tên-của-bạn]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#[tên-của-bạn]@global.com\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;global-user-[tên-của-bạn]\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;[Tên Của Bạn] Global\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;[tên-của-bạn]@global.com\u0026#34;, \u0026#34;region_created\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;created_timestamp\u0026#34;: \u0026#34;2025-08-11T15:30:00Z\u0026#34;, \u0026#34;test_type\u0026#34;: \u0026#34;global_replication\u0026#34;, \u0026#34;workshop_session\u0026#34;: \u0026#34;module3\u0026#34; } Quan trọng: Thay thế [tên-của-bạn] bằng tên thực của bạn để làm cho các mục trở nên duy nhất.\nBước 2: Ghi lại Thời gian Tạo Ghi lại chi tiết:\n Nhấp vào \u0026ldquo;Create item\u0026rdquo; Ghi lại thời gian: Ghi lại khi bạn nhấp vào tạo Chụp ảnh màn hình: Của mục đã tạo  Bước 3: Chuyển sang EU-West-1 Thay đổi vùng:\n Bộ chọn vùng: Nhấp vào menu thả xuống (góc trên bên phải) Chọn: \u0026ldquo;Europe (Ireland)\u0026rdquo; Chờ: Để hoàn tất chuyển vùng Điều hướng: DynamoDB → Tables → demo-ecommerce-freetier  Bước 4: Truy vấn Dữ liệu Sao chép Tìm kiếm người dùng của bạn:\n Tab Items: Điều hướng đến chế độ xem các mục Nhấp vào: Nút \u0026ldquo;Query\u0026rdquo; Cấu hình truy vấn:  Khóa phân vùng (PK): USER#global-user-[tên-của-bạn] Khóa sắp xếp (SK): PROFILE   Nhấp vào: \u0026ldquo;Run\u0026rdquo;  Bước 5: Xác minh Sao chép Kết quả mong đợi:\n Nếu ngay lập tức: Mục xuất hiện ngay lập tức Nếu bị trễ: Chờ 30-60 giây và thử lại Thời gian sao chép: Ghi lại mất bao lâu  Xác minh dữ liệu:\n Tất cả các thuộc tính: Phải khớp chính xác region_created: Vẫn sẽ hiển thị \u0026ldquo;us-east-1\u0026rdquo; Dấu thời gian: Phải giống hệt nhau  Bài tập 2: Ghi từ Bản Sao, Đọc từ Vùng Chính Bước 1: Tạo Sản phẩm ở EU-West-1 Ở lại EU-West-1 và tạo một sản phẩm:\n{ \u0026#34;PK\u0026#34;: \u0026#34;PRODUCT#eu-product-[id-duy-nhat]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#eu-electronics\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;PRODUCT#eu-product-[id-duy-nhat]\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;PRICE#200-500\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;PRODUCT#eu-product-[id-duy-nhat]\u0026#34;, \u0026#34;product_id\u0026#34;: \u0026#34;eu-product-[id-duy-nhat]\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;European Smartphone\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Created in EU region\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;eu-electronics\u0026#34;, \u0026#34;price\u0026#34;: 299, \u0026#34;stock\u0026#34;: 50, \u0026#34;region_created\u0026#34;: \u0026#34;eu-west-1\u0026#34;, \u0026#34;created_timestamp\u0026#34;: \u0026#34;2025-08-11T15:35:00Z\u0026#34;, \u0026#34;test_type\u0026#34;: \u0026#34;reverse_replication\u0026#34; } Bước 2: Chuyển lại sang US-East-1 Quay lại vùng chính:\n Bộ chọn vùng: \u0026ldquo;US East (N. Virginia)\u0026rdquo; Điều hướng: DynamoDB → Tables → Items Truy vấn sản phẩm:  PK: PRODUCT#eu-product-[id-duy-nhat] SK: DETAILS    Bước 3: Xác minh Sao chép Ngược Kiểm tra kết quả:\n Sản phẩm xuất hiện: Trong vùng US region_created: Vẫn hiển thị \u0026ldquo;eu-west-1\u0026rdquo; Tất cả dữ liệu nguyên vẹn: Bản sao chính xác từ EU  Điều này chứng minh sao chép hai chiều - bạn có thể ghi vào bất kỳ vùng nào!\nBài tập 3: Kiểm tra Giải quyết Xung đột Bước 1: Tạo Đơn hàng Cơ sở Trong US-East-1, tạo một đơn hàng:\n{ \u0026#34;PK\u0026#34;: \u0026#34;USER#global-user-[tên-của-bạn]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;DETAILS\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;STATUS#pending\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;ORDER#conflict-test\u0026#34;, \u0026#34;order_id\u0026#34;: \u0026#34;conflict-test\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;global-user-[tên-của-bạn]\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;total_amount\u0026#34;: 100, \u0026#34;last_updated_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;conflict_test\u0026#34;: true } Chờ 2 phút cho việc sao chép hoàn tất.\nBước 2: Cập nhật Đồng thời (Nâng cao) Nếu làm việc với một đối tác:\n Đối tác A: Cập nhật đơn hàng trong US-East-1 Đối tác B: Cập nhật cùng một đơn hàng trong EU-West-1 Cả hai cùng thực hiện: Trong vòng 10 giây của nhau  Cập nhật US (Đối tác A):\n{ \u0026#34;total_amount\u0026#34;: 150, \u0026#34;last_updated_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;update_timestamp\u0026#34;: \u0026#34;2025-08-11T15:40:00Z\u0026#34; } Cập nhật EU (Đối tác B):\n{ \u0026#34;total_amount\u0026#34;: 200, \u0026#34;last_updated_region\u0026#34;: \u0026#34;eu-west-1\u0026#34;, \u0026#34;update_timestamp\u0026#34;: \u0026#34;2025-08-11T15:40:05Z\u0026#34; } Bước 3: Quan sát Giải quyết Xung đột Sau 2-3 phút:\n Kiểm tra cả hai vùng: Truy vấn cùng một đơn hàng So sánh kết quả: Cập nhật nào đã thắng? Hiểu lý do: Cập nhật có dấu thời gian sau cùng sẽ thắng  Kết quả mong đợi: Cập nhật EU thắng vì dấu thời gian 15:40:05 \u0026gt; 15:40:00\nBài tập 4: Các Mẫu Truy vấn Giữa các Vùng Bước 1: Truy vấn Danh mục trong EU Kiểm tra các truy vấn GSI hoạt động giữa các vùng:\n Ở lại EU-West-1 Truy vấn Chỉ mục: GSI1 GSI1PK: CATEGORY#eu-electronics Chạy truy vấn  Kết quả mong đợi: Hiển thị các sản phẩm được tạo trong vùng EU\nBước 2: Truy vấn Trạng thái trong US Kiểm tra các truy vấn trạng thái giữa các vùng:\n Chuyển đến US-East-1 Truy vấn Chỉ mục: GSI2 GSI2PK: STATUS#pending Chạy truy vấn  Kết quả mong đợi: Hiển thị các đơn hàng từ cả hai vùng với trạng thái đang chờ xử lý\nBài tập 5: Phân tích Thời gian Sao chép Bước 1: Đo tốc độ sao chép Tạo các mục có dấu thời gian:\n Ghi lại thời gian bắt đầu: Ghi chú thời gian chính xác trước khi tạo Tạo mục: Trong một vùng Chuyển vùng: Ngay lập tức Truy vấn liên tục: Cho đến khi mục xuất hiện Tính toán độ trễ: Thời gian kết thúc - thời gian bắt đầu  Mẫu Mục Kiểm tra:\n{ \u0026#34;PK\u0026#34;: \u0026#34;TEST#timing-[timestamp]\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;REPLICATION\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;[exact-timestamp]\u0026#34;, \u0026#34;source_region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;timing_analysis\u0026#34; } Bước 2: Ghi lại Kết quả Ghi lại phát hiện của bạn:\n Sao chép nhanh nhất: ___ giây Sao chép chậm nhất: ___ giây Thời gian trung bình: ___ giây Tính nhất quán: Thường \u0026lt; 2 giây  Các Kịch bản Thực tế Kịch bản 1: Đăng nhập Người dùng Toàn cầu Giả lập ứng dụng toàn cầu:\n Người dùng đăng nhập: Vùng US Hồ sơ được cập nhật: Dấu thời gian đăng nhập cuối Người dùng di chuyển: Đến vùng EU Ứng dụng kiểm tra: Hồ sơ từ EU Xác minh: Thời gian đăng nhập gần đây hiển thị  Kịch bản 2: Quản lý Tồn kho Cập nhật tồn kho sản phẩm:\n Sản phẩm được bán: Vùng US (-1 tồn kho) Cùng sản phẩm: Truy vấn vùng EU Mức tồn kho: Nhất quán theo thời gian Logic kinh doanh: Xử lý sự không nhất quán tạm thời  Kịch bản 3: Xử lý Đơn hàng Luồng đơn hàng đa vùng:\n Đơn hàng được tạo: Vùng EU Thanh toán được xử lý: Vùng US Trạng thái được cập nhật: Vùng EU Thực hiện: Đọc từ vùng gần nhất  Giám sát Hiệu suất Kiểm tra Các chỉ số Sao chép Trong các bài tập:\n Giám sát: Các chỉ số CloudWatch Theo dõi: Độ trễ sao chép Quan sát: Số lượng sao chép đang chờ xử lý Theo dõi: Tỷ lệ lỗi (sẽ là 0)  Hướng dẫn Khắc phục sự cố Sao chép Không hoạt động Các vấn đề phổ biến:\n Chọn sai vùng: Kiểm tra kỹ vùng đã chọn Lỗi chính tả trong khóa: Cần khớp chính xác cho các truy vấn Bộ nhớ đệm trình duyệt: Làm mới trang Chờ lâu hơn: Có thể mất đến 2 phút  Truy vấn Trả về Rỗng Danh sách kiểm tra:\n PK/SK chính xác: Khớp chuỗi chính xác Vùng chính xác: Mục tồn tại trong vùng được truy vấn GSI đã được điền: Các khóa GSI được bao gồm trong mục Loại truy vấn: Sử dụng Query, không phải Scan  Giải quyết Xung đột Không như Mong đợi Hiểu biết:\n Độ chính xác của dấu thời gian: Ở mức độ mili giây Đồng bộ hóa đồng hồ: AWS xử lý thời gian Thiết kế ứng dụng: Lập kế hoạch cho việc ghi đè  Quan trọng: Nếu bạn gặp sự cố, hãy kiểm tra trạng thái sức khỏe của Global Tables trong bảng điều khiển và xác minh kết nối mạng.\n\rTóm tắt Bài tập Bằng cách hoàn thành các bài tập này, bạn đã trải nghiệm:\n ✅ Sao chép giữa các vùng trong cả hai hướng ✅ Thời gian nhất quán theo sự kiện ✅ Giải quyết xung đột với Người viết Cuối cùng thắng ✅ Các mẫu truy vấn hoạt động giữa các vùng ✅ Các kịch bản thực tế và phân tích thời gian  Thành thạo Đa Vùng: Bây giờ bạn hiểu cách Global Tables cho phép các ứng dụng thực sự toàn cầu với hiệu suất địa phương!\n\rCác Bước Tiếp theo Với trải nghiệm thực hành Global Tables đã hoàn thành, hãy giám sát hiệu suất sao chép và hiểu các chỉ số giúp bạn vận hành các ứng dụng toàn cầu trong môi trường sản xuất.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/4.1-stream-configuration/",
	"title": "4.1 Stream Configuration",
	"tags": [],
	"description": "",
	"content": "Bật DynamoDB Streams 🔧 Bật theo dõi thay đổi cho bảng DynamoDB của bạn\nTổng quan DynamoDB Streams ghi lại mọi thay đổi đối với các mục trong bảng của bạn. Điều này cho phép xử lý thời gian thực với các hàm Lambda.\nCác loại Stream View Chọn dữ liệu cần ghi lại:\n NEW_AND_OLD_IMAGES: Dữ liệu đầy đủ trước và sau (khuyến nghị cho demo) NEW_IMAGE: Chỉ dữ liệu sau khi cập nhật OLD_IMAGE: Chỉ dữ liệu trước khi cập nhật KEYS_ONLY: Chỉ các khóa  Hướng dẫn từng bước: Bật Streams Bước 1: Mở DynamoDB Console  AWS Console → Tìm kiếm \u0026ldquo;DynamoDB\u0026rdquo; Bảng → Nhấp vào bảng của bạn demo-ecommerce-freetier Nhấp vào tab \u0026ldquo;Exports and streams\u0026rdquo;  Bước 2: Bật Stream  Tìm phần \u0026ldquo;DynamoDB stream\u0026rdquo; Nhấp vào nút \u0026ldquo;Turn on\u0026rdquo; Chọn \u0026ldquo;New and old images\u0026rdquo; Nhấp vào \u0026ldquo;Turn on stream\u0026rdquo;  Bước 3: Ghi lại Stream ARN Sao chép Stream ARN - bạn sẽ cần nó để thiết lập Lambda:\narn:aws:dynamodb:us-east-1:123456789012:table/demo-ecommerce-freetier/stream/2025-08-13T10:00:00.000\rXác minh ✅ Trạng thái stream hiển thị \u0026ldquo;Enabled\u0026rdquo;\n✅ Stream ARN được hiển thị\n✅ Loại view là \u0026ldquo;New and old images\u0026rdquo;\nBài tập 2: Hiểu cài đặt Stream So sánh các loại Stream View Chọn loại view phù hợp với trường hợp sử dụng của bạn:\n   Loại View Trường hợp sử dụng Dữ liệu được ghi lại     KEYS_ONLY Ghi nhật ký kiểm tra Chỉ PK, SK   NEW_IMAGE Cập nhật bộ nhớ đệm Mục sau thay đổi   OLD_IMAGE Theo dõi thay đổi Mục trước thay đổi   NEW_AND_OLD_IMAGES Ghi nhật ký đầy đủ Cả hai phiên bản    Cân nhắc về hiệu suất Ảnh hưởng của cấu hình Stream:\n Lưu trữ: NEW_AND_OLD_IMAGES sử dụng nhiều không gian nhất Payload Lambda: Payload lớn hơn với hình ảnh đầy đủ Thời gian xử lý: Nhiều dữ liệu hơn = thời gian xử lý lâu hơn Chi phí: Chi phí bổ sung tối thiểu cho streams  Lưu ý Free Tier: DynamoDB Streams được bao gồm mà không tính thêm phí. Xử lý Lambda nằm trong giới hạn Free Tier.\n\rBài tập 3: Kiểm tra chức năng Stream Bước 1: Tạo mục kiểm tra Tạo một sự kiện stream:\n Tab Items: Quay lại tab \u0026ldquo;Items\u0026rdquo; Tạo mục: Nhấp vào \u0026ldquo;Create item\u0026rdquo; Thêm dữ liệu kiểm tra:  { \u0026#34;PK\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;EVENT#001\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;stream_test\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Testing DynamoDB Stream functionality\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T16:00:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;verify_stream_capture\u0026#34; } Tạo: Nhấp vào \u0026ldquo;Create item\u0026rdquo;  Bước 2: Giám sát hoạt động Stream Kiểm tra các chỉ số stream:\n CloudWatch: Mở console CloudWatch trong tab mới Metrics: Điều hướng đến Metrics DynamoDB: Nhấp vào namespace \u0026ldquo;DynamoDB\u0026rdquo; Chỉ số stream: Tìm các chỉ số liên quan đến stream IncomingRecords: Nên hiển thị 1 bản ghi mới  Bước 3: Hiểu cấu trúc bản ghi Stream Cấu trúc bản ghi Stream (tham khảo):\n{ \u0026#34;Records\u0026#34;: [ { \u0026#34;eventID\u0026#34;: \u0026#34;12345...\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;INSERT\u0026#34;, \u0026#34;eventVersion\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;aws:dynamodb\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;dynamodb\u0026#34;: { \u0026#34;ApproximateCreationDateTime\u0026#34;: 1642857600, \u0026#34;Keys\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;EVENT#001\u0026#34;} }, \u0026#34;NewImage\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;STREAM#test-item\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;EVENT#001\u0026#34;}, \u0026#34;event_type\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;stream_test\u0026#34;}, \u0026#34;description\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Testing DynamoDB Stream functionality\u0026#34;}, \u0026#34;created_at\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;2025-08-11T16:00:00Z\u0026#34;}, \u0026#34;test_purpose\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;verify_stream_capture\u0026#34;} }, \u0026#34;SequenceNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;SizeBytes\u0026#34;: 245, \u0026#34;StreamViewType\u0026#34;: \u0026#34;NEW_AND_OLD_IMAGES\u0026#34; } } ] } Các thành phần chính:\n eventName: INSERT (vì đây là mục mới) Keys: Khóa chính của mục đã thay đổi NewImage: Dữ liệu mục đầy đủ sau khi tạo OldImage: Sẽ trống đối với các sự kiện INSERT  Bài tập 4: Thực hành cấu hình Stream tốt nhất Cấu hình tối ưu cho Workshop Cài đặt khuyến nghị:\n ✅ Loại View: NEW_AND_OLD_IMAGES (dấu vết kiểm tra toàn diện) ✅ Thời gian lưu trữ: 24 giờ (mặc định, đủ cho xử lý) ✅ Shards: Được AWS quản lý tự động ✅ Xử lý: Lambda với kích thước batch phù hợp  Cân nhắc về bảo mật Kiểm soát truy cập:\n Quyền IAM: Lambda cần quyền đọc stream Mã hóa: Streams kế thừa cài đặt mã hóa của bảng VPC: Streams hoạt động trong cấu hình VPC của bạn Giám sát: CloudTrail ghi lại truy cập stream  Tối ưu hóa chi phí Các yếu tố chi phí Stream:\n Yêu cầu đọc: Không tính thêm phí cho ghi stream Lời gọi Lambda: Tính vào Free Tier Truyền dữ liệu: Tối thiểu cho xử lý trong cùng khu vực Lưu trữ: Bản ghi stream được lưu giữ trong 24 giờ  Bài tập 5: Cấu hình Stream nâng cao Mô hình nhiều người tiêu dùng Khi bạn cần nhiều bộ xử lý:\n Stream đơn: Một stream DynamoDB cho mỗi bảng Nhiều Lambda: Mỗi Lambda có thể xử lý cùng một stream Kinesis Data Streams: Cho định tuyến phức tạp hơn Lọc sự kiện: Lọc ở mức Lambda  Cân nhắc đa khu vực Global Tables + Streams:\n Mỗi khu vực: Có stream riêng Sự kiện sao chép: Tạo bản ghi stream Lọc: Phân biệt ghi ứng dụng với sao chép Xử lý: Xử lý sự khác biệt khu vực  Tóm tắt cấu hình Bằng cách hoàn thành bài tập này, bạn đã:\n ✅ Bật DynamoDB Streams trên bảng của bạn ✅ Cấu hình loại view để ghi lại thay đổi toàn diện ✅ Kiểm tra chức năng stream với dữ liệu mẫu ✅ Hiểu cấu trúc bản ghi stream và các thành phần ✅ Áp dụng thực hành tốt nhất để cấu hình tối ưu  Stream Sẵn Sàng: Bảng DynamoDB của bạn bây giờ ghi lại mọi thay đổi và sẵn sàng cho xử lý Lambda!\n\rBước tiếp theo Với streams đã được cấu hình, bạn đã sẵn sàng tạo các hàm Lambda sẽ xử lý các sự kiện này trong thời gian thực. Trong phần tiếp theo, chúng ta sẽ xây dựng và triển khai một hàm Lambda được tối ưu hóa cho xử lý stream DynamoDB.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/4-streams-lambda-processing/4.2-lambda-function-setup/",
	"title": "4.2 Lambda Function Setup",
	"tags": [],
	"description": "",
	"content": "Tạo Lambda Xử Lý Stream ⚙️ Xây dựng hàm Lambda để xử lý các sự kiện stream DynamoDB trong thời gian thực\nTổng quan AWS Lambda cung cấp khả năng tính toán serverless để xử lý các sự kiện stream DynamoDB. Hàm của bạn sẽ tự động kích hoạt khi các mục trong bảng thay đổi, cho phép các mẫu xử lý thời gian thực.\nYêu cầu của Hàm Cấu hình Tối ưu Free Tier:\n Runtime: Python 3.9 (đáng tin cậy và được hỗ trợ tốt) Memory: 128 MB (tối thiểu cho Free Tier) Timeout: 30 giây (đủ cho xử lý stream) Concurrent executions: 10 (an toàn trong Free Tier)  Bài tập 1: Tạo Hàm Lambda Bước 1: Truy cập Lambda Console Điều hướng đến dịch vụ Lambda:\n AWS Console: Tìm kiếm \u0026ldquo;Lambda\u0026rdquo; Functions: Nhấp vào \u0026ldquo;Functions\u0026rdquo; trong thanh bên trái Create function: Nhấp vào nút \u0026ldquo;Create function\u0026rdquo; Author from scratch: Chọn tùy chọn này  Bước 2: Cấu hình Cài đặt Cơ bản Cấu hình hàm:\n Function name: demo-dynamodb-stream-processor Runtime: Chọn \u0026ldquo;Python 3.9\u0026rdquo; Architecture: Để mặc định là \u0026ldquo;x86_64\u0026rdquo; Permissions: \u0026ldquo;Create a new role with basic Lambda permissions\u0026rdquo; Create function: Nhấp để tiếp tục  Bước 3: Cấu hình Cài đặt Hàm Tối ưu hóa cho Free Tier:\n Configuration tab: Nhấp sau khi tạo hàm General configuration: Nhấp vào \u0026ldquo;Edit\u0026rdquo; Memory: Đặt thành 128 MB Timeout: Đặt thành 30 giây Save: Nhấp để áp dụng thay đổi  Bài tập 2: Thêm Mã Xử Lý Stream Bước 1: Thay thế Mã Hàm Điều hướng đến trình chỉnh sửa mã:\n Code tab: Nhấp để mở trình chỉnh sửa mã lambda_function.py: Thay thế mã hiện có bằng:  import json import boto3 import logging from datetime import datetime # Cấu hình logging logger = logging.getLogger() logger.setLevel(logging.INFO) def lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34; Xử lý các sự kiện Stream DynamoDB Tối ưu hóa cho AWS Free Tier \u0026#34;\u0026#34;\u0026#34; try: processed_records = 0 # Xử lý từng bản ghi trong batch for record in event[\u0026#39;Records\u0026#39;]: event_name = record[\u0026#39;eventName\u0026#39;] # Xử lý các sự kiện INSERT, MODIFY, REMOVE if event_name in [\u0026#39;INSERT\u0026#39;, \u0026#39;MODIFY\u0026#39;, \u0026#39;REMOVE\u0026#39;]: process_stream_record(record) processed_records += 1 # Trả về phản hồi thành công return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: f\u0026#39;Successfully processed {processed_records}records\u0026#39;, \u0026#39;timestamp\u0026#39;: datetime.utcnow().isoformat(), \u0026#39;processed_count\u0026#39;: processed_records }) } except Exception as e: logger.error(f\u0026#34;Error processing stream records: {str(e)}\u0026#34;) # Ném lại lỗi để Lambda retry raise e def process_stream_record(record): \u0026#34;\u0026#34;\u0026#34; Xử lý từng bản ghi stream Thêm logic nghiệp vụ của bạn tại đây \u0026#34;\u0026#34;\u0026#34; event_name = record[\u0026#39;eventName\u0026#39;] # Trích xuất thông tin chính if \u0026#39;dynamodb\u0026#39; in record: keys = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;Keys\u0026#39;, {}) pk = keys.get(\u0026#39;PK\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) sk = keys.get(\u0026#39;SK\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) logger.info(f\u0026#34;Processing {event_name}for item: {pk}#{sk}\u0026#34;) # Xử lý các loại sự kiện khác nhau if event_name == \u0026#39;INSERT\u0026#39;: handle_insert_event(record) elif event_name == \u0026#39;MODIFY\u0026#39;: handle_modify_event(record) elif event_name == \u0026#39;REMOVE\u0026#39;: handle_remove_event(record) def handle_insert_event(record): \u0026#34;\u0026#34;\u0026#34; Xử lý việc tạo mục mới \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing INSERT event\u0026#34;) # Lấy dữ liệu mục mới new_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;NewImage\u0026#39;, {}) # Ví dụ: Gửi thông báo cho người dùng mới if \u0026#39;USER#\u0026#39; in str(new_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;New user created - could send welcome email\u0026#34;) # Ví dụ: Cập nhật kho cho sản phẩm mới elif \u0026#39;PRODUCT#\u0026#39; in str(new_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;New product created - could update search index\u0026#34;) # Ví dụ: Xử lý đơn hàng mới elif \u0026#39;ORDER#\u0026#39; in str(new_image.get(\u0026#39;SK\u0026#39;, {})): logger.info(\u0026#34;New order created - could trigger fulfillment\u0026#34;) def handle_modify_event(record): \u0026#34;\u0026#34;\u0026#34; Xử lý cập nhật mục \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing MODIFY event\u0026#34;) # Lấy hình ảnh trước và sau old_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;OldImage\u0026#39;, {}) new_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;NewImage\u0026#39;, {}) # Ví dụ: Kiểm tra thay đổi trạng thái old_status = old_image.get(\u0026#39;status\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) new_status = new_image.get(\u0026#39;status\u0026#39;, {}).get(\u0026#39;S\u0026#39;, \u0026#39;\u0026#39;) if old_status != new_status: logger.info(f\u0026#34;Status changed from {old_status}to {new_status}\u0026#34;) # Có thể kích hoạt thông báo, cập nhật bộ nhớ đệm, v.v. # Ví dụ: Phát hiện thay đổi giá old_price = old_image.get(\u0026#39;price\u0026#39;, {}).get(\u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;) new_price = new_image.get(\u0026#39;price\u0026#39;, {}).get(\u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;) if old_price != new_price: logger.info(f\u0026#34;Price changed from {old_price}to {new_price}\u0026#34;) # Có thể làm mới bộ nhớ đệm, cập nhật gợi ý, v.v. def handle_remove_event(record): \u0026#34;\u0026#34;\u0026#34; Xử lý xóa mục \u0026#34;\u0026#34;\u0026#34; logger.info(\u0026#34;Processing REMOVE event\u0026#34;) # Lấy dữ liệu mục đã xóa old_image = record[\u0026#39;dynamodb\u0026#39;].get(\u0026#39;OldImage\u0026#39;, {}) # Ví dụ: Dọn dẹp dữ liệu liên quan if \u0026#39;USER#\u0026#39; in str(old_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;User deleted - could cleanup user data\u0026#34;) # Ví dụ: Xóa khỏi chỉ mục tìm kiếm elif \u0026#39;PRODUCT#\u0026#39; in str(old_image.get(\u0026#39;PK\u0026#39;, {})): logger.info(\u0026#34;Product deleted - could remove from search\u0026#34;) Deploy: Nhấp vào \u0026ldquo;Deploy\u0026rdquo; để lưu mã  Bước 2: Kiểm tra Cú pháp Hàm Xác thực mã:\n Test tab: Nhấp vào \u0026ldquo;Test\u0026rdquo; tab Create test event: Nhấp vào \u0026ldquo;Create new event\u0026rdquo; Event template: Chọn mẫu \u0026ldquo;DynamoDB Update\u0026rdquo; Event name: test-stream-event Test: Nhấp vào \u0026ldquo;Test\u0026rdquo; để xác thực cú pháp  Bài tập 3: Cấu hình Kích hoạt Nguồn Sự kiện Bước 1: Thêm Kích hoạt DynamoDB Kết nối Lambda với Stream DynamoDB:\n Function overview: Trong Lambda console Add trigger: Nhấp vào nút \u0026ldquo;Add trigger\u0026rdquo; Trigger configuration:  Source: Chọn \u0026ldquo;DynamoDB\u0026rdquo; DynamoDB table: Chọn demo-ecommerce-freetier Batch size: Đặt thành 10 (tối ưu Free Tier) Starting position: Chọn \u0026ldquo;Trim horizon\u0026rdquo;   Add: Nhấp để tạo kích hoạt  Bước 2: Xác minh Cấu hình Nguồn Sự kiện Kiểm tra cấu hình kích hoạt:\n Function overview: Nên hiển thị kích hoạt DynamoDB Configuration: Xác minh cài đặt:  Batch size: 10 bản ghi Starting position: Trim horizon Status: Enabled State: Creating → Enabled    Bước 3: Cấu hình Quyền IAM Cập nhật vai trò thực thi Lambda:\n Configuration tab: Nhấp vào \u0026ldquo;Permissions\u0026rdquo; Execution role: Nhấp vào liên kết tên vai trò IAM console: Mở trong tab mới Attach policies: Thêm AWSLambdaDynamoDBExecutionRole Save: Quay lại Lambda console  Bài tập 4: Kiểm tra Xử Lý Stream Bước 1: Tạo Mục Kiểm tra Tạo sự kiện stream:\n DynamoDB console: Mở trong tab mới Items tab: Điều hướng đến bảng của bạn Create item: Thêm dữ liệu kiểm tra:  { \u0026#34;PK\u0026#34;: \u0026#34;LAMBDA#test-processing\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;EVENT#001\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;lambda_test\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Testing Lambda stream processing\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-08-11T16:30:00Z\u0026#34;, \u0026#34;test_purpose\u0026#34;: \u0026#34;verify_lambda_trigger\u0026#34; } Create: Lưu mục  Bước 2: Giám sát Thực thi Lambda Kiểm tra việc gọi hàm:\n Lambda console: Quay lại hàm của bạn Monitor tab: Nhấp để xem các chỉ số Invocations: Nên hiển thị 1 lần gọi mới Duration: Thường \u0026lt; 1 giây Errors: Nên là 0  Bước 3: Kiểm tra Nhật ký Xử lý Xem nhật ký chi tiết:\n CloudWatch logs: Nhấp vào \u0026ldquo;View CloudWatch logs\u0026rdquo; Log stream: Nhấp vào luồng nhật ký mới nhất Log entries: Tìm kiếm:  START RequestId: [uuid] Processing INSERT for item: LAMBDA#test-processing#EVENT#001 Processing INSERT event Successfully processed 1 records END RequestId: [uuid]    Bài tập 5: Cấu hình Nâng cao Cấu hình Xử lý Lỗi Cấu hình retry và xử lý lỗi:\n Event source mapping: Chỉnh sửa kích hoạt DynamoDB của bạn Additional settings:  Retry attempts: 3 (mặc định) Maximum record age: 3600 giây Split batch on error: Bật Dead letter queue: Cấu hình SNS/SQS (tùy chọn)    Tối ưu hóa Hiệu suất Cài đặt tối ưu Free Tier:\n Parallelization factor: 1 (tránh đồng thời quá mức) Batch size: 10 bản ghi (cân bằng độ trễ và chi phí) Reserved concurrency: 10 (kiểm soát chi phí) Provisioned concurrency: 0 (không cần cho streams)  Giám sát và Cảnh báo Thiết lập giám sát cơ bản:\n CloudWatch Alarms: Tạo cho:  Lỗi hàm \u0026gt; 0 Thời gian thực thi hàm \u0026gt; 20 giây Tuổi iterator \u0026gt; 30 giây   Notifications: Chủ đề SNS cho cảnh báo Dashboard: Thêm các chỉ số vào bảng điều khiển CloudWatch  Mẫu Kiểm tra Hàm Kiểm tra Các Loại Sự kiện Khác nhau Kiểm tra toàn diện:\n INSERT: Tạo mục mới MODIFY: Cập nhật mục hiện có REMOVE: Xóa mục Batch: Nhiều thay đổi nhanh chóng  Danh sách Kiểm tra Xác thực Xác minh cài đặt của bạn:\n ✅ Hàm Lambda đã được tạo với runtime chính xác ✅ Kích hoạt stream đã được cấu hình với quyền truy cập thích hợp ✅ Mã đã được triển khai và cú pháp đã được xác thực ✅ Kiểm tra thành công với dữ liệu mẫu ✅ Nhật ký hiển thị chi tiết xử lý ✅ Chỉ số cho thấy thực thi khỏe mạnh  Khắc phục sự cố Các Vấn đề Thường gặp Lambda Không Kích hoạt Kiểm tra các mục sau:\n Stream enabled: DynamoDB stream đang hoạt động Permissions: Lambda có quyền đọc stream Event source mapping: Kích hoạt đang được bật Function state: Lambda đang hoạt động (không bị lỗi)  Lỗi Xử lý Các bước gỡ lỗi:\n CloudWatch logs: Kiểm tra các thông báo lỗi Timeout issues: Tăng thời gian chờ nếu cần Memory errors: Giám sát mức sử dụng bộ nhớ Permissions: Xác minh tất cả các quyền cần thiết  Vấn đề Hiệu suất Mẹo tối ưu hóa:\n Batch size: Điều chỉnh dựa trên thời gian xử lý Memory allocation: Định kích thước phù hợp cho tải công việc của bạn Cold starts: Cân nhắc sử dụng provisioned concurrency nếu cần Error handling: Triển khai logic thử lại thích hợp  Lambda Ready: Function của bạn bây giờ processing DynamoDB stream events trong real-time!\n\rNext Steps Với Lambda function của bạn processing stream events, bạn ready để practice với real data changes và explore different event-driven patterns. Next section covers hands-on stream processing exercises.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/5.1-cloudwatch-dashboards/",
	"title": "5.1 Giám sát cơ bản với CloudWatch",
	"tags": [],
	"description": "",
	"content": "Giám sát cơ bản với CloudWatch 📊 Xem các chỉ số cơ bản của DynamoDB trong CloudWatch\nTổng quan CloudWatch tự động thu thập các chỉ số cơ bản từ DynamoDB. Chúng ta sẽ khám phá cách xem các chỉ số này mà không cần tạo bảng điều khiển phức tạp.\nXem các chỉ số DynamoDB Bước 1: Truy cập chỉ số CloudWatch  AWS Console: Tìm kiếm \u0026ldquo;CloudWatch\u0026rdquo; Metrics: Nhấp vào \u0026ldquo;Metrics\u0026rdquo; trong thanh bên trái AWS/DynamoDB: Nhấp vào namespace này Table Metrics: Duyệt qua các chỉ số có sẵn  Bước 2: Kiểm tra các chỉ số chính Giám sát sử dụng cơ bản:\n ConsumedReadCapacityUnits: Kiểm tra mức sử dụng đọc ConsumedWriteCapacityUnits: Kiểm tra mức sử dụng ghi ItemCount: Số lượng mục trong bảng TableSizeBytes: Dung lượng lưu trữ  Bước 3: Xem chi tiết chỉ số Nhấp vào bất kỳ chỉ số nào để xem chi tiết:\n Chọn bảng của bạn: demo-ecommerce-freetier Xem biểu đồ: Hiển thị mức sử dụng theo thời gian Kiểm tra giá trị: Đảm bảo nằm trong giới hạn Free Tier  Các chỉ số chính cần kiểm tra    Chỉ số Mục đích Giới hạn Free Tier     ConsumedReadCapacityUnits Sử dụng đọc 25 RCU/tháng   ConsumedWriteCapacityUnits Sử dụng ghi 25 WCU/tháng   ItemCount Số lượng mục Không giới hạn   TableSizeBytes Dung lượng lưu trữ 25 GB    Free Tier: Tất cả các chỉ số cơ bản của CloudWatch cho DynamoDB đều miễn phí. Không cần tạo bảng điều khiển.\n\rMẹo giám sát đơn giản  Kiểm tra chỉ số hàng ngày: Đảm bảo nằm trong giới hạn Free Tier Tìm kiếm các đột biến: Các mẫu sử dụng bất thường Giám sát lưu trữ: Theo dõi sự tăng trưởng kích thước bảng Không cần cảnh báo: Kiểm tra trực quan là đủ cho workshop  Giám sát cơ bản: Bây giờ bạn có thể xem các chỉ số DynamoDB quan trọng trong CloudWatch!\n\rBước tiếp theo Xem chỉ số cơ bản là đủ cho workshop này. Chuyển sang module tiếp theo khi sẵn sàng.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/5-monitoring-optimization/5.2-cost-analysis-optimization/",
	"title": "5.2 Phân Tích Chi Phí &amp; Tối Ưu Hóa",
	"tags": [],
	"description": "",
	"content": "Phân Tích Chi Phí \u0026amp; Giám Sát Free Tier 💰 Giám sát việc sử dụng Free Tier của AWS để tránh các chi phí không mong muốn\nTổng Quan Học cách theo dõi chi phí DynamoDB và duy trì trong giới hạn Free Tier trong suốt workshop.\nGiới Hạn Free Tier    Dịch Vụ Giới Hạn Free Tier Sử Dụng Trong Workshop Trạng Thái     DynamoDB Đọc 25 RCU/tháng ~5-10 RCU ✅ An Toàn   DynamoDB Ghi 25 WCU/tháng ~5-10 WCU ✅ An Toàn   DynamoDB Lưu Trữ 25 GB \u0026lt;1 GB ✅ An Toàn   Lambda Requests 1M/tháng \u0026lt;1,000 ✅ An Toàn   CloudWatch Metrics 10 custom 5-8 sử dụng ✅ An Toàn    Bài Tập 1: Kiểm Tra Chi Phí Hiện Tại Bước 1: Truy Cập Bảng Điều Khiển Billing  AWS Console: Nhấp vào tên tài khoản (góc trên bên phải) Billing and Cost Management: Chọn từ menu thả xuống Cost Explorer: Nhấp vào \u0026ldquo;Cost Explorer\u0026rdquo; trong thanh bên trái Kết quả mong đợi: $0.00 cho tất cả các dịch vụ  Bước 2: Xem Sử Dụng Free Tier  Billing console: Nhấp vào tab \u0026ldquo;Free Tier\u0026rdquo; Kiểm tra sử dụng:  DynamoDB: Nên hiển thị phần trăm sử dụng thấp Lambda: Ít lần gọi CloudWatch: Sử dụng các metric cơ bản    Bài Tập 2: Thiết Lập Cảnh Báo Billing Bước 1: Bật Cảnh Báo Billing  Billing preferences: Điều hướng đến phần cài đặt Billing alerts: Bật \u0026ldquo;Nhận Cảnh Báo Sử Dụng Free Tier\u0026rdquo; Email: Xác nhận email nhận thông báo Ngưỡng: Đặt cảnh báo ở mức 80% giới hạn Free Tier  Bước 2: Tạo Ngân Sách Chi Phí  AWS Budgets: Điều hướng đến dịch vụ Budgets Tạo ngân sách:  Loại ngân sách: Ngân sách chi phí Số tiền: $1.00 (dự phòng an toàn) Chu kỳ: Hàng tháng Cảnh báo tại: $0.80 (ngưỡng 80%)    Quan Trọng: Workshop này được thiết kế để duy trì trong Free Tier. Bất kỳ chi phí nào phát sinh đều chỉ ra việc sử dụng không mong muốn.\n\rMẹo Tối Ưu Hóa Chi Phí Duy Trì Chi Phí Bằng Không  Giám sát sử dụng: Kiểm tra bảng điều khiển Free Tier hàng tuần Dọn dẹp tài nguyên: Xóa tài nguyên khi hoàn thành workshop Tránh cấp phát quá mức: Tuân theo cấu hình workshop Đặt cảnh báo: Nhận thông báo trước khi phát sinh chi phí  Dọn Dẹp Tài Nguyên Workshop Khi hoàn thành workshop:\n Xóa bảng DynamoDB: Loại bỏ chi phí lưu trữ Xóa hàm Lambda: Loại bỏ chi phí tính toán Xóa bảng điều khiển CloudWatch: Loại bỏ chi phí giám sát Xóa vai trò IAM: Dọn dẹp quyền  Kiểm Soát Chi Phí: Tuân theo hướng dẫn workshop giúp bạn duy trì trong giới hạn Free Tier.\n\rXử Lý Sự Cố Chi Phí Nếu Bạn Thấy Chi Phí Phát Sinh  Kiểm tra vùng: Đảm bảo sử dụng đúng vùng AWS Xem lại tài nguyên: Tìm kiếm tài nguyên không mong muốn Liên hệ hỗ trợ: Hỗ trợ Free Tier của AWS sẵn sàng Dừng tài nguyên: Ngay lập tức dừng bất kỳ tài nguyên nào có thể tính phí  Các Vấn Đề Chi Phí Thường Gặp  Sai vùng: Tài nguyên ở các vùng không thuộc Free Tier Cấp phát quá mức: Công suất vượt giới hạn Free Tier Tài nguyên bị quên: Tài nguyên còn chạy sau workshop Chuyển dữ liệu: Chi phí di chuyển dữ liệu giữa các vùng  Bước Tiếp Theo Với việc giám sát chi phí đã được thiết lập, bạn có thể tiếp tục workshop với sự tự tin rằng bạn sẽ duy trì trong giới hạn Free Tier.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/6.1-batch-operations/",
	"title": "6.1 Thao Tác Hàng Loạt",
	"tags": [],
	"description": "",
	"content": "Thao Tác Hàng Loạt ⚡ Xử lý nhiều mục một cách hiệu quả với thao tác hàng loạt\nTổng Quan Thao tác hàng loạt cho phép bạn xử lý nhiều mục trong một lần gọi API, giảm độ trễ và cải thiện hiệu suất.\nLợi Ích Chính  BatchWriteItem: Thêm hoặc xóa tối đa 25 mục cùng lúc BatchGetItem: Lấy tối đa 100 mục cùng lúc Giảm số lần gọi API: Hiệu suất và hiệu quả tốt hơn Giảm độ trễ: Xử lý hàng loạt giảm số lần truyền tải  Bài Tập 1: Ghi Hàng Loạt Đơn Giản Bước 1: Tạo Dữ Liệu Sản Phẩm Hàng Loạt Sử dụng AWS CloudShell cho thao tác hàng loạt:\n Mở CloudShell: Từ AWS Console Tạo tệp hàng loạt: Tạo JSON cho nhiều sản phẩm  cat \u0026gt; batch-products.json \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; { \u0026#34;demo-ecommerce-freetier\u0026#34;: [ { \u0026#34;PutRequest\u0026#34;: { \u0026#34;Item\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#gaming-laptop\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;}, \u0026#34;GSI1PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;CATEGORY#electronics\u0026#34;}, \u0026#34;GSI1SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#gaming-laptop\u0026#34;}, \u0026#34;name\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Gaming Laptop Pro\u0026#34;}, \u0026#34;price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1299\u0026#34;}, \u0026#34;stock\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;15\u0026#34;}, \u0026#34;category\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;electronics\u0026#34;} } } }, { \u0026#34;PutRequest\u0026#34;: { \u0026#34;Item\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#wireless-mouse\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;}, \u0026#34;GSI1PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;CATEGORY#electronics\u0026#34;}, \u0026#34;GSI1SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#wireless-mouse\u0026#34;}, \u0026#34;name\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Wireless Gaming Mouse\u0026#34;}, \u0026#34;price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;79\u0026#34;}, \u0026#34;stock\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;50\u0026#34;}, \u0026#34;category\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;electronics\u0026#34;} } } }, { \u0026#34;PutRequest\u0026#34;: { \u0026#34;Item\u0026#34;: { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#rgb-keyboard\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;}, \u0026#34;GSI1PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;CATEGORY#electronics\u0026#34;}, \u0026#34;GSI1SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#rgb-keyboard\u0026#34;}, \u0026#34;name\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;RGB Mechanical Keyboard\u0026#34;}, \u0026#34;price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;159\u0026#34;}, \u0026#34;stock\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;25\u0026#34;}, \u0026#34;category\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;electronics\u0026#34;} } } } ] } EOF Bước 2: Thực Hiện Ghi Hàng Loạt Thực hiện thao tác ghi hàng loạt:\naws dynamodb batch-write-item --request-items file://batch-products.json Kết quả mong đợi: Tất cả 3 mục được tạo trong một lần gọi API thay vì 3 lần riêng lẻ.\nBước 3: Xác Minh Kết Quả Kiểm tra DynamoDB Console:\n Điều hướng đến các mục trong bảng của bạn Tìm 3 sản phẩm mới:  PRODUCT#gaming-laptop PRODUCT#wireless-mouse PRODUCT#rgb-keyboard    Bài Tập 2: Đọc Hàng Loạt Bước 1: Lấy Nhiều Mục Lấy nhiều mục cùng lúc:\ncat \u0026gt; batch-get.json \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; { \u0026#34;demo-ecommerce-freetier\u0026#34;: { \u0026#34;Keys\u0026#34;: [ { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#gaming-laptop\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;} }, { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#wireless-mouse\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;} }, { \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#rgb-keyboard\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;} } ] } } EOF Bước 2: Thực Hiện Đọc Hàng Loạt aws dynamodb batch-get-item --request-items file://batch-get.json So sánh hiệu suất:\n Thao tác hàng loạt: 1 lần gọi API cho 3 mục Thao tác riêng lẻ: 3 lần gọi API cho 3 mục Kết quả: Giảm 3 lần gọi API = hiệu suất tốt hơn  Lợi Ích Của Thao Tác Hàng Loạt Tăng Hiệu Quả    Loại Thao Tác Gọi API Riêng Lẻ Gọi API Hàng Loạt Hiệu Quả     Ghi 25 mục 25 lần gọi API 1 lần gọi API Nhanh hơn 25 lần   Đọc 100 mục 100 lần gọi API 1 lần gọi API Nhanh hơn 100 lần   Thao tác hỗn hợp Nhiều lần gọi 1 lần gọi API Nhanh hơn nhiều    Lợi Ích Free Tier  Cùng mức sử dụng RCU/WCU: Dung lượng tiêu thụ không đổi Giảm số lần gọi API: Tăng thông lượng trong giới hạn Giảm độ trễ: Phản hồi ứng dụng nhanh hơn Xử lý hiệu quả: Hoàn thành nhiều công việc hơn mỗi lần yêu cầu  Thực Hành Tốt Nhất Giới Hạn Hàng Loạt  BatchWriteItem: Tối đa 25 mục mỗi yêu cầu BatchGetItem: Tối đa 100 mục mỗi yêu cầu Kích thước mục: Mỗi mục vẫn tính vào giới hạn kích thước Xử lý lỗi: Một số mục có thể thất bại trong khi các mục khác thành công  Khi Nào Nên Sử Dụng Hàng Loạt Thích hợp cho hàng loạt:\n Nhiều mục liên quan cần xử lý Nhập/xuất dữ liệu hàng loạt Các thao tác khởi tạo hoặc dọn dẹp  Không lý tưởng cho hàng loạt:\n Thao tác một mục Các mục cần xử lý lỗi riêng lẻ Tương tác người dùng theo thời gian thực  Thành Thạo Thao Tác Hàng Loạt: Bây giờ bạn có thể xử lý nhiều mục một cách hiệu quả, giảm số lần gọi API và cải thiện hiệu suất ứng dụng!\n\rBước Tiếp Theo Tiếp tục học các mẫu DynamoDB nâng cao hoặc chuyển sang module workshop tiếp theo.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/6-advanced-patterns/6.2-conditional-updates/",
	"title": "6.2 Cập Nhật Có Điều Kiện",
	"tags": [],
	"description": "",
	"content": "Cập Nhật Có Điều Kiện 🛡️ Ngăn chặn điều kiện tranh chấp với cập nhật có điều kiện\nTổng Quan Cập nhật có điều kiện đảm bảo tính toàn vẹn dữ liệu bằng cách chỉ cập nhật các mục khi các điều kiện cụ thể được đáp ứng. Điều này ngăn chặn các điều kiện tranh chấp trong các ứng dụng nhiều người dùng.\nVấn Đề: Điều Kiện Tranh Chấp Không có điều kiện (nguy hiểm):\nNgười dùng A đọc: stock = 1 Người dùng B đọc: stock = 1 Người dùng A cập nhật: stock = 0 ✅ Người dùng B cập nhật: stock = 0 ❌ (Nên thất bại!) Kết quả: Bán quá mức! Có điều kiện (an toàn):\nNgười dùng A: stock = 0 (điều kiện: stock \u0026gt;= 1) ✅ Người dùng B: thất bại (điều kiện: stock \u0026gt;= 1) ❌ Kết quả: Chỉ người đầu tiên thành công ✅ Bài Tập 1: Cập Nhật Có Điều Kiện Cơ Bản Bước 1: Tạo Sản Phẩm Thử Nghiệm Tạo một sản phẩm để thử nghiệm:\naws dynamodb put-item \\  --table-name demo-ecommerce-freetier \\  --item \u0026#39;{ \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PRODUCT#conditional-test\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;DETAILS\u0026#34;}, \u0026#34;name\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Test Product\u0026#34;}, \u0026#34;price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;100\u0026#34;}, \u0026#34;stock\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;5\u0026#34;} }\u0026#39; Bước 2: Cập Nhật Giá An Toàn Cập nhật giá với điều kiện:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET price = :new_price\u0026#34; \\  --condition-expression \u0026#34;price = :current_price\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:new_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;90\u0026#34;}, \u0026#34;:current_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;100\u0026#34;} }\u0026#39; Bước 3: Cập Nhật Có Điều Kiện Thất Bại Thử cập nhật với điều kiện sai:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET price = :new_price\u0026#34; \\  --condition-expression \u0026#34;price = :wrong_price\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:new_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;80\u0026#34;}, \u0026#34;:wrong_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;100\u0026#34;} }\u0026#39; Kết quả: Lỗi ConditionalCheckFailedException\nBài Tập 2: Ngăn Chặn Bán Quá Mức Bước 1: Giảm Số Lượng Hàng An Toàn Mua 2 sản phẩm một cách an toàn:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET stock = stock - :quantity\u0026#34; \\  --condition-expression \u0026#34;stock \u0026gt;= :quantity\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:quantity\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;2\u0026#34;} }\u0026#39; Bước 2: Ngăn Chặn Bán Quá Mức Thử mua nhiều hơn số lượng có sẵn:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET stock = stock - :quantity\u0026#34; \\  --condition-expression \u0026#34;stock \u0026gt;= :quantity\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:quantity\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;5\u0026#34;} }\u0026#39; Kết quả: Thất bại vì chỉ còn 3 sản phẩm trong kho\nBài Tập 3: Kiểm Soát Phiên Bản Bước 1: Thêm Phiên Bản Vào Sản Phẩm Cập nhật sản phẩm với số phiên bản:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET version = :version\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:version\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1\u0026#34;} }\u0026#39; Bước 2: Cập Nhật Dựa Trên Phiên Bản Cập nhật với kiểm tra phiên bản:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET price = :new_price, version = version + :inc\u0026#34; \\  --condition-expression \u0026#34;version = :expected_version\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:new_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;85\u0026#34;}, \u0026#34;:inc\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1\u0026#34;}, \u0026#34;:expected_version\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1\u0026#34;} }\u0026#39; Bước 3: Xung Đột Phiên Bản Thử cập nhật với phiên bản cũ:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET price = :new_price, version = version + :inc\u0026#34; \\  --condition-expression \u0026#34;version = :old_version\u0026#34; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:new_price\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;75\u0026#34;}, \u0026#34;:inc\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1\u0026#34;}, \u0026#34;:old_version\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;1\u0026#34;} }\u0026#39; Kết quả: Thất bại vì phiên bản hiện tại là 2, không phải 1\nBài Tập 4: Ngăn Chặn Trùng Lặp Bước 1: Tạo Người Dùng Duy Nhất Tạo người dùng chỉ khi chưa tồn tại:\naws dynamodb put-item \\  --table-name demo-ecommerce-freetier \\  --item \u0026#39;{ \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;USER#unique-user\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PROFILE\u0026#34;}, \u0026#34;email\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;user@example.com\u0026#34;} }\u0026#39; \\  --condition-expression \u0026#34;attribute_not_exists(PK)\u0026#34; Bước 2: Thử Trùng Lặp Thử tạo cùng người dùng lần nữa:\naws dynamodb put-item \\  --table-name demo-ecommerce-freetier \\  --item \u0026#39;{ \u0026#34;PK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;USER#unique-user\u0026#34;}, \u0026#34;SK\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;PROFILE\u0026#34;}, \u0026#34;email\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;different@example.com\u0026#34;} }\u0026#39; \\  --condition-expression \u0026#34;attribute_not_exists(PK)\u0026#34; Kết quả: Thất bại - ngăn chặn người dùng trùng lặp\nBước 3: Điều Kiện Phức Tạp Cập nhật với nhiều điều kiện:\naws dynamodb update-item \\  --table-name demo-ecommerce-freetier \\  --key \u0026#39;{\u0026#34;PK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;PRODUCT#conditional-test\u0026#34;},\u0026#34;SK\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;DETAILS\u0026#34;}}\u0026#39; \\  --update-expression \u0026#34;SET featured = :featured\u0026#34; \\  --condition-expression \u0026#34;contains(#n, :keyword)\u0026#34; \\  --expression-attribute-names \u0026#39;{\u0026#34;#n\u0026#34;: \u0026#34;name\u0026#34;}\u0026#39; \\  --expression-attribute-values \u0026#39;{ \u0026#34;:featured\u0026#34;: {\u0026#34;BOOL\u0026#34;: true}, \u0026#34;:keyword\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Test\u0026#34;} }\u0026#39; Giám Sát Cập Nhật Có Điều Kiện Kiểm tra các chỉ số CloudWatch:\n ConditionalCheckFailedException: Tỷ lệ điều kiện thất bại SuccessfulRequestLatency: Hiệu suất cập nhật ThrottledRequests: Vấn đề dung lượng  Vị trí ảnh chụp màn hình: Thêm ảnh chụp màn hình CloudWatch hiển thị các chỉ số cập nhật có điều kiện\nLợi Ích Chính  Ngăn chặn điều kiện tranh chấp: Nhiều người dùng không thể bán quá mức hàng tồn kho Tính toàn vẹn dữ liệu: Đảm bảo các quy tắc kinh doanh được thực thi Kiểm soát phiên bản: Ngăn chặn ghi đè các thay đổi đồng thời Ngăn chặn trùng lặp: Ràng buộc duy nhất mà không cần khóa cơ sở dữ liệu  Thành Thạo Cập Nhật Có Điều Kiện: Bây giờ bạn có thể xử lý an toàn truy cập đồng thời và ngăn chặn hỏng dữ liệu!\n\rBước Tiếp Theo Bạn đã học các mẫu cập nhật có điều kiện cần thiết cho các ứng dụng sản xuất.\n"
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://crimsondd.github.io/DynamoDB-Advanced-Patterns-and-Global-Tables-Streams/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]